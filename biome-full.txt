.\src\app\(protected)\psychologia\bledy-poznawcze\page.tsx:388:14 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    386 │ 	const handleScenarioComplete = (
    387 │ 		scenarioId: string,
  > 388 │ 		responses: any[],
        │ 		           ^^^
    389 │ 		score: number,
    390 │ 	) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\techniki\page.tsx:15:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    13 │ 	description: string;
    14 │ 	polishDescription: string;
  > 15 │ 	methodology: any;
       │ 	             ^^^
    16 │ 	scientificBasis: {
    17 │ 		psychologicalPrinciples: string[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\techniki\page.tsx:21:20 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    19 │ 		neuroscienceEvidence: string;
    20 │ 		polishNeuroscienceEvidence: string;
  > 21 │ 		researchStudies: any[];
       │ 		                 ^^^
    22 │ 		evidenceLevel: "STRONG" | "MODERATE" | "WEAK" | "ANECDOTAL";
    23 │ 		polishEvidenceLevel: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\techniki\page.tsx:25:18 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    23 │ 		polishEvidenceLevel: string;
    24 │ 	};
  > 25 │ 	implementation: any;
       │ 	                ^^^
    26 │ 	effectiveness: any;
    27 │ 	supplementSynergies: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\techniki\page.tsx:26:17 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    24 │ 	};
    25 │ 	implementation: any;
  > 26 │ 	effectiveness: any;
       │ 	               ^^^
    27 │ 	supplementSynergies: any[];
    28 │ 	trackingMetrics: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\techniki\page.tsx:27:23 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    25 │ 	implementation: any;
    26 │ 	effectiveness: any;
  > 27 │ 	supplementSynergies: any[];
       │ 	                     ^^^
    28 │ 	trackingMetrics: any[];
    29 │ 	relatedTechniques: string[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\techniki\page.tsx:28:19 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    26 │ 	effectiveness: any;
    27 │ 	supplementSynergies: any[];
  > 28 │ 	trackingMetrics: any[];
       │ 	                 ^^^
    29 │ 	relatedTechniques: string[];
    30 │ 	prerequisites: string[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(public)\wyszukiwanie\page.tsx:16:53 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    15 │ export default function SearchPage() {
  > 16 │ 	const [searchResults, setSearchResults] = useState<any[]>([]);
       │ 	                                                   ^^^
    17 │ 	const [hasSearched, setHasSearched] = useState(false);
    18 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(public)\wyszukiwanie\page.tsx:19:33 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    17 │ 	const [hasSearched, setHasSearched] = useState(false);
    18 │ 
  > 19 │ 	const handleSearch = (results: any[]) => {
       │ 	                               ^^^
    20 │ 		setSearchResults(results);
    21 │ 		setHasSearched(true);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\nawyki\page.tsx:17:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    15 │ 		| "CUSTOM";
    16 │ 	polishHabitType: string;
  > 17 │ 	habitDetails: any;
       │ 	              ^^^
    18 │ 	formationStrategy: any;
    19 │ 	progress: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\nawyki\page.tsx:18:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    16 │ 	polishHabitType: string;
    17 │ 	habitDetails: any;
  > 18 │ 	formationStrategy: any;
       │ 	                   ^^^
    19 │ 	progress: any;
    20 │ 	supplementContext?: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\nawyki\page.tsx:19:12 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    17 │ 	habitDetails: any;
    18 │ 	formationStrategy: any;
  > 19 │ 	progress: any;
       │ 	          ^^^
    20 │ 	supplementContext?: any;
    21 │ 	relatedSupplements: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\nawyki\page.tsx:20:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    18 │ 	formationStrategy: any;
    19 │ 	progress: any;
  > 20 │ 	supplementContext?: any;
       │ 	                    ^^^
    21 │ 	relatedSupplements: any[];
    22 │ 	relatedTechniques: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\nawyki\page.tsx:21:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    19 │ 	progress: any;
    20 │ 	supplementContext?: any;
  > 21 │ 	relatedSupplements: any[];
       │ 	                    ^^^
    22 │ 	relatedTechniques: any[];
    23 │ 	insights: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\nawyki\page.tsx:22:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    20 │ 	supplementContext?: any;
    21 │ 	relatedSupplements: any[];
  > 22 │ 	relatedTechniques: any[];
       │ 	                   ^^^
    23 │ 	insights: any;
    24 │ 	isActive: boolean;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\nawyki\page.tsx:23:12 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    21 │ 	relatedSupplements: any[];
    22 │ 	relatedTechniques: any[];
  > 23 │ 	insights: any;
       │ 	          ^^^
    24 │ 	isActive: boolean;
    25 │ 	lastUpdated: Date;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\nawyki\page.tsx:366:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    365 │ const HabitTrackingPage = () => {
  > 366 │ 	const handleHabitCreate = (habit: any) => {
        │ 	                                  ^^^
    367 │ 		console.log("Creating habit:", habit);
    368 │ 		// In real app, this would save to database
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\nawyki\page.tsx:371:55 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    369 │ 	};
    370 │ 
  > 371 │ 	const handleHabitUpdate = (habitId: string, updates: any) => {
        │ 	                                                     ^^^
    372 │ 		console.log("Updating habit:", { habitId, updates });
    373 │ 		// In real app, this would update database
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\nawyki\page.tsx:391:65 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    389 │ 	};
    390 │ 
  > 391 │ 	const handleCompletionUpdate = (completionId: string, updates: any) => {
        │ 	                                                               ^^^
    392 │ 		console.log("Updating completion:", { completionId, updates });
    393 │ 		// In real app, this would update completion details
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\ai-rekomendacje\page.tsx:33:49 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    31 │ const AIRecommendationsPage = () => {
    32 │ 	const [activeTab, setActiveTab] = useState("recommendations");
  > 33 │ 	const [userProfile, setUserProfile] = useState<any>(null);
       │ 	                                               ^^^
    34 │ 	const [recommendations, setRecommendations] = useState<any[]>([]);
    35 │ 	const [isLoading, setIsLoading] = useState(true);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\ai-rekomendacje\page.tsx:34:57 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    32 │ 	const [activeTab, setActiveTab] = useState("recommendations");
    33 │ 	const [userProfile, setUserProfile] = useState<any>(null);
  > 34 │ 	const [recommendations, setRecommendations] = useState<any[]>([]);
       │ 	                                                       ^^^
    35 │ 	const [isLoading, setIsLoading] = useState(true);
    36 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\ai-rekomendacje\page.tsx:106:46 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    104 │ 	}, []);
    105 │ 
  > 106 │ 	const handleRecommendationGenerated = (rec: any) => {
        │ 	                                            ^^^
    107 │ 		console.log("Recommendation generated:", rec);
    108 │ 		setRecommendations((prev) => [rec, ...prev]);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\ai-rekomendacje\page.tsx:129:40 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    127 │ 	};
    128 │ 
  > 129 │ 	const handleProfileUpdate = (profile: any) => {
        │ 	                                      ^^^
    130 │ 		setUserProfile(profile);
    131 │ 		console.log("Profile updated:", profile);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\interakcje-lekowe\page.tsx:299:10 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    297 │ 							<div className="space-y-3">
    298 │ 								{filteredSubstances.map((substance) => (
  > 299 │ 									<div
        │ 									^^^^
  > 300 │ 										key={substance.id}
         ...
  > 306 │ 										onClick={() => handleSubstanceToggle(substance.id)}
  > 307 │ 									>
        │ 									^
    308 │ 										<div>
    309 │ 											<h3 className="font-medium">{substance.polishName}</h3>
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\app\(public)\rekomendacje\page.tsx:15:57 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    14 │ export default function RecommendationsPage() {
  > 15 │ 	const [recommendations, setRecommendations] = useState<any>(null);
       │ 	                                                       ^^^
    16 │ 	const [showWizard, setShowWizard] = useState(true);
    17 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(public)\rekomendacje\page.tsx:18:32 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    16 │ 	const [showWizard, setShowWizard] = useState(true);
    17 │ 
  > 18 │ 	const handleComplete = (data: any) => {
       │ 	                              ^^^
    19 │ 		setRecommendations(data);
    20 │ 		setShowWizard(false);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\sledzenie-postepow\page.tsx:132:65 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    130 │ 		useGraphData({ autoFetch: true });
    131 │ 
  > 132 │ 	const handleSupplementUpdate = (supplementId: string, updates: any) => {
        │ 	                                                               ^^^
    133 │ 		console.log(`Updating supplement ${supplementId}:`, updates);
    134 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\sledzenie-postepow\page.tsx:136:44 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    134 │ 	};
    135 │ 
  > 136 │ 	const handleHabitCreate = (habit: Partial<any>) => {
        │ 	                                          ^^^
    137 │ 		console.log("Creating new habit:", habit);
    138 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\sledzenie-postepow\page.tsx:140:63 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    138 │ 	};
    139 │ 
  > 140 │ 	const handleHabitUpdate = (habitId: string, updates: Partial<any>) => {
        │ 	                                                             ^^^
    141 │ 		console.log(`Updating habit ${habitId}:`, updates);
    142 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\sledzenie-postepow\page.tsx:163:46 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    161 │ 	};
    162 │ 
  > 163 │ 	const handleRecommendationGenerated = (rec: any) => {
        │ 	                                            ^^^
    164 │ 		console.log("Recommendation generated:", rec);
    165 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\sledzenie-postepow\page.tsx:348:12 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    346 │ 									<div className="space-y-3">
    347 │ 										{mockSupplements.map((supplement) => (
  > 348 │ 											<div
        │ 											^^^^
  > 349 │ 												key={supplement.id}
         ...
  > 355 │ 												onClick={() => setSelectedSupplement(supplement.id)}
  > 356 │ 											>
        │ 											^
    357 │ 												<h3 className="font-medium">{supplement.polishName}</h3>
    358 │ 												<p className="text-gray-600 text-sm">
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\app\(protected)\sledzenie-postepow\page.tsx:463:18 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    461 │ 										{[...Array(7)].map((_, i) => (
    462 │ 											<div
  > 463 │ 												key={i}
        │ 												     ^
    464 │ 												className="flex items-center justify-between rounded-lg border p-3"
    465 │ 											>
  
  i This is the source of the key value.
  
    459 │ 								<CardContent>
    460 │ 									<div className="space-y-3">
  > 461 │ 										{[...Array(7)].map((_, i) => (
        │ 										                       ^
    462 │ 											<div
    463 │ 												key={i}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\app\(protected)\dashboard\page.tsx:52:63 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    50 │ const DashboardPage = () => {
    51 │ 	const [activeSection, setActiveSection] = useState("overview");
  > 52 │ 	const [selectedSupplement, setSelectedSupplement] = useState<any>(null);
       │ 	                                                             ^^^
    53 │ 
    54 │ 	const { nodes, relationships, supplements, isLoading, error, refetch } =
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\dashboard\page.tsx:107:25 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    105 │ 	];
    106 │ 
  > 107 │ 	const mockCompletions: any[] = [];
        │ 	                       ^^^
    108 │ 
    109 │ 	const mockTechniques = [
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\dashboard\page.tsx:197:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    195 │ 	const handleScenarioComplete = (
    196 │ 		scenarioId: string,
  > 197 │ 		responses: any[],
        │ 		           ^^^
    198 │ 		score: number,
    199 │ 	) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\dashboard\page.tsx:207:44 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    205 │ 	};
    206 │ 
  > 207 │ 	const handleHabitCreate = (habit: Partial<any>) => {
        │ 	                                          ^^^
    208 │ 		console.log("Creating new habit:", habit);
    209 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\dashboard\page.tsx:211:63 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    209 │ 	};
    210 │ 
  > 211 │ 	const handleHabitUpdate = (habitId: string, updates: Partial<any>) => {
        │ 	                                                             ^^^
    212 │ 		console.log(`Updating habit ${habitId}:`, updates);
    213 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\dashboard\page.tsx:246:46 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    244 │ 	};
    245 │ 
  > 246 │ 	const handleRecommendationGenerated = (rec: any) => {
        │ 	                                            ^^^
    247 │ 		console.log("Recommendation generated:", rec);
    248 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\_components\supplement-showcase.tsx:136:17 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    134 │ 									{supplement.benefits.map((benefit, index) => (
    135 │ 										<li
  > 136 │ 											key={index}
        │ 											     ^^^^^
    137 │ 											className="flex items-center text-gray-600 text-sm dark:text-gray-300"
    138 │ 										>
  
  i This is the source of the key value.
  
    132 │ 								<h4 className="mb-2 font-medium text-sm">Główne korzyści:</h4>
    133 │ 								<ul className="space-y-1">
  > 134 │ 									{supplement.benefits.map((benefit, index) => (
        │ 									                                   ^^^^^
    135 │ 										<li
    136 │ 											key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\app\(protected)\porownanie\page.tsx:467:10 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    465 │ 							<div className="max-h-96 space-y-3 overflow-y-auto">
    466 │ 								{filteredSupplements.map((supplement) => (
  > 467 │ 									<div
        │ 									^^^^
  > 468 │ 										key={supplement.id}
         ...
  > 474 │ 										onClick={() => handleSupplementToggle(supplement.id)}
  > 475 │ 									>
        │ 									^
    476 │ 										<div>
    477 │ 											<h3 className="font-medium">{supplement.polishName}</h3>
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\app\(protected)\psychologia\page.tsx:295:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    293 │ ];
    294 │ 
  > 295 │ const mockCompletions: any[] = [];
        │                        ^^^
    296 │ 
    297 │ const mockTechniques = [
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\page.tsx:481:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    479 │ 	const handleScenarioComplete = (
    480 │ 		scenarioId: string,
  > 481 │ 		responses: any[],
        │ 		           ^^^
    482 │ 		score: number,
    483 │ 	) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\page.tsx:491:44 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    489 │ 	};
    490 │ 
  > 491 │ 	const handleHabitCreate = (habit: Partial<any>) => {
        │ 	                                          ^^^
    492 │ 		console.log("Creating new habit:", habit);
    493 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\psychologia\page.tsx:495:63 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    493 │ 	};
    494 │ 
  > 495 │ 	const handleHabitUpdate = (habitId: string, updates: Partial<any>) => {
        │ 	                                                             ^^^
    496 │ 		console.log(`Updating habit ${habitId}:`, updates);
    497 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\supplements\[id]\route.ts:61:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    60 │ 		// Build query
  > 61 │ 		const query: any = { id: params.id };
       │ 		             ^^^
    62 │ 
    63 │ 		if (!options.includeInactive) {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\supplements\[id]\route.ts:74:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    72 │ 				acc[field] = 1;
    73 │ 				return acc;
  > 74 │ 			}, {} as any);
       │ 			         ^^^
    75 │ 		}
    76 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\trpc\[trpc]\route.ts:19:17 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    18 │ const handler = (req: NextRequest) => {
  > 19 │ 	const options: any = {
       │ 	               ^^^
    20 │ 		endpoint: "/api/trpc",
    21 │ 		req,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\trpc\[trpc]\route.ts:27:39 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    26 │ 	if (env.NODE_ENV === "development") {
  > 27 │ 		options.onError = ({ path, error }: any) => {
       │ 		                                    ^^^
    28 │ 			console.error(
    29 │ 				`❌ tRPC failed on ${path ?? "<no-path>"}: ${error.message}`,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\brain-regions\route.ts:43:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    42 │ 		// Build MongoDB query
  > 43 │ 		const query: any = { isActive: true };
       │ 		             ^^^
    44 │ 
    45 │ 		// Category filter
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\supplements\route.ts:60:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    59 │ 		// Build MongoDB query
  > 60 │ 		const query: any = { isActive: true };
       │ 		             ^^^
    61 │ 
    62 │ 		// Category filter
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\intake\route.ts:160:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    159 │ 		// Build MongoDB query
  > 160 │ 		const query: any = { userId: validatedParams.userId };
        │ 		             ^^^
    161 │ 
    162 │ 		// Supplement filter
  
  i any disables many type checking rules. Its use should be avoided.
  

.\biome-report.json lint ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Size of .\biome-report.json is 23.0 MiB which exceeds configured maximum of 1.0 MiB for this project.
    The file size limit exists to prevent us inadvertently slowing down and loading large files that we shouldn't.
    Use the `files.maxSize` configuration to change the maximum size of files processed.
  

.\biome-report.json organizeImports ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Size of .\biome-report.json is 23.0 MiB which exceeds configured maximum of 1.0 MiB for this project.
    The file size limit exists to prevent us inadvertently slowing down and loading large files that we shouldn't.
    Use the `files.maxSize` configuration to change the maximum size of files processed.
  

.\biome-report.json assists ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Size of .\biome-report.json is 23.0 MiB which exceeds configured maximum of 1.0 MiB for this project.
    The file size limit exists to prevent us inadvertently slowing down and loading large files that we shouldn't.
    Use the `files.maxSize` configuration to change the maximum size of files processed.
  

.\biome-report.json format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Size of .\biome-report.json is 23.0 MiB which exceeds configured maximum of 1.0 MiB for this project.
    The file size limit exists to prevent us inadvertently slowing down and loading large files that we shouldn't.
    Use the `files.maxSize` configuration to change the maximum size of files processed.
  

.\src\app\(protected)\graf-wiedzy\page.tsx:186:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    184 │ 	const handleScenarioComplete = (
    185 │ 		scenarioId: string,
  > 186 │ 		responses: any[],
        │ 		           ^^^
    187 │ 		score: number,
    188 │ 	) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\graf-wiedzy\page.tsx:196:44 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    194 │ 	};
    195 │ 
  > 196 │ 	const handleHabitCreate = (habit: Partial<any>) => {
        │ 	                                          ^^^
    197 │ 		console.log("Creating new habit:", habit);
    198 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\graf-wiedzy\page.tsx:200:63 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    198 │ 	};
    199 │ 
  > 200 │ 	const handleHabitUpdate = (habitId: string, updates: Partial<any>) => {
        │ 	                                                             ^^^
    201 │ 		console.log(`Updating habit ${habitId}:`, updates);
    202 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\examples\comprehensive-dashboard\page.tsx:131:6 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    129 │ 		completedAt: undefined,
    130 │ 	},
  > 131 │ ] as any[];
        │      ^^^
    132 │ 
    133 │ const mockCompletions: any[] = [];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\examples\comprehensive-dashboard\page.tsx:133:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    131 │ ] as any[];
    132 │ 
  > 133 │ const mockCompletions: any[] = [];
        │                        ^^^
    134 │ 
    135 │ const mockTechniques = [
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\examples\comprehensive-dashboard\page.tsx:263:6 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    261 │ 		isActive: true,
    262 │ 	},
  > 263 │ ] as any[];
        │      ^^^
    264 │ 
    265 │ const ComprehensiveDashboard = () => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\examples\comprehensive-dashboard\page.tsx:355:7 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    353 │ 			},
    354 │ 		},
  > 355 │ 	] as any[];
        │ 	     ^^^
    356 │ 
    357 │ 	const handleScenarioComplete = (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\examples\comprehensive-dashboard\page.tsx:359:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    357 │ 	const handleScenarioComplete = (
    358 │ 		scenarioId: string,
  > 359 │ 		responses: any[],
        │ 		           ^^^
    360 │ 		score: number,
    361 │ 	) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\examples\comprehensive-dashboard\page.tsx:369:44 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    367 │ 	};
    368 │ 
  > 369 │ 	const handleHabitCreate = (habit: Partial<any>) => {
        │ 	                                          ^^^
    370 │ 		console.log("Creating new habit:", habit);
    371 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\examples\comprehensive-dashboard\page.tsx:373:63 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    371 │ 	};
    372 │ 
  > 373 │ 	const handleHabitUpdate = (habitId: string, updates: Partial<any>) => {
        │ 	                                                             ^^^
    374 │ 		console.log(`Updating habit ${habitId}:`, updates);
    375 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\examples\graph-dashboard-example\page.tsx:114:26 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    112 │ 	// Handle layout change
    113 │ 	const handleLayoutChange = (newLayout: string) => {
  > 114 │ 		setLayout(newLayout as any);
        │ 		                       ^^^
    115 │ 	};
    116 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:48:20 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    47 │ 		// Base query for user and date range
  > 48 │ 		const baseQuery: any = {
       │ 		                 ^^^
    49 │ 			userId: validatedParams.userId,
    50 │ 			createdAt: { $gte: startDate, $lte: endDate },
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:59:20 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    58 │ 		// Initialize analytics result
  > 59 │ 		const analytics: any = {
       │ 		                 ^^^
    60 │ 			userId: validatedParams.userId,
    61 │ 			timeframe: {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:164:26 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    163 │ 			// Process adherence data
  > 164 │ 			const bySupplementId: any = {};
        │ 			                      ^^^
    165 │ 			let totalAdherence = 0;
    166 │ 			let totalMissed = 0;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:175:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    173 │ 				// Determine best time of day
    174 │ 				const bestTime = data.timeOfDayStats.reduce(
  > 175 │ 					(best: any, current: any) =>
        │ 					       ^^^
    176 │ 						current.adherenceRate > (best?.adherenceRate || 0) ? current : best,
    177 │ 					null,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:175:27 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    173 │ 				// Determine best time of day
    174 │ 				const bestTime = data.timeOfDayStats.reduce(
  > 175 │ 					(best: any, current: any) =>
        │ 					                     ^^^
    176 │ 						current.adherenceRate > (best?.adherenceRate || 0) ? current : best,
    177 │ 					null,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:210:30 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    208 │ 		// Effectiveness Analysis
    209 │ 		if (validatedParams.includeEffectiveness) {
  > 210 │ 			const effectivenessQuery: any = {
        │ 			                          ^^^
    211 │ 				userId: validatedParams.userId,
    212 │ 				"measurement.timestamp": { $gte: startDate, $lte: endDate },
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:267:26 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    265 │ 			]);
    266 │ 
  > 267 │ 			const bySupplementId: any = {};
        │ 			                      ^^^
    268 │ 			for (const data of effectivenessData) {
    269 │ 				const targetEffects: any = {};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:269:26 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    267 │ 			const bySupplementId: any = {};
    268 │ 			for (const data of effectivenessData) {
  > 269 │ 				const targetEffects: any = {};
        │ 				                     ^^^
    270 │ 				for (const effect of data.targetEffects) {
    271 │ 					targetEffects[effect.effect] = {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:411:42 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    409 │ }
    410 │ 
  > 411 │ function calculateTimeOfDayFactors(data: any[]): Record<string, number> {
        │                                          ^^^
    412 │ 	const factors: Record<string, number> = {};
    413 │ 	// Implementation would aggregate time of day statistics
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:417:42 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    415 │ }
    416 │ 
  > 417 │ function calculateDayOfWeekFactors(data: any[]): Record<string, number> {
        │                                          ^^^
    418 │ 	const factors: Record<string, number> = {};
    419 │ 	// Implementation would aggregate day of week statistics
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:423:41 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    421 │ }
    422 │ 
  > 423 │ function calculateWithFoodFactors(data: any[]): {
        │                                         ^^^
    424 │ 	with: number;
    425 │ 	without: number;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:431:44 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    429 │ }
    430 │ 
  > 431 │ function processSeverityData(severityData: any[]): Record<string, number> {
        │                                            ^^^
    432 │ 	const result: Record<string, number> = { mild: 0, moderate: 0, severe: 0 };
    433 │ 	for (const item of severityData) {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\api\tracking\analytics\route.ts:442:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    441 │ function processSeverityDataPolish(
  > 442 │ 	severityData: any[],
        │ 	              ^^^
    443 │ ): Record<string, number> {
    444 │ 	const result: Record<string, number> = {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\brain\page.tsx:265:13 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    263 │ 										<div className="space-y-3">
    264 │ 											{mockBrainRegions.map((region) => (
  > 265 │ 												<div
        │ 												^^^^
  > 266 │ 													key={region.id}
         ...
  > 272 │ 													onClick={() => handleRegionSelect(region.id)}
  > 273 │ 												>
        │ 												^
    274 │ 													<h3 className="font-medium">{region.polishName}</h3>
    275 │ 													<p className="truncate text-gray-600 text-sm">
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\app\brain\page.tsx:294:13 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    292 │ 										<div className="space-y-3">
    293 │ 											{mockNeurotransmitters.map((nt) => (
  > 294 │ 												<div
        │ 												^^^^
  > 295 │ 													key={nt.id}
         ...
  > 301 │ 													onClick={() => handleNeurotransmitterSelect(nt.id)}
  > 302 │ 												>
        │ 												^
    303 │ 													<h3 className="font-medium">{nt.polishName}</h3>
    304 │ 													<p className="truncate text-gray-600 text-sm">
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\app\brain\page.tsx:363:30 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    361 │ 															?.polishRelatedNeurotransmitters.map(
    362 │ 																(nt, index) => (
  > 363 │ 																	<Badge key={index} variant="secondary">
        │ 																	            ^^^^^
    364 │ 																		{nt}
    365 │ 																	</Badge>
  
  i This is the source of the key value.
  
    360 │ 															.find((r) => r.id === selectedRegion)
    361 │ 															?.polishRelatedNeurotransmitters.map(
  > 362 │ 																(nt, index) => (
        │ 																     ^^^^^
    363 │ 																	<Badge key={index} variant="secondary">
    364 │ 																		{nt}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\app\brain\page.tsx:377:29 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    375 │ 															.find((r) => r.id === selectedRegion)
    376 │ 															?.polishAssociatedFunctions.map((func, index) => (
  > 377 │ 																<Badge key={index} variant="outline">
        │ 																            ^^^^^
    378 │ 																	{func}
    379 │ 																</Badge>
  
  i This is the source of the key value.
  
    374 │ 														{mockBrainRegions
    375 │ 															.find((r) => r.id === selectedRegion)
  > 376 │ 															?.polishAssociatedFunctions.map((func, index) => (
        │ 															                                       ^^^^^
    377 │ 																<Badge key={index} variant="outline">
    378 │ 																	{func}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\app\brain\page.tsx:498:29 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    496 │ 															.find((nt) => nt.id === selectedNeurotransmitter)
    497 │ 															?.polishPathways.map((path, index) => (
  > 498 │ 																<Badge key={index} variant="secondary">
        │ 																            ^^^^^
    499 │ 																	{path}
    500 │ 																</Badge>
  
  i This is the source of the key value.
  
    495 │ 														{mockNeurotransmitters
    496 │ 															.find((nt) => nt.id === selectedNeurotransmitter)
  > 497 │ 															?.polishPathways.map((path, index) => (
        │ 															                            ^^^^^
    498 │ 																<Badge key={index} variant="secondary">
    499 │ 																	{path}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\app\brain\page.tsx:513:29 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    511 │ 															.find((nt) => nt.id === selectedNeurotransmitter)
    512 │ 															?.relatedSupplements.map((supp, index) => (
  > 513 │ 																<Badge key={index} variant="outline">
        │ 																            ^^^^^
    514 │ 																	{supp}
    515 │ 																</Badge>
  
  i This is the source of the key value.
  
    510 │ 														{mockNeurotransmitters
    511 │ 															.find((nt) => nt.id === selectedNeurotransmitter)
  > 512 │ 															?.relatedSupplements.map((supp, index) => (
        │ 															                                ^^^^^
    513 │ 																<Badge key={index} variant="outline">
    514 │ 																	{supp}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\app\(protected)\suplementy\[id]\page.tsx:181:42 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    179 │ 	}
    180 │ 
  > 181 │ 	const handleDosageCalculated = (dosage: any) => {
        │ 	                                        ^^^
    182 │ 		console.log("Calculated dosage:", dosage);
    183 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\suplementy\[id]\page.tsx:185:47 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    183 │ 	};
    184 │ 
  > 185 │ 	const handleInteractionFound = (interaction: any) => {
        │ 	                                             ^^^
    186 │ 		console.log("Interaction found:", interaction);
    187 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\suplementy\[id]\page.tsx:189:42 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    187 │ 	};
    188 │ 
  > 189 │ 	const handleSynergyAnalyzed = (synergy: any) => {
        │ 	                                        ^^^
    190 │ 		console.log("Synergy analyzed:", synergy);
    191 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\suplementy\[id]\page.tsx:193:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    191 │ 	};
    192 │ 
  > 193 │ 	const handleStudySelect = (study: any) => {
        │ 	                                  ^^^
    194 │ 		console.log("Selected study:", study);
    195 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\(protected)\suplementy\[id]\page.tsx:232:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    230 │ 						<div className="mb-6 flex flex-wrap gap-2">
    231 │ 							{supplement.polishPrimaryBenefits.map((benefit, index) => (
  > 232 │ 								<Badge key={index} variant="outline" className="text-sm">
        │ 								            ^^^^^
    233 │ 									{benefit}
    234 │ 								</Badge>
  
  i This is the source of the key value.
  
    230 │ 						<div className="mb-6 flex flex-wrap gap-2">
  > 231 │ 							{supplement.polishPrimaryBenefits.map((benefit, index) => (
        │ 							                                                ^^^^^
    232 │ 								<Badge key={index} variant="outline" className="text-sm">
    233 │ 									{benefit}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\app\(protected)\suplementy\[id]\page.tsx:506:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    504 │ 												{supplement.polishSideEffects.map((effect, index) => (
    505 │ 													<li
  > 506 │ 														key={index}
        │ 														     ^^^^^
    507 │ 														className="flex items-center gap-2 text-sm"
    508 │ 													>
  
  i This is the source of the key value.
  
    502 │ 										<CardContent>
    503 │ 											<ul className="space-y-2">
  > 504 │ 												{supplement.polishSideEffects.map((effect, index) => (
        │ 												                                           ^^^^^
    505 │ 													<li
    506 │ 														key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\app\(protected)\suplementy\[id]\page.tsx:526:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    524 │ 													(contraindication, index) => (
    525 │ 														<li
  > 526 │ 															key={index}
        │ 															     ^^^^^
    527 │ 															className="flex items-center gap-2 text-sm"
    528 │ 														>
  
  i This is the source of the key value.
  
    522 │ 											<ul className="space-y-2">
    523 │ 												{supplement.polishContraindications.map(
  > 524 │ 													(contraindication, index) => (
        │ 													                   ^^^^^
    525 │ 														<li
    526 │ 															key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\animations\AnimatedPage.tsx:39:45 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    37 │ 	if (shouldReduceMotion) {
    38 │ 		return (
  > 39 │ 			<div className={className} {...(props as any)}>
       │ 			                                         ^^^
    40 │ 				{children}
    41 │ 			</div>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\animations\ScaleIn.tsx:78:32 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    76 │ 	return (
    77 │ 		<motion.div
  > 78 │ 			variants={customVariants as any}
       │ 			                            ^^^
    79 │ 			initial={animateOnMount ? "hidden" : false}
    80 │ 			animate={isReady ? "visible" : "hidden"}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\graf-wiedzy\page.tsx:110:34 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    109 │ 	// Mock updateOptions function
  > 110 │ 	const updateOptions = (options: any) => {
        │ 	                                ^^^
    111 │ 		console.log("Update options called with:", options);
    112 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\graf-wiedzy\page.tsx:378:55 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    376 │ 					<Tabs
    377 │ 						value={activeTab}
  > 378 │ 						onValueChange={(value) => setActiveTab(value as any)}
        │ 						                                                ^^^
    379 │ 						className="space-y-4"
    380 │ 					>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\graf-wiedzy\page.tsx:141:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━━━━

  × This hook specifies more dependencies than necessary: setLayout, setViewMode, resetFilters
  
    140 │ 	// Initialize educational experience
  > 141 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    142 │ 		const hasVisited = localStorage.getItem("graph-education-visited");
    143 │ 		if (!hasVisited) {
  
  i This dependency can be removed from the list.
  
    153 │ 		setViewMode("overview");
    154 │ 		resetFilters();
  > 155 │ 	}, [setLayout, setViewMode, resetFilters]);
        │ 	    ^^^^^^^^^
    156 │ 
    157 │ 	// Simulate loading progress
  
  i This dependency can be removed from the list.
  
    153 │ 		setViewMode("overview");
    154 │ 		resetFilters();
  > 155 │ 	}, [setLayout, setViewMode, resetFilters]);
        │ 	               ^^^^^^^^^^^
    156 │ 
    157 │ 	// Simulate loading progress
  
  i This dependency can be removed from the list.
  
    153 │ 		setViewMode("overview");
    154 │ 		resetFilters();
  > 155 │ 	}, [setLayout, setViewMode, resetFilters]);
        │ 	                            ^^^^^^^^^^^^
    156 │ 
    157 │ 	// Simulate loading progress
  

.\src\app\wiedza\graf-wiedzy\page.tsx:525:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    523 │ 														{path.topics.slice(0, 3).map((topic, index) => (
    524 │ 															<Badge
  > 525 │ 																key={index}
        │ 																     ^^^^^
    526 │ 																variant="outline"
    527 │ 																className="text-xs"
  
  i This is the source of the key value.
  
    521 │ 													<h4 className="font-medium text-sm">Tematy:</h4>
    522 │ 													<div className="flex flex-wrap gap-1">
  > 523 │ 														{path.topics.slice(0, 3).map((topic, index) => (
        │ 														                                     ^^^^^
    524 │ 															<Badge
    525 │ 																key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\app\wiedza\page.tsx:117:6 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    115 │ 		],
    116 │ 	},
  > 117 │ ] as any[];
        │      ^^^
    118 │ 
    119 │ const mockHabits = [
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\page.tsx:140:6 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    138 │ 		},
    139 │ 	},
  > 140 │ ] as any[];
        │      ^^^
    141 │ 
    142 │ const mockCompletions: any[] = [];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\page.tsx:142:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    140 │ ] as any[];
    141 │ 
  > 142 │ const mockCompletions: any[] = [];
        │                        ^^^
    143 │ 
    144 │ const KnowledgeGraphPage = () => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\page.tsx:229:7 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    227 │ 			},
    228 │ 		},
  > 229 │ 	] as any[];
        │ 	     ^^^
    230 │ 
    231 │ 	const handleScenarioComplete = (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\page.tsx:233:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    231 │ 	const handleScenarioComplete = (
    232 │ 		scenarioId: string,
  > 233 │ 		responses: any[],
        │ 		           ^^^
    234 │ 		score: number,
    235 │ 	) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\page.tsx:243:44 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    241 │ 	};
    242 │ 
  > 243 │ 	const handleHabitCreate = (habit: Partial<any>) => {
        │ 	                                          ^^^
    244 │ 		console.log("Creating new habit:", habit);
    245 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\page.tsx:247:63 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    245 │ 	};
    246 │ 
  > 247 │ 	const handleHabitUpdate = (habitId: string, updates: Partial<any>) => {
        │ 	                                                             ^^^
    248 │ 		console.log(`Updating habit ${habitId}:`, updates);
    249 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\integracja-grafu\page.tsx:166:11 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    164 │ 										className="flex items-center justify-center"
    165 │ 									>
  > 166 │ 										<label className="flex cursor-pointer items-center">
        │ 										^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 167 │ 											<Upload className="mr-1 h-4 w-4" />
         ...
  > 174 │ 											/>
  > 175 │ 										</label>
        │ 										^^^^^^^^
    176 │ 									</Button>
    177 │ 								</div>
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\app\wiedza\integracja-grafu\page.tsx:193:49 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    191 │ 												key={type}
    192 │ 												variant={
  > 193 │ 													filters.nodeTypes.includes(type as any)
        │ 													                                   ^^^
    194 │ 														? "default"
    195 │ 														: "secondary"
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\integracja-grafu\page.tsx:200:23 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    198 │ 												onClick={() => {
    199 │ 													const newTypes = filters.nodeTypes.includes(
  > 200 │ 														type as any,
        │ 														        ^^^
    201 │ 													)
    202 │ 														? filters.nodeTypes.filter((t) => t !== type)
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\integracja-grafu\page.tsx:203:48 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    201 │ 													)
    202 │ 														? filters.nodeTypes.filter((t) => t !== type)
  > 203 │ 														: [...filters.nodeTypes, type as any];
        │ 														                                 ^^^
    204 │ 													setFilters({ ...filters, nodeTypes: newTypes });
    205 │ 												}}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\integracja-grafu\page.tsx:220:55 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    218 │ 												key={level}
    219 │ 												variant={
  > 220 │ 													filters.evidenceLevels.includes(level as any)
        │ 													                                         ^^^
    221 │ 														? "default"
    222 │ 														: "outline"
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\integracja-grafu\page.tsx:227:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    225 │ 												onClick={() => {
    226 │ 													const newLevels = filters.evidenceLevels.includes(
  > 227 │ 														level as any,
        │ 														         ^^^
    228 │ 													)
    229 │ 														? filters.evidenceLevels.filter((l) => l !== level)
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\wiedza\integracja-grafu\page.tsx:230:54 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    228 │ 													)
    229 │ 														? filters.evidenceLevels.filter((l) => l !== level)
  > 230 │ 														: [...filters.evidenceLevels, level as any];
        │ 														                                       ^^^
    231 │ 													setFilters({ ...filters, evidenceLevels: newLevels });
    232 │ 												}}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\ai\AIRecommendationViewer.tsx:281:6 lint/a11y/useButtonType ━━━━━━━━━━━━━━━━━━━━━━━

  × Provide an explicit type prop for the button element.
  
    279 │ 			<div className="flex items-center gap-1">
    280 │ 				{[1, 2, 3, 4, 5].map((star) => (
  > 281 │ 					<button
        │ 					^^^^^^^
  > 282 │ 						key={star}
         ...
  > 289 │ 						disabled={!onRatingChange}
  > 290 │ 					>
        │ 					^
    291 │ 						<Star className="h-4 w-4 fill-current" />
    292 │ 					</button>
  
  i The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.
  
  i Allowed button types are: submit, button or reset
  

.\src\components\ai\AIRecommendationViewer.tsx:465:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    463 │ 																(reason, index) => (
    464 │ 																	<li
  > 465 │ 																		key={index}
        │ 																		     ^^^^^
    466 │ 																		className="flex items-start gap-2 text-sm"
    467 │ 																	>
  
  i This is the source of the key value.
  
    461 │ 														<ul className="space-y-2">
    462 │ 															{rec.reasoning.polishPrimaryReasons.map(
  > 463 │ 																(reason, index) => (
        │ 																         ^^^^^
    464 │ 																	<li
    465 │ 																		key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\ai\AIRecommendationViewer.tsx:512:25 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    510 │ 																	(time, index) => (
    511 │ 																		<Badge
  > 512 │ 																			key={index}
        │ 																			     ^^^^^
    513 │ 																			variant="secondary"
    514 │ 																			className="text-xs"
  
  i This is the source of the key value.
  
    508 │ 															<div className="flex flex-wrap gap-1">
    509 │ 																{rec.dosageRecommendation.polishTiming.map(
  > 510 │ 																	(time, index) => (
        │ 																	       ^^^^^
    511 │ 																		<Badge
    512 │ 																			key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\ai\AIRecommendationViewer.tsx:551:25 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    549 │ 																	(benefit, index) => (
    550 │ 																		<div
  > 551 │ 																			key={index}
        │ 																			     ^^^^^
    552 │ 																			className="flex items-center justify-between rounded bg-green-50 p-2"
    553 │ 																		>
  
  i This is the source of the key value.
  
    547 │ 															<div className="space-y-2">
    548 │ 																{rec.expectedOutcomes.expectedBenefits.map(
  > 549 │ 																	(benefit, index) => (
        │ 																	          ^^^^^
    550 │ 																		<div
    551 │ 																			key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\ai\AIRecommendationViewer.tsx:586:26 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    584 │ 																		(sideEffect, index) => (
    585 │ 																			<div
  > 586 │ 																				key={index}
        │ 																				     ^^^^^
    587 │ 																				className="flex items-center justify-between rounded bg-orange-50 p-2"
    588 │ 																			>
  
  i This is the source of the key value.
  
    582 │ 																<div className="space-y-2">
    583 │ 																	{rec.expectedOutcomes.potentialSideEffects.map(
  > 584 │ 																		(sideEffect, index) => (
        │ 																		             ^^^^^
    585 │ 																			<div
    586 │ 																				key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\ai\AIRecommendationViewer.tsx:656:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    654 │ 																(goal, index) => (
    655 │ 																	<div
  > 656 │ 																		key={index}
        │ 																		     ^^^^^
    657 │ 																		className="rounded-lg border p-3"
    658 │ 																	>
  
  i This is the source of the key value.
  
    652 │ 														<div className="space-y-3">
    653 │ 															{rec.reasoning.goalAlignment.map(
  > 654 │ 																(goal, index) => (
        │ 																       ^^^^^
    655 │ 																	<div
    656 │ 																		key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\BrainSupplementCard\BrainSupplementCard.tsx:525:11 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    523 │ 								<div className="grid gap-3">
    524 │ 									{supplement.primaryBrainRegions.map((region) => (
  > 525 │ 										<div
        │ 										^^^^
  > 526 │ 											key={region.id}
         ...
  > 532 │ 											onClick={() => handleRegionClick(region)}
  > 533 │ 										>
        │ 										^
    534 │ 											<div className="mb-2 flex items-center justify-between">
    535 │ 												<h4 className="font-medium">
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\components\BrainSupplementCard\BrainSupplementCard.tsx:553:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    551 │ 												{region.supplementEffects.map((effect, index) => (
    552 │ 													<Badge
  > 553 │ 														key={index}
        │ 														     ^^^^^
    554 │ 														variant="outline"
    555 │ 														className="text-xs"
  
  i This is the source of the key value.
  
    550 │ 											<div className="flex flex-wrap gap-1">
  > 551 │ 												{region.supplementEffects.map((effect, index) => (
        │ 												                                       ^^^^^
    552 │ 													<Badge
    553 │ 														key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\BrainSupplementCard\BrainSupplementCard.tsx:679:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    677 │ 											: supplement.contraindications
    678 │ 										).map((item, index) => (
  > 679 │ 											<li key={index} className="flex items-center gap-2">
        │ 											         ^^^^^
    680 │ 												<span className="h-1.5 w-1.5 rounded-full bg-red-500" />
    681 │ 												{item}
  
  i This is the source of the key value.
  
    676 │ 											? supplement.polishContraindications
    677 │ 											: supplement.contraindications
  > 678 │ 										).map((item, index) => (
        │ 										             ^^^^^
    679 │ 											<li key={index} className="flex items-center gap-2">
    680 │ 												<span className="h-1.5 w-1.5 rounded-full bg-red-500" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\BrainSupplementCard\BrainSupplementCard.tsx:760:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    758 │ 											: state.selectedRegion.functions
    759 │ 										).map((func, index) => (
  > 760 │ 											<li key={index} className="flex items-center gap-2">
        │ 											         ^^^^^
    761 │ 												<Zap className="h-3 w-3 text-blue-500" />
    762 │ 												{func}
  
  i This is the source of the key value.
  
    757 │ 											? state.selectedRegion.polishFunctions
    758 │ 											: state.selectedRegion.functions
  > 759 │ 										).map((func, index) => (
        │ 										             ^^^^^
    760 │ 											<li key={index} className="flex items-center gap-2">
    761 │ 												<Zap className="h-3 w-3 text-blue-500" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\BrainSupplementCard\BrainSupplementCard.tsx:776:19 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    774 │ 											(effect, index) => (
    775 │ 												<div
  > 776 │ 													key={index}
        │ 													     ^^^^^
    777 │ 													className="rounded border bg-white p-2 dark:bg-gray-800"
    778 │ 												>
  
  i This is the source of the key value.
  
    772 │ 									<div className="space-y-2">
    773 │ 										{state.selectedRegion.supplementEffects.map(
  > 774 │ 											(effect, index) => (
        │ 											         ^^^^^
    775 │ 												<div
    776 │ 													key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\error\ErrorBoundary.tsx:84:27 lint/suspicious/noAssignInExpressions ━━━━━━━━━━━━━━━

  × The assignment should not be in an expression.
  
    82 │ 									<Button
    83 │ 										variant="outline"
  > 84 │ 										onClick={() => (window.location.href = "/")}
       │ 										                ^^^^^^^^^^^^^^^^^^^^^^^^^^
    85 │ 										className="flex-1 gap-2"
    86 │ 									>
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  

.\src\components\discovery\SupplementCard.tsx:275:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    273 │ 							<div className="flex flex-wrap gap-1">
    274 │ 								{supplement.polishTags.slice(0, 6).map((tag, index) => (
  > 275 │ 									<Badge key={index} variant="secondary" className="text-xs">
        │ 									            ^^^^^
    276 │ 										{tag}
    277 │ 									</Badge>
  
  i This is the source of the key value.
  
    272 │ 							<h4 className="mb-2 font-medium text-sm">Kluczowe właściwości</h4>
    273 │ 							<div className="flex flex-wrap gap-1">
  > 274 │ 								{supplement.polishTags.slice(0, 6).map((tag, index) => (
        │ 								                                             ^^^^^
    275 │ 									<Badge key={index} variant="secondary" className="text-xs">
    276 │ 										{tag}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\discovery\SupplementCard.tsx:320:19 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    318 │ 							.slice(0, 3)
    319 │ 							.map((application, index) => (
  > 320 │ 								<div key={index} className="rounded-lg border p-3">
        │ 								          ^^^^^
    321 │ 									<div className="mb-2 flex items-center justify-between">
    322 │ 										<h4 className="font-medium text-sm">
  
  i This is the source of the key value.
  
    317 │ 						{supplement.clinicalApplications
    318 │ 							.slice(0, 3)
  > 319 │ 							.map((application, index) => (
        │ 							                   ^^^^^
    320 │ 								<div key={index} className="rounded-lg border p-3">
    321 │ 									<div className="mb-2 flex items-center justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\discovery\SupplementCard.tsx:421:18 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    419 │ 										.map((effect, index) => (
    420 │ 											<div
  > 421 │ 												key={index}
        │ 												     ^^^^^
    422 │ 												className="flex items-center gap-2 text-gray-600 text-xs"
    423 │ 											>
  
  i This is the source of the key value.
  
    417 │ 									{supplement.safetyProfile.polishCommonSideEffects
    418 │ 										.slice(0, 3)
  > 419 │ 										.map((effect, index) => (
        │ 										              ^^^^^
    420 │ 											<div
    421 │ 												key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\ProgressTracker.tsx:21:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    19 │ interface ProgressTrackerProps {
    20 │ 	userProgress?: UserProgress;
  > 21 │ 	progress?: any;
       │ 	           ^^^
    22 │ 	onContinueLearning?: (pathId: string) => void;
    23 │ 	onProgressUpdate?: () => void;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\ProgressTracker.tsx:156:45 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    154 │ 							</div>
    155 │ 							<Button
  > 156 │ 								onClick={() => onContinueLearning?.(userProgress?.currentPath!)}
        │ 								                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    157 │ 							>
    158 │ 								Kontynuuj
  

.\src\components\education\ProgressTracker.tsx:175:15 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    173 │ 							{userProgress?.achievements?.map((achievement, index) => (
    174 │ 								<div
  > 175 │ 									key={index}
        │ 									     ^^^^^
    176 │ 									className="flex items-center gap-3 rounded-lg border p-3"
    177 │ 								>
  
  i This is the source of the key value.
  
    171 │ 					<CardContent>
    172 │ 						<div className="grid grid-cols-1 gap-4 md:grid-cols-2">
  > 173 │ 							{userProgress?.achievements?.map((achievement, index) => (
        │ 							                                               ^^^^^
    174 │ 								<div
    175 │ 									key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\brain\Interactive3DBrainModel.tsx:409:18 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    407 │ 		<group ref={groupRef}>
    408 │ 			{pathway.pathPoints.map((point, index) => (
  > 409 │ 				<Sphere key={index} args={[pathway.thickness, 16, 16]} position={point}>
        │ 				             ^^^^^
    410 │ 					<meshStandardMaterial
    411 │ 						color={pathway.color}
  
  i This is the source of the key value.
  
    406 │ 	return (
    407 │ 		<group ref={groupRef}>
  > 408 │ 			{pathway.pathPoints.map((point, index) => (
        │ 			                                ^^^^^
    409 │ 				<Sphere key={index} args={[pathway.thickness, 16, 16]} position={point}>
    410 │ 					<meshStandardMaterial
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\brain\Interactive3DBrainModel.tsx:611:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    609 │ 								<div className="flex flex-wrap gap-1">
    610 │ 									{selectedRegionData.polishFunctions.map((func, index) => (
  > 611 │ 										<Badge key={index} variant="outline" className="text-xs">
        │ 										            ^^^^^
    612 │ 											{func}
    613 │ 										</Badge>
  
  i This is the source of the key value.
  
    608 │ 								<h4 className="mb-1 font-medium text-xs">Funkcje:</h4>
    609 │ 								<div className="flex flex-wrap gap-1">
  > 610 │ 									{selectedRegionData.polishFunctions.map((func, index) => (
        │ 									                                               ^^^^^
    611 │ 										<Badge key={index} variant="outline" className="text-xs">
    612 │ 											{func}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\brain\Interactive3DBrainModel.tsx:622:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    620 │ 								<div className="flex flex-wrap gap-1">
    621 │ 									{selectedRegionData.neurotransmitters.map((nt, index) => (
  > 622 │ 										<Badge key={index} variant="secondary" className="text-xs">
        │ 										            ^^^^^
    623 │ 											{nt}
    624 │ 										</Badge>
  
  i This is the source of the key value.
  
    619 │ 								<h4 className="mb-1 font-medium text-xs">Neuroprzekaźniki:</h4>
    620 │ 								<div className="flex flex-wrap gap-1">
  > 621 │ 									{selectedRegionData.neurotransmitters.map((nt, index) => (
        │ 									                                               ^^^^^
    622 │ 										<Badge key={index} variant="secondary" className="text-xs">
    623 │ 											{nt}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\brain\Interactive3DBrainModel.tsx:640:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    638 │ 											)
    639 │ 											.map((effect, index) => (
  > 640 │ 												<div key={index} className="rounded border p-2">
        │ 												          ^^^^^
    641 │ 													<div className="font-medium text-xs">
    642 │ 														{effect.polishSupplementName}
  
  i This is the source of the key value.
  
    637 │ 												selectedSupplements.includes(effect.supplementId),
    638 │ 											)
  > 639 │ 											.map((effect, index) => (
        │ 											              ^^^^^
    640 │ 												<div key={index} className="rounded border p-2">
    641 │ 													<div className="font-medium text-xs">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\discovery\AdvancedSupplementSearch.tsx:160:69 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    159 │ 	// Handle filter changes
  > 160 │ 	const updateFilter = useCallback((key: keyof SearchFilters, value: any) => {
        │ 	                                                                   ^^^
    161 │ 		setFilters((prev) => ({ ...prev, [key]: value }));
    162 │ 	}, []);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\discovery\SupplementComparison.tsx:361:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    360 │ 									return (
  > 361 │ 										<div key={appIndex} className="rounded-lg border p-4">
        │ 										          ^^^^^^^^
    362 │ 											<h4 className="mb-3 font-medium">
    363 │ 												{
  
  i This is the source of the key value.
  
    352 │ 						<div className="space-y-6">
    353 │ 							{supplements.length > 0 &&
  > 354 │ 								supplements[0]?.clinicalApplications.map((_, appIndex) => {
        │ 								                                             ^^^^^^^^
    355 │ 									const allHaveThisApplication = supplements.every(
    356 │ 										(s) => s.clinicalApplications[appIndex],
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\discovery\SupplementComparison.tsx:503:26 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    501 │ 														.slice(0, 2)
    502 │ 														.map((effect, index) => (
  > 503 │ 															<div key={index}>{effect}</div>
        │ 															          ^^^^^
    504 │ 														))}
    505 │ 													{supplement.safetyProfile.polishCommonSideEffects
  
  i This is the source of the key value.
  
    500 │ 													{supplement.safetyProfile.polishCommonSideEffects
    501 │ 														.slice(0, 2)
  > 502 │ 														.map((effect, index) => (
        │ 														              ^^^^^
    503 │ 															<div key={index}>{effect}</div>
    504 │ 														))}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\discovery\SupplementComparison.tsx:538:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    536 │ 												.map((mechanism, index) => (
    537 │ 													<div
  > 538 │ 														key={index}
        │ 														     ^^^^^
    539 │ 														className="flex items-start gap-3 rounded border p-2"
    540 │ 													>
  
  i This is the source of the key value.
  
    534 │ 											{supplement.mechanisms
    535 │ 												.slice(0, 3)
  > 536 │ 												.map((mechanism, index) => (
        │ 												                 ^^^^^
    537 │ 													<div
    538 │ 														key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\discovery\SupplementComparison.tsx:586:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    584 │ 													.map((interaction, index) => (
    585 │ 														<div
  > 586 │ 															key={index}
        │ 															     ^^^^^
    587 │ 															className="flex items-start gap-3 rounded border p-2"
    588 │ 														>
  
  i This is the source of the key value.
  
    582 │ 												{supplement.interactions
    583 │ 													.slice(0, 3)
  > 584 │ 													.map((interaction, index) => (
        │ 													                   ^^^^^
    585 │ 														<div
    586 │ 															key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\ai\HealthProfileSetup.tsx:388:30 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    386 │ 					<Select
    387 │ 						value={profile.demographics.gender}
  > 388 │ 						onValueChange={(value: any) =>
        │ 						                       ^^^
    389 │ 							updateProfile({
    390 │ 								demographics: { ...profile.demographics, gender: value },
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\ai\HealthProfileSetup.tsx:453:29 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    451 │ 				<Select
    452 │ 					value={profile.demographics.activityLevel}
  > 453 │ 					onValueChange={(value: any) =>
        │ 					                       ^^^
    454 │ 						updateProfile({
    455 │ 							demographics: { ...profile.demographics, activityLevel: value },
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\ai\HealthProfileSetup.tsx:543:32 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    541 │ 										onValueChange={(value: string) =>
    542 │ 											updateHealthGoal(goal.id, {
  > 543 │ 												category: value as any,
        │ 												                   ^^^
    544 │ 												polishCategory:
    545 │ 													(
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\ai\HealthProfileSetup.tsx:602:33 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    600 │ 											onValueChange={(value: string) =>
    601 │ 												updateHealthGoal(goal.id, {
  > 602 │ 													priority: value as any,
        │ 													                   ^^^
    603 │ 													polishPriority:
    604 │ 														(
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\ai\HealthProfileSetup.tsx:726:32 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    724 │ 							<Select
    725 │ 								value={profile.lifestyle.diet.type}
  > 726 │ 								onValueChange={(value: any) =>
        │ 								                       ^^^
    727 │ 									updateProfile({
    728 │ 										lifestyle: {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\ai\HealthProfileSetup.tsx:801:32 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    799 │ 							<Select
    800 │ 								value={profile.lifestyle.exercise.intensity}
  > 801 │ 								onValueChange={(value: any) =>
        │ 								                       ^^^
    802 │ 									updateProfile({
    803 │ 										lifestyle: {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\ai\HealthProfileSetup.tsx:933:30 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    931 │ 					<Select
    932 │ 						value={profile.cognitiveProfile.learningStyle}
  > 933 │ 						onValueChange={(value: any) =>
        │ 						                       ^^^
    934 │ 							updateProfile({
    935 │ 								cognitiveProfile: {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\ai\HealthProfileSetup.tsx:1049:25 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    1047 │ 									id={form.value}
    1048 │ 									checked={profile.preferences.supplementForms.includes(
  > 1049 │ 										form.value as any,
         │ 										              ^^^
    1050 │ 									)}
    1051 │ 									onCheckedChange={(checked) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\ai\HealthProfileSetup.tsx:1055:28 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    1053 │ 											? [
    1054 │ 													...profile.preferences.supplementForms,
  > 1055 │ 													form.value as any,
         │ 													              ^^^
    1056 │ 												]
    1057 │ 											: profile.preferences.supplementForms.filter(
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\features\recommendations\RecommendationResults.tsx:261:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    259 │ 												).map((note, idx) => (
    260 │ 													<li
  > 261 │ 														key={idx}
        │ 														     ^^^
    262 │ 														className="flex items-start gap-2 text-muted-foreground text-sm"
    263 │ 													>
  
  i This is the source of the key value.
  
    257 │ 													? rec.polishSafetyNotes
    258 │ 													: rec.safetyNotes
  > 259 │ 												).map((note, idx) => (
        │ 												             ^^^
    260 │ 													<li
    261 │ 														key={idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\evidence\EvidenceBasedInformationPanel.tsx:142:14 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    140 │ 					qualityAssessment: {
    141 │ 						evidenceLevel: evidenceBasedResearchService.assessStudyQuality(
  > 142 │ 							{} as any,
        │ 							      ^^^
    143 │ 						),
    144 │ 						riskOfBias: "low" as const,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\evidence\EvidenceBasedInformationPanel.tsx:69:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook specifies more dependencies than necessary: supplementId, condition
  
    67 │ 	);
    68 │ 
  > 69 │ 	useEffect(() => {
       │ 	^^^^^^^^^
    70 │ 		loadEvidenceData();
    71 │ 	}, [supplementId, condition]);
  
  i Outer scope values aren't valid dependencies because mutating them doesn't re-render the component.
  
    69 │ 	useEffect(() => {
    70 │ 		loadEvidenceData();
  > 71 │ 	}, [supplementId, condition]);
       │ 	    ^^^^^^^^^^^^
    72 │ 
    73 │ 	const loadEvidenceData = async () => {
  
  i Outer scope values aren't valid dependencies because mutating them doesn't re-render the component.
  
    69 │ 	useEffect(() => {
    70 │ 		loadEvidenceData();
  > 71 │ 	}, [supplementId, condition]);
       │ 	                  ^^^^^^^^^
    72 │ 
    73 │ 	const loadEvidenceData = async () => {
  

.\src\components\evidence\EvidenceBasedInformationPanel.tsx:379:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    377 │ 											{evidenceSummary.recommendations.populationSpecific.map(
    378 │ 												(rec, index) => (
  > 379 │ 													<div key={index} className="rounded-lg border p-3">
        │ 													          ^^^^^
    380 │ 														<h4 className="mb-1 font-medium text-sm">
    381 │ 															{rec.polishPopulation}
  
  i This is the source of the key value.
  
    376 │ 										<div className="space-y-3">
    377 │ 											{evidenceSummary.recommendations.populationSpecific.map(
  > 378 │ 												(rec, index) => (
        │ 												      ^^^^^
    379 │ 													<div key={index} className="rounded-lg border p-3">
    380 │ 														<h4 className="mb-1 font-medium text-sm">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\evidence\EvidenceBasedInformationPanel.tsx:422:16 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    420 │ 								{filteredStudies.map((study, index) => (
    421 │ 									<Card
  > 422 │ 										key={index}
        │ 										     ^^^^^
    423 │ 										className="cursor-pointer transition-shadow hover:shadow-md"
    424 │ 									>
  
  i This is the source of the key value.
  
    418 │ 							{/* Studies list */}
    419 │ 							<div className="space-y-3">
  > 420 │ 								{filteredStudies.map((study, index) => (
        │ 								                             ^^^^^
    421 │ 									<Card
    422 │ 										key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\evidence\EvidenceBasedInformationPanel.tsx:621:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    619 │ 												{evidenceSummary.polishHealthcareIntegration.polishGuidelineRecommendations.map(
    620 │ 													(rec, index) => (
  > 621 │ 														<li key={index} className="flex items-start gap-2">
        │ 														         ^^^^^
    622 │ 															<span className="mt-1 text-green-500">•</span>
    623 │ 															{rec}
  
  i This is the source of the key value.
  
    618 │ 											<ul className="space-y-1 text-gray-700 text-sm">
    619 │ 												{evidenceSummary.polishHealthcareIntegration.polishGuidelineRecommendations.map(
  > 620 │ 													(rec, index) => (
        │ 													      ^^^^^
    621 │ 														<li key={index} className="flex items-start gap-2">
    622 │ 															<span className="mt-1 text-green-500">•</span>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\evidence\EvidenceBasedInformationPanel.tsx:640:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    638 │ 												{evidenceSummary.polishHealthcareIntegration.polishImplementationBarriers.map(
    639 │ 													(barrier, index) => (
  > 640 │ 														<li key={index} className="flex items-start gap-2">
        │ 														         ^^^^^
    641 │ 															<span className="mt-1 text-orange-500">•</span>
    642 │ 															{barrier}
  
  i This is the source of the key value.
  
    637 │ 											<ul className="space-y-1 text-gray-700 text-sm">
    638 │ 												{evidenceSummary.polishHealthcareIntegration.polishImplementationBarriers.map(
  > 639 │ 													(barrier, index) => (
        │ 													          ^^^^^
    640 │ 														<li key={index} className="flex items-start gap-2">
    641 │ 															<span className="mt-1 text-orange-500">•</span>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\features\search\SearchResults.tsx:89:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    87 │ 	const highlightSnippet = (snippet: string, matchedTerms: string[]) => {
    88 │ 		let highlighted = snippet;
  > 89 │ 		matchedTerms.forEach((term) => {
       │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 90 │ 			const regex = new RegExp(`(${term})`, "gi");
        ...
  > 94 │ 			);
  > 95 │ 		});
       │ 		^^
    96 │ 		return highlighted;
    97 │ 	};
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\features\search\SearchResults.tsx:182:10 lint/security/noDangerouslySetInnerHtml ━━━━━━━━━━

  × Avoid passing content using the dangerouslySetInnerHTML prop.
  
    180 │ 								<p
    181 │ 									className="line-clamp-2 text-muted-foreground text-sm"
  > 182 │ 									dangerouslySetInnerHTML={{
        │ 									^^^^^^^^^^^^^^^^^^^^^^^
    183 │ 										__html: highlightSnippet(
    184 │ 											result.snippet,
  
  ! Setting content using code can expose users to cross-site scripting (XSS) attacks
  

.\src\components\features\search\SearchResults.tsx:194:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    192 │ 									<div className="flex flex-wrap gap-1">
    193 │ 										{result.matchedTerms.slice(0, 5).map((term, idx) => (
  > 194 │ 											<Badge key={idx} variant="outline" className="text-xs">
        │ 											            ^^^
    195 │ 												{term}
    196 │ 											</Badge>
  
  i This is the source of the key value.
  
    191 │ 								{result.matchedTerms.length > 0 && (
    192 │ 									<div className="flex flex-wrap gap-1">
  > 193 │ 										{result.matchedTerms.slice(0, 5).map((term, idx) => (
        │ 										                                            ^^^
    194 │ 											<Badge key={idx} variant="outline" className="text-xs">
    195 │ 												{term}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\features\search\SearchResults.tsx:210:19 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    208 │ 											{[...Array(5)].map((_, i) => (
    209 │ 												<Star
  > 210 │ 													key={i}
        │ 													     ^
    211 │ 													className={`h-3 w-3 ${
    212 │ 														i < Math.ceil((result.relevanceScore / 100) * 5)
  
  i This is the source of the key value.
  
    206 │ 										</span>
    207 │ 										<div className="flex gap-0.5">
  > 208 │ 											{[...Array(5)].map((_, i) => (
        │ 											                       ^
    209 │ 												<Star
    210 │ 													key={i}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:37:21 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    35 │ interface NeurotransmitterEducationModuleProps {
    36 │ 	selectedNeurotransmitter?: string;
  > 37 │ 	neurotransmitter?: any;
       │ 	                   ^^^
    38 │ 	difficultyLevel?: "beginner" | "intermediate" | "expert";
    39 │ 	showSupplementInteractions?: boolean;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:82:40 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    81 │ 	const getEducationalContent = (nt: NeurotransmitterSystem) => {
  > 82 │ 		const { educationalContent } = nt as any;
       │ 		                                     ^^^
    83 │ 		if (!educationalContent) {
    84 │ 			return {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:198:38 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    196 │ 							<p className="mt-1 text-gray-600 text-sm">
    197 │ 								{currentNeurotransmitter.name} •{" "}
  > 198 │ 								{(currentNeurotransmitter as any).chemistry?.formula}
        │ 								                             ^^^
    199 │ 							</p>
    200 │ 						</div>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:203:37 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    201 │ 						<Badge
    202 │ 							className={getCategoryColor(
  > 203 │ 								(currentNeurotransmitter as any).category,
        │ 								                            ^^^
    204 │ 							)}
    205 │ 						>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:206:37 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    204 │ 							)}
    205 │ 						>
  > 206 │ 							{(currentNeurotransmitter as any).category}
        │ 							                             ^^^
    207 │ 						</Badge>
    208 │ 					</div>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:241:40 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    239 │ 										<ul className="space-y-2">
    240 │ 											{(
  > 241 │ 												currentNeurotransmitter as any
        │ 												                           ^^^
    242 │ 											).educationalContent.polishKeyFacts.map(
    243 │ 												(fact: any, index: number) => (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:243:20 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    241 │ 												currentNeurotransmitter as any
    242 │ 											).educationalContent.polishKeyFacts.map(
  > 243 │ 												(fact: any, index: number) => (
        │ 												       ^^^
    244 │ 													<li
    245 │ 														key={index}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:266:41 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    264 │ 									<CardContent>
    265 │ 										<div className="space-y-3">
  > 266 │ 											{(currentNeurotransmitter as any).functions.map(
        │ 											                             ^^^
    267 │ 												(func: any, index: number) => (
    268 │ 													<div key={index} className="rounded-lg border p-3">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:267:20 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    265 │ 										<div className="space-y-3">
    266 │ 											{(currentNeurotransmitter as any).functions.map(
  > 267 │ 												(func: any, index: number) => (
        │ 												       ^^^
    268 │ 													<div key={index} className="rounded-lg border p-3">
    269 │ 														<h4 className="mb-1 font-medium text-sm">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:274:26 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    272 │ 														<div className="mb-2 flex flex-wrap gap-1">
    273 │ 															{func.polishEffects.map(
  > 274 │ 																(effect: any, idx: number) => (
        │ 																         ^^^
    275 │ 																	<Badge
    276 │ 																		key={idx}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:321:40 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    319 │ 										<div className="space-y-2">
    320 │ 											{(
  > 321 │ 												currentNeurotransmitter as any
        │ 												                           ^^^
    322 │ 											).educationalContent.polishCommonMisconceptions.map(
    323 │ 												(misconception: any, index: number) => (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:323:29 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    321 │ 												currentNeurotransmitter as any
    322 │ 											).educationalContent.polishCommonMisconceptions.map(
  > 323 │ 												(misconception: any, index: number) => (
        │ 												                ^^^
    324 │ 													<Alert
    325 │ 														key={index}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:354:42 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    352 │ 											<span>Wzór:</span>
    353 │ 											<span className="font-mono">
  > 354 │ 												{(currentNeurotransmitter as any).chemistry?.formula}
        │ 												                             ^^^
    355 │ 											</span>
    356 │ 										</div>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:361:42 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    359 │ 											<span>
    360 │ 												{
  > 361 │ 													(currentNeurotransmitter as any).chemistry
        │ 													                            ^^^
    362 │ 														?.molecularWeight
    363 │ 												}{" "}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:370:42 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    368 │ 											<span>SMILES:</span>
    369 │ 											<span className="break-all font-mono text-xs">
  > 370 │ 												{(currentNeurotransmitter as any).chemistry?.structure}
        │ 												                             ^^^
    371 │ 											</span>
    372 │ 										</div>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:384:41 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    382 │ 											<strong>Prekursor:</strong>{" "}
    383 │ 											{
  > 384 │ 												(currentNeurotransmitter as any).chemistry?.synthesis
        │ 												                            ^^^
    385 │ 													?.polishPrecursor
    386 │ 											}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:392:41 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    390 │ 											<ul className="mt-1 ml-2 list-inside list-disc">
    391 │ 												{(
  > 392 │ 													currentNeurotransmitter as any
        │ 													                           ^^^
    393 │ 												).chemistry?.synthesis?.polishEnzymes?.map(
    394 │ 													(enzyme: any, index: number) => (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:394:23 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    392 │ 													currentNeurotransmitter as any
    393 │ 												).chemistry?.synthesis?.polishEnzymes?.map(
  > 394 │ 													(enzyme: any, index: number) => (
        │ 													         ^^^
    395 │ 														<li key={index}>{enzyme}</li>
    396 │ 													),
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:403:41 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    401 │ 											<strong>Szlak:</strong>{" "}
    402 │ 											{
  > 403 │ 												(currentNeurotransmitter as any).chemistry?.synthesis
        │ 												                            ^^^
    404 │ 													?.polishPathway
    405 │ 											}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:423:41 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    421 │ 											<div className="flex flex-wrap gap-1">
    422 │ 												{(
  > 423 │ 													currentNeurotransmitter as any
        │ 													                           ^^^
    424 │ 												).chemistry?.degradation?.polishEnzymes?.map(
    425 │ 													(enzyme: any, index: number) => (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:425:23 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    423 │ 													currentNeurotransmitter as any
    424 │ 												).chemistry?.degradation?.polishEnzymes?.map(
  > 425 │ 													(enzyme: any, index: number) => (
        │ 													         ^^^
    426 │ 														<Badge
    427 │ 															key={index}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:441:41 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    439 │ 											<div className="flex flex-wrap gap-1">
    440 │ 												{(
  > 441 │ 													currentNeurotransmitter as any
        │ 													                           ^^^
    442 │ 												).chemistry?.degradation?.polishMetabolites?.map(
    443 │ 													(metabolite: any, index: number) => (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:443:27 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    441 │ 													currentNeurotransmitter as any
    442 │ 												).chemistry?.degradation?.polishMetabolites?.map(
  > 443 │ 													(metabolite: any, index: number) => (
        │ 													             ^^^
    444 │ 														<Badge
    445 │ 															key={index}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:470:28 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    468 │ 												<Badge
    469 │ 													variant={
  > 470 │ 														(receptor as any).type === "IONOTROPIC"
        │ 														             ^^^
    471 │ 															? "default"
    472 │ 															: "secondary"
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:475:28 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    473 │ 													}
    474 │ 												>
  > 475 │ 													{(receptor as any).type}
        │ 													              ^^^
    476 │ 												</Badge>
    477 │ 											</CardTitle>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:485:28 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    483 │ 												</h4>
    484 │ 												<div className="flex flex-wrap gap-1">
  > 485 │ 													{(receptor as any).polishLocation?.map(
        │ 													              ^^^
    486 │ 														(location: any, idx: number) => (
    487 │ 															<Badge
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:486:26 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    484 │ 												<div className="flex flex-wrap gap-1">
    485 │ 													{(receptor as any).polishLocation?.map(
  > 486 │ 														(location: any, idx: number) => (
        │ 														           ^^^
    487 │ 															<Badge
    488 │ 																key={idx}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:502:28 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    500 │ 												<h4 className="mb-1 font-medium text-xs">Funkcja:</h4>
    501 │ 												<p className="text-gray-600 text-xs">
  > 502 │ 													{(receptor as any).polishFunction}
        │ 													              ^^^
    503 │ 												</p>
    504 │ 											</div>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:512:29 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    510 │ 													</h4>
    511 │ 													<span className="text-xs">
  > 512 │ 														{(receptor as any).affinity} nM
        │ 														              ^^^
    513 │ 													</span>
    514 │ 												</div>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:520:29 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    518 │ 													</h4>
    519 │ 													<div className="flex flex-wrap gap-1">
  > 520 │ 														{(receptor as any).polishSignaling?.map(
        │ 														              ^^^
    521 │ 															(signal: any, idx: number) => (
    522 │ 																<Badge
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:521:25 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    519 │ 													<div className="flex flex-wrap gap-1">
    520 │ 														{(receptor as any).polishSignaling?.map(
  > 521 │ 															(signal: any, idx: number) => (
        │ 															         ^^^
    522 │ 																<Badge
    523 │ 																	key={idx}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:557:28 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    555 │ 													</h4>
    556 │ 													<p className="text-gray-600 text-xs">
  > 557 │ 														{(pathway as any).polishOrigin}
        │ 														             ^^^
    558 │ 													</p>
    559 │ 												</div>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:563:28 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    561 │ 													<h4 className="mb-1 font-medium text-xs">Cele:</h4>
    562 │ 													<div className="flex flex-wrap gap-1">
  > 563 │ 														{(pathway as any).polishTargets?.map(
        │ 														             ^^^
    564 │ 															(target: any, idx: number) => (
    565 │ 																<Badge
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:564:25 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    562 │ 													<div className="flex flex-wrap gap-1">
    563 │ 														{(pathway as any).polishTargets?.map(
  > 564 │ 															(target: any, idx: number) => (
        │ 															         ^^^
    565 │ 																<Badge
    566 │ 																	key={idx}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:581:27 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    579 │ 												<h4 className="mb-1 font-medium text-xs">Funkcja:</h4>
    580 │ 												<p className="text-gray-600 text-xs">
  > 581 │ 													{(pathway as any).polishFunction}
        │ 													             ^^^
    582 │ 												</p>
    583 │ 											</div>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:589:27 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    587 │ 												<AlertDescription className="text-xs">
    588 │ 													<strong>Znaczenie kliniczne:</strong>{" "}
  > 589 │ 													{(pathway as any).polishClinicalRelevance}
        │ 													             ^^^
    590 │ 												</AlertDescription>
    591 │ 											</Alert>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:601:36 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    599 │ 						<TabsContent value="supplements" className="space-y-4">
    600 │ 							{showSupplementInteractions &&
  > 601 │ 							(currentNeurotransmitter as any).supplementInteractions?.length >
        │ 							                            ^^^
    602 │ 								0 ? (
    603 │ 								<div className="space-y-4">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:604:39 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    602 │ 								0 ? (
    603 │ 								<div className="space-y-4">
  > 604 │ 									{(currentNeurotransmitter as any).supplementInteractions?.map(
        │ 									                             ^^^
    605 │ 										(interaction: any, index: number) => (
    606 │ 											<Card
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:605:25 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    603 │ 								<div className="space-y-4">
    604 │ 									{(currentNeurotransmitter as any).supplementInteractions?.map(
  > 605 │ 										(interaction: any, index: number) => (
        │ 										              ^^^
    606 │ 											<Card
    607 │ 												key={index}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:713:40 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    711 │ 										<div className="space-y-3">
    712 │ 											{(
  > 713 │ 												currentNeurotransmitter as any
        │ 												                           ^^^
    714 │ 											).clinicalAspects?.disorders?.map(
    715 │ 												(disorder: any, index: number) => (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:715:24 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    713 │ 												currentNeurotransmitter as any
    714 │ 											).clinicalAspects?.disorders?.map(
  > 715 │ 												(disorder: any, index: number) => (
        │ 												           ^^^
    716 │ 													<div key={index} className="rounded-lg border p-3">
    717 │ 														<div className="mb-2 flex items-center justify-between">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:746:29 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    744 │ 																<div className="flex flex-wrap gap-1">
    745 │ 																	{disorder.polishSymptoms?.map(
  > 746 │ 																		(symptom: any, idx: number) => (
        │ 																		          ^^^
    747 │ 																			<Badge
    748 │ 																				key={idx}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:764:31 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    762 │ 																<div className="flex flex-wrap gap-1">
    763 │ 																	{disorder.polishTreatments?.map(
  > 764 │ 																		(treatment: any, idx: number) => (
        │ 																		            ^^^
    765 │ 																			<Badge
    766 │ 																				key={idx}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:791:40 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    789 │ 										<div className="space-y-3">
    790 │ 											{(
  > 791 │ 												currentNeurotransmitter as any
        │ 												                           ^^^
    792 │ 											).clinicalAspects?.biomarkers?.map(
    793 │ 												(biomarker: any, index: number) => (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:793:25 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    791 │ 												currentNeurotransmitter as any
    792 │ 											).clinicalAspects?.biomarkers?.map(
  > 793 │ 												(biomarker: any, index: number) => (
        │ 												            ^^^
    794 │ 													<div key={index} className="rounded-lg border p-3">
    795 │ 														<div className="mb-1 flex items-center justify-between">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\education\NeurotransmitterEducationModule.tsx:245:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    243 │ 												(fact: any, index: number) => (
    244 │ 													<li
  > 245 │ 														key={index}
        │ 														     ^^^^^
    246 │ 														className="flex items-start gap-2 text-sm"
    247 │ 													>
  
  i This is the source of the key value.
  
    241 │ 												currentNeurotransmitter as any
    242 │ 											).educationalContent.polishKeyFacts.map(
  > 243 │ 												(fact: any, index: number) => (
        │ 												            ^^^^^
    244 │ 													<li
    245 │ 														key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:268:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    266 │ 											{(currentNeurotransmitter as any).functions.map(
    267 │ 												(func: any, index: number) => (
  > 268 │ 													<div key={index} className="rounded-lg border p-3">
        │ 													          ^^^^^
    269 │ 														<h4 className="mb-1 font-medium text-sm">
    270 │ 															{func.polishCategory}
  
  i This is the source of the key value.
  
    265 │ 										<div className="space-y-3">
    266 │ 											{(currentNeurotransmitter as any).functions.map(
  > 267 │ 												(func: any, index: number) => (
        │ 												            ^^^^^
    268 │ 													<div key={index} className="rounded-lg border p-3">
    269 │ 														<h4 className="mb-1 font-medium text-sm">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:276:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    274 │ 																(effect: any, idx: number) => (
    275 │ 																	<Badge
  > 276 │ 																		key={idx}
        │ 																		     ^^^
    277 │ 																		variant="outline"
    278 │ 																		className="text-xs"
  
  i This is the source of the key value.
  
    272 │ 														<div className="mb-2 flex flex-wrap gap-1">
    273 │ 															{func.polishEffects.map(
  > 274 │ 																(effect: any, idx: number) => (
        │ 																              ^^^
    275 │ 																	<Badge
    276 │ 																		key={idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:325:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    323 │ 												(misconception: any, index: number) => (
    324 │ 													<Alert
  > 325 │ 														key={index}
        │ 														     ^^^^^
    326 │ 														className="border-orange-200 bg-orange-50"
    327 │ 													>
  
  i This is the source of the key value.
  
    321 │ 												currentNeurotransmitter as any
    322 │ 											).educationalContent.polishCommonMisconceptions.map(
  > 323 │ 												(misconception: any, index: number) => (
        │ 												                     ^^^^^
    324 │ 													<Alert
    325 │ 														key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:395:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    393 │ 												).chemistry?.synthesis?.polishEnzymes?.map(
    394 │ 													(enzyme: any, index: number) => (
  > 395 │ 														<li key={index}>{enzyme}</li>
        │ 														         ^^^^^
    396 │ 													),
    397 │ 												)}
  
  i This is the source of the key value.
  
    392 │ 													currentNeurotransmitter as any
    393 │ 												).chemistry?.synthesis?.polishEnzymes?.map(
  > 394 │ 													(enzyme: any, index: number) => (
        │ 													              ^^^^^
    395 │ 														<li key={index}>{enzyme}</li>
    396 │ 													),
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:427:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    425 │ 													(enzyme: any, index: number) => (
    426 │ 														<Badge
  > 427 │ 															key={index}
        │ 															     ^^^^^
    428 │ 															variant="outline"
    429 │ 															className="text-xs"
  
  i This is the source of the key value.
  
    423 │ 													currentNeurotransmitter as any
    424 │ 												).chemistry?.degradation?.polishEnzymes?.map(
  > 425 │ 													(enzyme: any, index: number) => (
        │ 													              ^^^^^
    426 │ 														<Badge
    427 │ 															key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:445:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    443 │ 													(metabolite: any, index: number) => (
    444 │ 														<Badge
  > 445 │ 															key={index}
        │ 															     ^^^^^
    446 │ 															variant="secondary"
    447 │ 															className="text-xs"
  
  i This is the source of the key value.
  
    441 │ 													currentNeurotransmitter as any
    442 │ 												).chemistry?.degradation?.polishMetabolites?.map(
  > 443 │ 													(metabolite: any, index: number) => (
        │ 													                  ^^^^^
    444 │ 														<Badge
    445 │ 															key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:464:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    462 │ 							<div className="space-y-4">
    463 │ 								{currentNeurotransmitter.receptors.map((receptor, index) => (
  > 464 │ 									<Card key={index}>
        │ 									           ^^^^^
    465 │ 										<CardHeader className="pb-2">
    466 │ 											<CardTitle className="flex items-center justify-between text-sm">
  
  i This is the source of the key value.
  
    461 │ 						<TabsContent value="receptors" className="space-y-4">
    462 │ 							<div className="space-y-4">
  > 463 │ 								{currentNeurotransmitter.receptors.map((receptor, index) => (
        │ 								                                                  ^^^^^
    464 │ 									<Card key={index}>
    465 │ 										<CardHeader className="pb-2">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:488:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    486 │ 														(location: any, idx: number) => (
    487 │ 															<Badge
  > 488 │ 																key={idx}
        │ 																     ^^^
    489 │ 																variant="outline"
    490 │ 																className="text-xs"
  
  i This is the source of the key value.
  
    484 │ 												<div className="flex flex-wrap gap-1">
    485 │ 													{(receptor as any).polishLocation?.map(
  > 486 │ 														(location: any, idx: number) => (
        │ 														                ^^^
    487 │ 															<Badge
    488 │ 																key={idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:523:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    521 │ 															(signal: any, idx: number) => (
    522 │ 																<Badge
  > 523 │ 																	key={idx}
        │ 																	     ^^^
    524 │ 																	variant="outline"
    525 │ 																	className="text-xs"
  
  i This is the source of the key value.
  
    519 │ 													<div className="flex flex-wrap gap-1">
    520 │ 														{(receptor as any).polishSignaling?.map(
  > 521 │ 															(signal: any, idx: number) => (
        │ 															              ^^^
    522 │ 																<Badge
    523 │ 																	key={idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:544:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    542 │ 							<div className="space-y-4">
    543 │ 								{currentNeurotransmitter.pathways.map((pathway, index) => (
  > 544 │ 									<Card key={index}>
        │ 									           ^^^^^
    545 │ 										<CardHeader className="pb-2">
    546 │ 											<CardTitle className="text-sm">
  
  i This is the source of the key value.
  
    541 │ 						<TabsContent value="pathways" className="space-y-4">
    542 │ 							<div className="space-y-4">
  > 543 │ 								{currentNeurotransmitter.pathways.map((pathway, index) => (
        │ 								                                                ^^^^^
    544 │ 									<Card key={index}>
    545 │ 										<CardHeader className="pb-2">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:566:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    564 │ 															(target: any, idx: number) => (
    565 │ 																<Badge
  > 566 │ 																	key={idx}
        │ 																	     ^^^
    567 │ 																	variant="outline"
    568 │ 																	className="text-xs"
  
  i This is the source of the key value.
  
    562 │ 													<div className="flex flex-wrap gap-1">
    563 │ 														{(pathway as any).polishTargets?.map(
  > 564 │ 															(target: any, idx: number) => (
        │ 															              ^^^
    565 │ 																<Badge
    566 │ 																	key={idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:607:18 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    605 │ 										(interaction: any, index: number) => (
    606 │ 											<Card
  > 607 │ 												key={index}
        │ 												     ^^^^^
    608 │ 												className="cursor-pointer transition-shadow hover:shadow-md"
    609 │ 											>
  
  i This is the source of the key value.
  
    603 │ 								<div className="space-y-4">
    604 │ 									{(currentNeurotransmitter as any).supplementInteractions?.map(
  > 605 │ 										(interaction: any, index: number) => (
        │ 										                   ^^^^^
    606 │ 											<Card
    607 │ 												key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:716:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    714 │ 											).clinicalAspects?.disorders?.map(
    715 │ 												(disorder: any, index: number) => (
  > 716 │ 													<div key={index} className="rounded-lg border p-3">
        │ 													          ^^^^^
    717 │ 														<div className="mb-2 flex items-center justify-between">
    718 │ 															<h4 className="font-medium text-sm">
  
  i This is the source of the key value.
  
    713 │ 												currentNeurotransmitter as any
    714 │ 											).clinicalAspects?.disorders?.map(
  > 715 │ 												(disorder: any, index: number) => (
        │ 												                ^^^^^
    716 │ 													<div key={index} className="rounded-lg border p-3">
    717 │ 														<div className="mb-2 flex items-center justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:748:26 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    746 │ 																		(symptom: any, idx: number) => (
    747 │ 																			<Badge
  > 748 │ 																				key={idx}
        │ 																				     ^^^
    749 │ 																				variant="outline"
    750 │ 																				className="text-xs"
  
  i This is the source of the key value.
  
    744 │ 																<div className="flex flex-wrap gap-1">
    745 │ 																	{disorder.polishSymptoms?.map(
  > 746 │ 																		(symptom: any, idx: number) => (
        │ 																		               ^^^
    747 │ 																			<Badge
    748 │ 																				key={idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:766:26 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    764 │ 																		(treatment: any, idx: number) => (
    765 │ 																			<Badge
  > 766 │ 																				key={idx}
        │ 																				     ^^^
    767 │ 																				variant="secondary"
    768 │ 																				className="text-xs"
  
  i This is the source of the key value.
  
    762 │ 																<div className="flex flex-wrap gap-1">
    763 │ 																	{disorder.polishTreatments?.map(
  > 764 │ 																		(treatment: any, idx: number) => (
        │ 																		                 ^^^
    765 │ 																			<Badge
    766 │ 																				key={idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\education\NeurotransmitterEducationModule.tsx:794:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    792 │ 											).clinicalAspects?.biomarkers?.map(
    793 │ 												(biomarker: any, index: number) => (
  > 794 │ 													<div key={index} className="rounded-lg border p-3">
        │ 													          ^^^^^
    795 │ 														<div className="mb-1 flex items-center justify-between">
    796 │ 															<h4 className="font-medium text-sm">
  
  i This is the source of the key value.
  
    791 │ 												currentNeurotransmitter as any
    792 │ 											).clinicalAspects?.biomarkers?.map(
  > 793 │ 												(biomarker: any, index: number) => (
        │ 												                 ^^^^^
    794 │ 													<div key={index} className="rounded-lg border p-3">
    795 │ 														<div className="mb-1 flex items-center justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\features\search\AdvancedSearchBar.tsx:24:22 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    23 │ interface AdvancedSearchBarProps {
  > 24 │ 	onSearch: (results: any[]) => void;
       │ 	                    ^^^
    25 │ 	language?: "pl" | "en";
    26 │ }
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\features\search\AdvancedSearchBar.tsx:58:51 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    57 │ 	// Search query
  > 58 │ 	const [searchParams, setSearchParams] = useState<any>(null);
       │ 	                                                 ^^^
    59 │ 	const searchQuery = api.advancedSearch.search.useQuery(
    60 │ 		searchParams || {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\features\search\AdvancedSearchBar.tsx:207:8 lint/a11y/useButtonType ━━━━━━━━━━━━━━━

  × Provide an explicit type prop for the button element.
  
    205 │ 						/>
    206 │ 						{query && (
  > 207 │ 							<button
        │ 							^^^^^^^
  > 208 │ 								onClick={() => {
         ...
  > 212 │ 								className="-translate-y-1/2 absolute top-1/2 right-3 text-muted-foreground hover:text-foreground"
  > 213 │ 							>
        │ 							^
    214 │ 								<X className="h-4 w-4" />
    215 │ 							</button>
  
  i The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.
  
  i Allowed button types are: submit, button or reset
  

.\src\components\features\search\AdvancedSearchBar.tsx:335:9 lint/a11y/useButtonType ━━━━━━━━━━━━━━━

  × Provide an explicit type prop for the button element.
  
    333 │ 						<div className="absolute z-50 mt-2 w-full rounded-md border bg-popover p-2 shadow-md">
    334 │ 							{autocompleteData.map((item) => (
  > 335 │ 								<button
        │ 								^^^^^^^
  > 336 │ 									key={item.id}
         ...
  > 341 │ 									className="w-full rounded-sm px-3 py-2 text-left text-sm hover:bg-accent"
  > 342 │ 								>
        │ 								^
    343 │ 									<div className="flex items-center justify-between">
    344 │ 										<span>{item.name}</span>
  
  i The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.
  
  i Allowed button types are: submit, button or reset
  

.\src\components\features\search\AdvancedSearchBar.tsx:361:8 lint/a11y/useButtonType ━━━━━━━━━━━━━━━

  × Provide an explicit type prop for the button element.
  
    359 │ 						<Badge key={category} variant="secondary" className="gap-1">
    360 │ 							{categoryLabels[category]}
  > 361 │ 							<button
        │ 							^^^^^^^
  > 362 │ 								onClick={() => toggleCategory(category)}
  > 363 │ 								className="ml-1 hover:text-destructive"
  > 364 │ 							>
        │ 							^
    365 │ 								<X className="h-3 w-3" />
    366 │ 							</button>
  
  i The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.
  
  i Allowed button types are: submit, button or reset
  

.\src\components\features\search\AdvancedSearchBar.tsx:372:8 lint/a11y/useButtonType ━━━━━━━━━━━━━━━

  × Provide an explicit type prop for the button element.
  
    370 │ 						<Badge key={level} variant="outline" className="gap-1">
    371 │ 							{evidenceLabels[level]}
  > 372 │ 							<button
        │ 							^^^^^^^
  > 373 │ 								onClick={() => toggleEvidenceLevel(level)}
  > 374 │ 								className="ml-1 hover:text-destructive"
  > 375 │ 							>
        │ 							^
    376 │ 								<X className="h-3 w-3" />
    377 │ 							</button>
  
  i The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.
  
  i Allowed button types are: submit, button or reset
  

.\src\components\gamification\LevelUpNotification.tsx:196:19 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    194 │ 											{unlockedFeatures.map((feature, i) => (
    195 │ 												<motion.li
  > 196 │ 													key={i}
        │ 													     ^
    197 │ 													className="flex items-center gap-2 text-sm"
    198 │ 													initial={{ opacity: 0, x: -20 }}
  
  i This is the source of the key value.
  
    192 │ 										</div>
    193 │ 										<ul className="space-y-2">
  > 194 │ 											{unlockedFeatures.map((feature, i) => (
        │ 											                                ^
    195 │ 												<motion.li
    196 │ 													key={i}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\gamification\StreakCalendar.tsx:146:18 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    144 │ 					<div className="flex gap-1 overflow-x-auto pb-2">
    145 │ 						{weeks.map((week, weekIndex) => (
  > 146 │ 							<div key={weekIndex} className="flex flex-col gap-1">
        │ 							          ^^^^^^^^^
    147 │ 								{week.map((day, dayIndex) => {
    148 │ 									const intensity = day.active ? getIntensity(day.xpEarned) : 0;
  
  i This is the source of the key value.
  
    144 │ 					<div className="flex gap-1 overflow-x-auto pb-2">
  > 145 │ 						{weeks.map((week, weekIndex) => (
        │ 						                  ^^^^^^^^^
    146 │ 							<div key={weekIndex} className="flex flex-col gap-1">
    147 │ 								{week.map((day, dayIndex) => {
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\gamification\StreakCalendar.tsx:188:18 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    186 │ 						<span>Less</span>
    187 │ 						{intensityColors.map((color, i) => (
  > 188 │ 							<div key={i} className={cn("h-3 w-3 rounded-sm", color)} />
        │ 							          ^
    189 │ 						))}
    190 │ 						<span>More</span>
  
  i This is the source of the key value.
  
    185 │ 					<div className="flex items-center gap-2 text-muted-foreground text-xs">
    186 │ 						<span>Less</span>
  > 187 │ 						{intensityColors.map((color, i) => (
        │ 						                             ^
    188 │ 							<div key={i} className={cn("h-3 w-3 rounded-sm", color)} />
    189 │ 						))}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\gamification\XPProgressBar.tsx:94:53 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    92 │ 	// Get current level info
    93 │ 	const levelInfo =
  > 94 │ 		levelThresholds.find((l) => l.level === level) || levelThresholds[0]!;
       │ 		                                                  ^^^^^^^^^^^^^^^^^^^
    95 │ 
    96 │ 	// Level up detection
  

.\src\components\gamification\QualityMetricsRadar.tsx:158:5 lint/a11y/noSvgWithoutTitle ━━━━━━━━━━━━

  × Alternative text title element cannot be empty
  
    156 │ 			</CardHeader>
    157 │ 			<CardContent className="flex flex-col items-center">
  > 158 │ 				<svg
        │ 				^^^^
  > 159 │ 					width={size}
  > 160 │ 					height={size}
  > 161 │ 					viewBox={`0 0 ${size} ${size}`}
  > 162 │ 					className="overflow-visible"
  > 163 │ 				>
        │ 				^
    164 │ 					{/* Grid */}
    165 │ 					<g>{gridCircles}</g>
  
  i For accessibility purposes, SVGs should have an alternative text, provided via title element. If the svg element has role="img", you should add the aria-label or aria-labelledby attribute.
  

.\src\components\gamification\QualityMetricsRadar.tsx:72:10 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    70 │ 		return (
    71 │ 			<circle
  > 72 │ 				key={i}
       │ 				     ^
    73 │ 				cx={center}
    74 │ 				cy={center}
  
  i This is the source of the key value.
  
    67 │ 	// Generate grid circles
  > 68 │ 	const gridCircles = Array.from({ length: levels }, (_, i) => {
       │ 	                                                       ^
    69 │ 		const r = (radius / levels) * (i + 1);
    70 │ 		return (
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\gamification\QualityMetricsRadar.tsx:89:10 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    87 │ 		return (
    88 │ 			<line
  > 89 │ 				key={i}
       │ 				     ^
    90 │ 				x1={center}
    91 │ 				y1={center}
  
  i This is the source of the key value.
  
    84 │ 	// Generate grid lines
  > 85 │ 	const gridLines = metrics.map((_, i) => {
       │ 	                                  ^
    86 │ 		const point = getPoint(100, i, metrics.length);
    87 │ 		return (
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\gamification\QualityMetricsRadar.tsx:113:10 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    111 │ 		return (
    112 │ 			<text
  > 113 │ 				key={i}
        │ 				     ^
    114 │ 				x={point.x}
    115 │ 				y={point.y}
  
  i This is the source of the key value.
  
    101 │ 	// Generate labels
  > 102 │ 	const labels = metrics.map((metric, i) => {
        │ 	                                    ^
    103 │ 		const point = getPoint(110, i, metrics.length);
    104 │ 		const angle = (Math.PI * 2 * i) / metrics.length - Math.PI / 2;
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\gamification\QualityMetricsRadar.tsx:129:12 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    127 │ 		const point = getPoint(metric.value, i, metrics.length);
    128 │ 		return (
  > 129 │ 			<g key={i}>
        │ 			        ^
    130 │ 				<circle
    131 │ 					cx={point.x}
  
  i This is the source of the key value.
  
    125 │ 	// Generate value labels
  > 126 │ 	const valueLabels = metrics.map((metric, i) => {
        │ 	                                         ^
    127 │ 		const point = getPoint(metric.value, i, metrics.length);
    128 │ 		return (
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\gamification\QualityMetricsRadar.tsx:224:13 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    222 │ 					{metrics.map((metric, i) => (
    223 │ 						<motion.div
  > 224 │ 							key={i}
        │ 							     ^
    225 │ 							className="flex items-center justify-between rounded-lg bg-secondary/50 px-3 py-2"
    226 │ 							initial={{ opacity: 0, y: 10 }}
  
  i This is the source of the key value.
  
    220 │ 				{/* Legend */}
    221 │ 				<div className="mt-6 grid w-full grid-cols-2 gap-2 text-sm">
  > 222 │ 					{metrics.map((metric, i) => (
        │ 					                      ^
    223 │ 						<motion.div
    224 │ 							key={i}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\gamification\AchievementBadge.tsx:143:6 lint/a11y/noSvgWithoutTitle ━━━━━━━━━━━━━━━

  × Alternative text title element cannot be empty
  
    141 │ 				achievement.progress !== undefined &&
    142 │ 				showProgress && (
  > 143 │ 					<svg className="-rotate-90 absolute inset-0 h-full w-full">
        │ 					^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    144 │ 						<circle
    145 │ 							cx="50%"
  
  i For accessibility purposes, SVGs should have an alternative text, provided via title element. If the svg element has role="img", you should add the aria-label or aria-labelledby attribute.
  

.\src\components\gamification\AchievementBadge.tsx:182:13 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    180 │ 					[...Array(3)].map((_, i) => (
    181 │ 						<motion.div
  > 182 │ 							key={i}
        │ 							     ^
    183 │ 							className="absolute h-1 w-1 rounded-full bg-white"
    184 │ 							initial={{
  
  i This is the source of the key value.
  
    178 │ 					achievement.unlocked &&
    179 │ 					!shouldReduceMotion &&
  > 180 │ 					[...Array(3)].map((_, i) => (
        │ 					                      ^
    181 │ 						<motion.div
    182 │ 							key={i}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\app\psychology\page.tsx:278:6 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    276 │ 		},
    277 │ 	},
  > 278 │ ] as any[];
        │      ^^^
    279 │ 
    280 │ const mockHabits = [
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\psychology\page.tsx:448:6 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    446 │ 		completedAt: undefined,
    447 │ 	},
  > 448 │ ] as any[];
        │      ^^^
    449 │ 
    450 │ const mockCompletions: any[] = [];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\psychology\page.tsx:450:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    448 │ ] as any[];
    449 │ 
  > 450 │ const mockCompletions: any[] = [];
        │                        ^^^
    451 │ 
    452 │ const mockTechniques = [
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\psychology\page.tsx:835:6 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    833 │ 		isActive: true,
    834 │ 	},
  > 835 │ ] as any[];
        │      ^^^
    836 │ 
    837 │ // Mock learning paths
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\psychology\page.tsx:892:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    890 │ 	const handleScenarioComplete = (
    891 │ 		scenarioId: string,
  > 892 │ 		responses: any[],
        │ 		           ^^^
    893 │ 		score: number,
    894 │ 	) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\psychology\page.tsx:902:44 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    900 │ 	};
    901 │ 
  > 902 │ 	const handleHabitCreate = (habit: Partial<any>) => {
        │ 	                                          ^^^
    903 │ 		console.log("Creating new habit:", habit);
    904 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\app\psychology\page.tsx:906:63 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    904 │ 	};
    905 │ 
  > 906 │ 	const handleHabitUpdate = (habitId: string, updates: Partial<any>) => {
        │ 	                                                             ^^^
    907 │ 		console.log(`Updating habit ${habitId}:`, updates);
    908 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphDashboard.tsx:10:10 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
     9 │ export interface GraphDashboardProps {
  > 10 │ 	nodes?: any[];
       │ 	        ^^^
    11 │ 	relationships?: any[];
    12 │ 	supplements?: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphDashboard.tsx:11:18 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
     9 │ export interface GraphDashboardProps {
    10 │ 	nodes?: any[];
  > 11 │ 	relationships?: any[];
       │ 	                ^^^
    12 │ 	supplements?: any[];
    13 │ 	onDataLoad?: (data: any) => void;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphDashboard.tsx:12:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    10 │ 	nodes?: any[];
    11 │ 	relationships?: any[];
  > 12 │ 	supplements?: any[];
       │ 	              ^^^
    13 │ 	onDataLoad?: (data: any) => void;
    14 │ 	className?: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphDashboard.tsx:13:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    11 │ 	relationships?: any[];
    12 │ 	supplements?: any[];
  > 13 │ 	onDataLoad?: (data: any) => void;
       │ 	                    ^^^
    14 │ 	className?: string;
    15 │ 	isLoading?: boolean;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphDashboard.tsx:17:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    15 │ 	isLoading?: boolean;
    16 │ 	error?: string | null;
  > 17 │ 	onNodeSelect?: (node: any) => void;
       │ 	                      ^^^
    18 │ 	onRelationshipSelect?: (relationship: any) => void;
    19 │ }
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphDashboard.tsx:18:40 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    16 │ 	error?: string | null;
    17 │ 	onNodeSelect?: (node: any) => void;
  > 18 │ 	onRelationshipSelect?: (relationship: any) => void;
       │ 	                                      ^^^
    19 │ }
    20 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\features\recommendations\RecommendationWizard.tsx:60:32 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    59 │ interface RecommendationWizardProps {
  > 60 │ 	onComplete: (recommendations: any) => void;
       │ 	                              ^^^
    61 │ 	language?: "pl" | "en";
    62 │ }
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\features\recommendations\RecommendationWizard.tsx:80:29 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    78 │ 	const [shouldFetch, setShouldFetch] = React.useState(false);
    79 │ 	const recommendationsQuery = api.recommendations.getRecommendations.useQuery(
  > 80 │ 		{ userProfile: profile as any, limit: 10 },
       │ 		                          ^^^
    81 │ 		{ enabled: shouldFetch && !!profile.age && !!profile.gender },
    82 │ 	);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\features\recommendations\RecommendationWizard.tsx:276:52 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    274 │ 								value={profile.gender}
    275 │ 								onValueChange={(value) =>
  > 276 │ 									setProfile({ ...profile, gender: value as any })
        │ 									                                          ^^^
    277 │ 								}
    278 │ 							>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\features\recommendations\RecommendationWizard.tsx:309:61 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    307 │ 								value={profile.experienceLevel}
    308 │ 								onValueChange={(value) =>
  > 309 │ 									setProfile({ ...profile, experienceLevel: value as any })
        │ 									                                                   ^^^
    310 │ 								}
    311 │ 							>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\features\recommendations\RecommendationWizard.tsx:355:9 lint/a11y/useButtonType ━━━━━━━━━━

  × Provide an explicit type prop for the button element.
  
    353 │ 						<div className="grid grid-cols-2 gap-3 md:grid-cols-3">
    354 │ 							{healthGoals.map((goal) => (
  > 355 │ 								<button
        │ 								^^^^^^^
  > 356 │ 									key={goal.id}
         ...
  > 366 │ 									}
  > 367 │ 								>
        │ 								^
    368 │ 									<div className="mb-2 text-2xl">{goal.icon}</div>
    369 │ 									<div className="font-medium text-sm">
  
  i The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.
  
  i Allowed button types are: submit, button or reset
  

.\src\components\graph\AccessibleGraphWrapper.tsx:48:49 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    46 │ 	selectedNodeIds?: string[];
    47 │ 	onNodeSelect?: (nodeId: string) => void;
  > 48 │ 	onKeyboardNavigation?: (action: string, data?: any) => void;
       │ 	                                               ^^^
    49 │ 	className?: string;
    50 │ }
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\AccessibleGraphWrapper.tsx:86:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook specifies more dependencies than necessary: nodes
  
    85 │ 	// Update focus manager when nodes change
  > 86 │ 	useEffect(() => {
       │ 	^^^^^^^^^
    87 │ 		focusManagerRef.current?.updateFocusableElements();
    88 │ 	}, [nodes]);
  
  i Outer scope values aren't valid dependencies because mutating them doesn't re-render the component.
  
    86 │ 	useEffect(() => {
    87 │ 		focusManagerRef.current?.updateFocusableElements();
  > 88 │ 	}, [nodes]);
       │ 	    ^^^^^
    89 │ 
    90 │ 	// Keyboard navigation handler
  

.\src\components\graph\AccessibleGraphWrapper.tsx:91:24 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook specifies more dependencies than necessary: currentNodeIndex, nodes
  
    90 │ 	// Keyboard navigation handler
  > 91 │ 	const handleKeyDown = useCallback(
       │ 	                      ^^^^^^^^^^^
    92 │ 		(event: KeyboardEvent) => {
    93 │ 			// Prevent default for handled shortcuts
  
  i This dependency can be removed from the list.
  
    155 │ 		},
    156 │ 		[
  > 157 │ 			currentNodeIndex,
        │ 			^^^^^^^^^^^^^^^^
    158 │ 			nodes,
    159 │ 			onKeyboardNavigation,
  
  i Outer scope values aren't valid dependencies because mutating them doesn't re-render the component.
  
    156 │ 		[
    157 │ 			currentNodeIndex,
  > 158 │ 			nodes,
        │ 			^^^^^
    159 │ 			onKeyboardNavigation,
    160 │ 			announcements,
  

.\src\components\graph\AccessibleGraphLegend.tsx:44:55 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    43 │ 	const toggleNodeTypeFilter = (type: string) => {
  > 44 │ 		const newTypes = filters.nodeTypes.includes(type as any)
       │ 		                                                    ^^^
    45 │ 			? filters.nodeTypes.filter((t) => t !== type)
    46 │ 			: [...filters.nodeTypes, type as any];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\AccessibleGraphLegend.tsx:46:37 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    44 │ 		const newTypes = filters.nodeTypes.includes(type as any)
    45 │ 			? filters.nodeTypes.filter((t) => t !== type)
  > 46 │ 			: [...filters.nodeTypes, type as any];
       │ 			                                 ^^^
    47 │ 
    48 │ 		setFilters({ nodeTypes: newTypes });
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\AccessibleGraphLegend.tsx:52:63 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    51 │ 	const toggleRelationshipTypeFilter = (type: string) => {
  > 52 │ 		const newTypes = filters.relationshipTypes.includes(type as any)
       │ 		                                                            ^^^
    53 │ 			? filters.relationshipTypes.filter((t) => t !== type)
    54 │ 			: [...filters.relationshipTypes, type as any];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\AccessibleGraphLegend.tsx:54:45 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    52 │ 		const newTypes = filters.relationshipTypes.includes(type as any)
    53 │ 			? filters.relationshipTypes.filter((t) => t !== type)
  > 54 │ 			: [...filters.relationshipTypes, type as any];
       │ 			                                         ^^^
    55 │ 
    56 │ 		setFilters({ relationshipTypes: newTypes });
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\AccessibleGraphLegend.tsx:60:7 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━━━

  × The elements with the following roles can be changed to the following elements:
    <section>
  
  
    59 │ 	return (
  > 60 │ 		<div
       │ 		    
  > 61 │ 			role="region"
       │ 			^^^^^^^^^^^^^
    62 │ 			aria-label="Legenda grafu wiedzy"
    63 │ 			className="rounded-lg border bg-white p-4 shadow-sm"
  
  i For examples and more information, see WAI-ARIA Roles
  

.\src\components\graph\AccessibleGraphLegend.tsx:83:60 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    81 │ 					<ul aria-labelledby="node-types-heading" className="space-y-2">
    82 │ 						{Object.entries(nodeTypeMap).map(([type, { color, label }]) => {
  > 83 │ 							const isActive = filters.nodeTypes.includes(type as any);
       │ 							                                                    ^^^
    84 │ 							return (
    85 │ 								<li key={type}>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\AccessibleGraphLegend.tsx:134:18 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    132 │ 							([type, { color, label }]) => {
    133 │ 								const isActive = filters.relationshipTypes.includes(
  > 134 │ 									type as any,
        │ 									        ^^^
    135 │ 								);
    136 │ 								return (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\AccessibleGraphLegend.tsx:182:10 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━

  × The elements with the following roles can be changed to the following elements:
    <fieldset>
  
  
    180 │ 						Poziomy dowodów
    181 │ 					</h4>
  > 182 │ 					<div
        │ 					    
  > 183 │ 						role="group"
        │ 						^^^^^^^^^^^^
    184 │ 						aria-labelledby="evidence-levels-heading"
    185 │ 						className="flex flex-wrap gap-2"
  
  i For examples and more information, see WAI-ARIA Roles
  

.\src\components\graph\AccessibleGraphLegend.tsx:86:10 lint/a11y/useButtonType ━━━━━━━━━━━━━━━━━━━━━

  × Provide an explicit type prop for the button element.
  
    84 │ 							return (
    85 │ 								<li key={type}>
  > 86 │ 									<button
       │ 									^^^^^^^
  > 87 │ 										role="switch"
        ...
  > 95 │ 										}`}
  > 96 │ 									>
       │ 									^
    97 │ 										<div
    98 │ 											className="h-4 w-4 rounded-full border border-gray-300"
  
  i The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.
  
  i Allowed button types are: submit, button or reset
  

.\src\components\graph\AccessibleGraphLegend.tsx:138:11 lint/a11y/useButtonType ━━━━━━━━━━━━━━━━━━━━

  × Provide an explicit type prop for the button element.
  
    136 │ 								return (
    137 │ 									<li key={type}>
  > 138 │ 										<button
        │ 										^^^^^^^
  > 139 │ 											role="switch"
         ...
  > 147 │ 											}`}
  > 148 │ 										>
        │ 										^
    149 │ 											<div
    150 │ 												className="h-0.5 w-4"
  
  i The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.
  
  i Allowed button types are: submit, button or reset
  

.\src\components\graph\AccessibleGraphLegend.tsx:198:9 lint/a11y/useButtonType ━━━━━━━━━━━━━━━━━━━━━

  × Provide an explicit type prop for the button element.
  
    196 │ 							const isActive = filters.evidenceLevels.includes(level);
    197 │ 							return (
  > 198 │ 								<button
        │ 								^^^^^^^
  > 199 │ 									key={level}
         ...
  > 213 │ 									}`}
  > 214 │ 								>
        │ 								^
    215 │ 									{level}
    216 │ 								</button>
  
  i The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.
  
  i Allowed button types are: submit, button or reset
  

.\src\components\graph\CytoscapeVisualization.tsx:82:20 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    80 │ 		rows: undefined,
    81 │ 		cols: undefined,
  > 82 │ 		position: (node: any) => ({ row: node.data("row"), col: node.data("col") }),
       │ 		                 ^^^
    83 │ 	},
    84 │ 	radial: {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\CytoscapeVisualization.tsx:88:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    86 │ 		animate: true,
    87 │ 		animationDuration: 1000,
  > 88 │ 		concentric: (node: any) => node.data("importance") || 1,
       │ 		                   ^^^
    89 │ 		levelWidth: () => 1,
    90 │ 		spacing: 100,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\CytoscapeVisualization.tsx:223:45 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    221 │ 		if (filters.nodeTypes.length > 0) {
    222 │ 			filteredNodes = filteredNodes.filter((node) =>
  > 223 │ 				filters.nodeTypes.includes(node.type as any),
        │ 				                                        ^^^
    224 │ 			);
    225 │ 		}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\CytoscapeVisualization.tsx:239:59 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    237 │ 		if (filters.evidenceLevels.length > 0) {
    238 │ 			filteredNodes = filteredNodes.filter((node) =>
  > 239 │ 				filters.evidenceLevels.includes(node.evidenceLevel as any),
        │ 				                                                      ^^^
    240 │ 			);
    241 │ 		}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\CytoscapeVisualization.tsx:256:52 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    254 │ 		if (filters.relationshipTypes.length > 0) {
    255 │ 			filteredRelationships = filteredRelationships.filter((rel) =>
  > 256 │ 				filters.relationshipTypes.includes(rel.type as any),
        │ 				                                               ^^^
    257 │ 			);
    258 │ 		}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\CytoscapeVisualization.tsx:435:26 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    434 │ 	const handleLayoutChange = (newLayout: string) => {
  > 435 │ 		setLayout(newLayout as any);
        │ 		                       ^^^
    436 │ 	};
    437 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\CytoscapeVisualization.tsx:565:64 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    563 │ 								{selectedNode.polishName}
    564 │ 								<Badge
  > 565 │ 									variant={selectedNode.evidenceLevel?.toLowerCase() as any}
        │ 									                                                      ^^^
    566 │ 								>
    567 │ 									{selectedNode.evidenceLevel}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\CytoscapeVisualization.tsx:299:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: addSelectedNode
  
    298 │ 	// Initialize Cytoscape
  > 299 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    300 │ 		if (!containerRef.current) return;
    301 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    369 │ 					removeSelectedNode(nodeData.id);
    370 │ 				} else {
  > 371 │ 					addSelectedNode(nodeData.id);
        │ 					^^^^^^^^^^^^^^^
    372 │ 				}
    373 │ 			}
  

.\src\components\graph\CytoscapeVisualization.tsx:299:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: removeSelectedNode
  
    298 │ 	// Initialize Cytoscape
  > 299 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    300 │ 		if (!containerRef.current) return;
    301 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    368 │ 				if (selectedNodes.includes(nodeData.id)) {
  > 369 │ 					removeSelectedNode(nodeData.id);
        │ 					^^^^^^^^^^^^^^^^^^
    370 │ 				} else {
    371 │ 					addSelectedNode(nodeData.id);
  

.\src\components\graph\CytoscapeVisualization.tsx:299:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: setZoomLevel
  
    298 │ 	// Initialize Cytoscape
  > 299 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    300 │ 		if (!containerRef.current) return;
    301 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    389 │ 		cy.on("zoom", () => {
  > 390 │ 			setZoomLevel(cy.zoom());
        │ 			^^^^^^^^^^^^
    391 │ 		});
    392 │ 
  

.\src\components\graph\CytoscapeVisualization.tsx:299:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: setHighlightNode
  
    298 │ 	// Initialize Cytoscape
  > 299 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    300 │ 		if (!containerRef.current) return;
    301 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    383 │ 		cy.on("mouseout", "node", (event) => {
    384 │ 			const node = event.target;
  > 385 │ 			setHighlightNode(null);
        │ 			^^^^^^^^^^^^^^^^
    386 │ 			node.removeClass("highlighted");
    387 │ 		});
  
  i This dependency is not specified in the hook dependency list.
  
    377 │ 			const node = event.target;
    378 │ 			const nodeData = node.data();
  > 379 │ 			setHighlightNode(nodeData.id);
        │ 			^^^^^^^^^^^^^^^^
    380 │ 			node.addClass("highlighted");
    381 │ 		});
  

.\src\components\graph\CytoscapeVisualization.tsx:299:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: nodes.find
  
    298 │ 	// Initialize Cytoscape
  > 299 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    300 │ 		if (!containerRef.current) return;
    301 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    363 │ 			// Find the original node data
  > 364 │ 			const originalNode = nodes.find((n) => n.id === nodeData.id);
        │ 			                     ^^^^^^^^^^
    365 │ 			if (originalNode) {
    366 │ 				setSelectedNode(originalNode);
  

.\src\components\graph\CytoscapeVisualization.tsx:299:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: selectedNodes.includes
  
    298 │ 	// Initialize Cytoscape
  > 299 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    300 │ 		if (!containerRef.current) return;
    301 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    366 │ 				setSelectedNode(originalNode);
    367 │ 
  > 368 │ 				if (selectedNodes.includes(nodeData.id)) {
        │ 				    ^^^^^^^^^^^^^^^^^^^^^^
    369 │ 					removeSelectedNode(nodeData.id);
    370 │ 				} else {
  

.\src\components\graph\KnowledgeGraph.tsx:109:23 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    107 │ 	className = "",
    108 │ }) => {
  > 109 │ 	const fgRef = useRef<any>(null);
        │ 	                     ^^^
    110 │ 	const [searchTerm, setSearchTerm] = useState("");
    111 │ 	const [selectedNode, setSelectedNode] = useState<GraphNode | null>(null);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\KnowledgeGraph.tsx:247:17 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━━━━━━━━

  × The elements with the following roles can be changed to the following elements:
    <button>
    <input type="button">
  
  
    245 │ 			<g
    246 │ 				ref={ref}
  > 247 │ 				tabIndex={0}
        │ 				            
  > 248 │ 				role="button"
        │ 				^^^^^^^^^^^^^
    249 │ 				aria-label={`${node.name} - ${node.type}`}
    250 │ 			>
  
  i For examples and more information, see WAI-ARIA Roles
  

.\src\components\graph\KnowledgeGraph.tsx:285:17 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━━━━━━━━

  × The elements with the following roles can be changed to the following elements:
    <button>
    <input type="button">
  
  
    283 │ 		return (
    284 │ 			<g
  > 285 │ 				tabIndex={0}
        │ 				            
  > 286 │ 				role="button"
        │ 				^^^^^^^^^^^^^
    287 │ 				aria-label={`${link.type} relationship from ${link.source} to ${link.target}`}
    288 │ 			>
  
  i For examples and more information, see WAI-ARIA Roles
  

.\src\components\graph\KnowledgeGraph.tsx:372:91 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━━━━━━━━

  × The elements with the following roles can be changed to the following elements:
    <section>
  
  
    371 │ 			<div
  > 372 │ 				className="relative min-h-[500px] w-full overflow-hidden rounded-lg border bg-gray-50"
        │ 				                                                                                      
  > 373 │ 				role="region"
        │ 				^^^^^^^^^^^^^
    374 │ 				aria-label="Wizualizacja grafu wiedzy"
    375 │ 			>
  
  i For examples and more information, see WAI-ARIA Roles
  

.\src\components\graph\KnowledgeGraph.tsx:475:54 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━━━━━━━━

  × The elements with the following roles can be changed to the following elements:
    <section>
  
  
    473 │ 			{/* Legend */}
    474 │ 			<div
  > 475 │ 				className="mt-4 rounded-lg border bg-gray-50 p-4"
        │ 				                                                 
  > 476 │ 				role="region"
        │ 				^^^^^^^^^^^^^
    477 │ 				aria-label="Legenda grafu wiedzy"
    478 │ 			>
  
  i For examples and more information, see WAI-ARIA Roles
  

.\src\components\graph\KnowledgeGraph.tsx:221:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: handleResetView
  
    220 │ 	// Keyboard navigation for accessibility
  > 221 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    222 │ 		const handleKeyDown = (e: KeyboardEvent) => {
    223 │ 			if (e.key === "+" || e.key === "=") {
  
  i This dependency is not specified in the hook dependency list.
  
    226 │ 				handleZoomOut();
    227 │ 			} else if (e.key === "0") {
  > 228 │ 				handleResetView();
        │ 				^^^^^^^^^^^^^^^
    229 │ 			} else if (e.key === "Escape") {
    230 │ 				setSelectedNode(null);
  
  i Either include it or remove the dependency array
  

.\src\components\graph\KnowledgeGraph.tsx:221:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: handleZoomIn
  
    220 │ 	// Keyboard navigation for accessibility
  > 221 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    222 │ 		const handleKeyDown = (e: KeyboardEvent) => {
    223 │ 			if (e.key === "+" || e.key === "=") {
  
  i This dependency is not specified in the hook dependency list.
  
    222 │ 		const handleKeyDown = (e: KeyboardEvent) => {
    223 │ 			if (e.key === "+" || e.key === "=") {
  > 224 │ 				handleZoomIn();
        │ 				^^^^^^^^^^^^
    225 │ 			} else if (e.key === "-" || e.key === "_") {
    226 │ 				handleZoomOut();
  
  i Either include it or remove the dependency array
  

.\src\components\graph\KnowledgeGraph.tsx:221:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: handleZoomOut
  
    220 │ 	// Keyboard navigation for accessibility
  > 221 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    222 │ 		const handleKeyDown = (e: KeyboardEvent) => {
    223 │ 			if (e.key === "+" || e.key === "=") {
  
  i This dependency is not specified in the hook dependency list.
  
    224 │ 				handleZoomIn();
    225 │ 			} else if (e.key === "-" || e.key === "_") {
  > 226 │ 				handleZoomOut();
        │ 				^^^^^^^^^^^^^
    227 │ 			} else if (e.key === "0") {
    228 │ 				handleResetView();
  
  i Either include it or remove the dependency array
  

.\src\components\graph\ConnectionVisualization.tsx:84:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
     82 │ 		const matrix: ConnectionMatrix[] = [];
     83 │ 
   > 84 │ 		relationships.forEach((rel) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 85 │ 			const sourceNode = nodes.find((n) => n.id === rel.sourceId);
         ...
  > 101 │ 			}
  > 102 │ 		});
        │ 		^^
    103 │ 
    104 │ 		// Apply filters
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\graph\ConnectionVisualization.tsx:435:17 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    433 │ 									.map((connection, index) => (
    434 │ 										<div
  > 435 │ 											key={index}
        │ 											     ^^^^^
    436 │ 											className="flex items-center gap-3 rounded-lg border p-3 transition-colors hover:bg-gray-50"
    437 │ 										>
  
  i This is the source of the key value.
  
    431 │ 								{filteredConnectionsBySource
    432 │ 									.slice(0, 20)
  > 433 │ 									.map((connection, index) => (
        │ 									                  ^^^^^
    434 │ 										<div
    435 │ 											key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\ConnectionVisualization.tsx:589:18 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    587 │ 										.map((connection, index) => (
    588 │ 											<div
  > 589 │ 												key={index}
        │ 												     ^^^^^
    590 │ 												className="flex items-center gap-3 rounded-lg bg-gray-50 p-2"
    591 │ 											>
  
  i This is the source of the key value.
  
    585 │ 									{filteredConnectionsBySource
    586 │ 										.slice(0, 5)
  > 587 │ 										.map((connection, index) => (
        │ 										                  ^^^^^
    588 │ 											<div
    589 │ 												key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\D3GraphVisualization.tsx:143:45 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    141 │ 		if (filters.nodeTypes.length > 0) {
    142 │ 			filteredNodes = filteredNodes.filter((node) =>
  > 143 │ 				filters.nodeTypes.includes(node.type as any),
        │ 				                                        ^^^
    144 │ 			);
    145 │ 		}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:159:59 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    157 │ 		if (filters.evidenceLevels.length > 0) {
    158 │ 			filteredNodes = filteredNodes.filter((node) =>
  > 159 │ 				filters.evidenceLevels.includes(node.evidenceLevel as any),
        │ 				                                                      ^^^
    160 │ 			);
    161 │ 		}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:196:52 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    194 │ 		if (filters.relationshipTypes.length > 0) {
    195 │ 			filteredRelationships = filteredRelationships.filter((rel) =>
  > 196 │ 				filters.relationshipTypes.includes(rel.type as any),
        │ 				                                               ^^^
    197 │ 			);
    198 │ 		}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:265:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    263 │ 						d3
    264 │ 							.forceLink(d3Links)
  > 265 │ 							.id((d: any) => d.id)
        │ 							        ^^^
    266 │ 							.strength(0.1),
    267 │ 					)
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:272:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    270 │ 					.force(
    271 │ 						"collision",
  > 272 │ 						d3.forceCollide().radius((d: any) => d.size + 2),
        │ 						                             ^^^
    273 │ 					);
    274 │ 				break;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:282:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    280 │ 						d3
    281 │ 							.forceLink(d3Links)
  > 282 │ 							.id((d: any) => d.id)
        │ 							        ^^^
    283 │ 							.strength(0.1),
    284 │ 					)
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:296:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    294 │ 					.force(
    295 │ 						"link",
  > 296 │ 						d3.forceLink(d3Links).id((d: any) => d.id),
        │ 						                             ^^^
    297 │ 					)
    298 │ 					.force("charge", d3.forceManyBody())
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:421:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    419 │ 		simulation.on("tick", () => {
    420 │ 			link
  > 421 │ 				.attr("x1", (d: any) => d.source.x)
        │ 				                ^^^
    422 │ 				.attr("y1", (d: any) => d.source.y)
    423 │ 				.attr("x2", (d: any) => d.target.x)
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:422:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    420 │ 			link
    421 │ 				.attr("x1", (d: any) => d.source.x)
  > 422 │ 				.attr("y1", (d: any) => d.source.y)
        │ 				                ^^^
    423 │ 				.attr("x2", (d: any) => d.target.x)
    424 │ 				.attr("y2", (d: any) => d.target.y);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:423:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    421 │ 				.attr("x1", (d: any) => d.source.x)
    422 │ 				.attr("y1", (d: any) => d.source.y)
  > 423 │ 				.attr("x2", (d: any) => d.target.x)
        │ 				                ^^^
    424 │ 				.attr("y2", (d: any) => d.target.y);
    425 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:424:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    422 │ 				.attr("y1", (d: any) => d.source.y)
    423 │ 				.attr("x2", (d: any) => d.target.x)
  > 424 │ 				.attr("y2", (d: any) => d.target.y);
        │ 				                ^^^
    425 │ 
    426 │ 			node.attr("cx", (d: D3Node) => d.x!).attr("cy", (d: D3Node) => d.y!);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:426:35 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    424 │ 				.attr("y2", (d: any) => d.target.y);
    425 │ 
  > 426 │ 			node.attr("cx", (d: D3Node) => d.x!).attr("cy", (d: D3Node) => d.y!);
        │ 			                               ^^^^
    427 │ 
    428 │ 			labels.attr("x", (d: D3Node) => d.x!).attr("y", (d: D3Node) => d.y!);
  

.\src\components\graph\D3GraphVisualization.tsx:426:67 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    424 │ 				.attr("y2", (d: any) => d.target.y);
    425 │ 
  > 426 │ 			node.attr("cx", (d: D3Node) => d.x!).attr("cy", (d: D3Node) => d.y!);
        │ 			                                                               ^^^^
    427 │ 
    428 │ 			labels.attr("x", (d: D3Node) => d.x!).attr("y", (d: D3Node) => d.y!);
  

.\src\components\graph\D3GraphVisualization.tsx:428:36 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    426 │ 			node.attr("cx", (d: D3Node) => d.x!).attr("cy", (d: D3Node) => d.y!);
    427 │ 
  > 428 │ 			labels.attr("x", (d: D3Node) => d.x!).attr("y", (d: D3Node) => d.y!);
        │ 			                                ^^^^
    429 │ 		});
    430 │ 
  

.\src\components\graph\D3GraphVisualization.tsx:428:67 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    426 │ 			node.attr("cx", (d: D3Node) => d.x!).attr("cy", (d: D3Node) => d.y!);
    427 │ 
  > 428 │ 			labels.attr("x", (d: D3Node) => d.x!).attr("y", (d: D3Node) => d.y!);
        │ 			                                                               ^^^^
    429 │ 		});
    430 │ 
  

.\src\components\graph\D3GraphVisualization.tsx:457:56 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    455 │ 			svg
    456 │ 				.transition()
  > 457 │ 				.call(d3.zoom<SVGSVGElement, unknown>().scaleBy as any, 1.5);
        │ 				                                                   ^^^
    458 │ 		}
    459 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:466:56 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    464 │ 			svg
    465 │ 				.transition()
  > 466 │ 				.call(d3.zoom<SVGSVGElement, unknown>().scaleBy as any, 1 / 1.5);
        │ 				                                                   ^^^
    467 │ 		}
    468 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:476:53 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    474 │ 				.transition()
    475 │ 				.call(
  > 476 │ 					d3.zoom<SVGSVGElement, unknown>().transform as any,
        │ 					                                               ^^^
    477 │ 					d3.zoomIdentity,
    478 │ 				);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:569:64 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    567 │ 								{selectedNode.polishName}
    568 │ 								<Badge
  > 569 │ 									variant={selectedNode.evidenceLevel?.toLowerCase() as any}
        │ 									                                                      ^^^
    570 │ 								>
    571 │ 									{selectedNode.evidenceLevel}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\D3GraphVisualization.tsx:231:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: addSelectedNode
  
    230 │ 	// Initialize D3 simulation
  > 231 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    232 │ 		if (!svgRef.current) return;
    233 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    404 │ 					removeSelectedNode(d.id);
    405 │ 				} else {
  > 406 │ 					addSelectedNode(d.id);
        │ 					^^^^^^^^^^^^^^^
    407 │ 				}
    408 │ 			})
  

.\src\components\graph\D3GraphVisualization.tsx:231:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: selectedNodes.includes
  
    230 │ 	// Initialize D3 simulation
  > 231 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    232 │ 		if (!svgRef.current) return;
    233 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    401 │ 			.on("click", (event, d) => {
    402 │ 				setSelectedNode(d);
  > 403 │ 				if (selectedNodes.includes(d.id)) {
        │ 				    ^^^^^^^^^^^^^^^^^^^^^^
    404 │ 					removeSelectedNode(d.id);
    405 │ 				} else {
  

.\src\components\graph\D3GraphVisualization.tsx:231:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: setZoomLevel
  
    230 │ 	// Initialize D3 simulation
  > 231 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    232 │ 		if (!svgRef.current) return;
    233 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    247 │ 			.on("zoom", (event) => {
    248 │ 				g.attr("transform", event.transform);
  > 249 │ 				setZoomLevel(event.transform.k);
        │ 				^^^^^^^^^^^^
    250 │ 			});
    251 │ 
  

.\src\components\graph\D3GraphVisualization.tsx:231:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: removeSelectedNode
  
    230 │ 	// Initialize D3 simulation
  > 231 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    232 │ 		if (!svgRef.current) return;
    233 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    402 │ 				setSelectedNode(d);
    403 │ 				if (selectedNodes.includes(d.id)) {
  > 404 │ 					removeSelectedNode(d.id);
        │ 					^^^^^^^^^^^^^^^^^^
    405 │ 				} else {
    406 │ 					addSelectedNode(d.id);
  

.\src\components\graph\D3GraphVisualization.tsx:231:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: setHighlightNode
  
    230 │ 	// Initialize D3 simulation
  > 231 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    232 │ 		if (!svgRef.current) return;
    233 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    413 │ 			.on("mouseout", () => {
    414 │ 				setHoveredNode(null);
  > 415 │ 				setHighlightNode(null);
        │ 				^^^^^^^^^^^^^^^^
    416 │ 			});
    417 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    409 │ 			.on("mouseover", (event, d) => {
    410 │ 				setHoveredNode(d);
  > 411 │ 				setHighlightNode(d.id);
        │ 				^^^^^^^^^^^^^^^^
    412 │ 			})
    413 │ 			.on("mouseout", () => {
  

.\src\components\graph\GraphExportImport.tsx:97:40 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    95 │ 	// Handle export option change
    96 │ 	const handleOptionChange = useCallback(
  > 97 │ 		(option: keyof ExportOptions, value: any) => {
       │ 		                                     ^^^
    98 │ 			setExportOptions((prev) => ({
    99 │ 				...prev,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphExportImport.tsx:553:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    551 │ 											<ul className="mt-2 list-inside list-disc text-sm">
    552 │ 												{importResult.errors.map((error, index) => (
  > 553 │ 													<li key={index}>{error}</li>
        │ 													         ^^^^^
    554 │ 												))}
    555 │ 											</ul>
  
  i This is the source of the key value.
  
    550 │ 											<strong>Błąd importu</strong>
    551 │ 											<ul className="mt-2 list-inside list-disc text-sm">
  > 552 │ 												{importResult.errors.map((error, index) => (
        │ 												                                 ^^^^^
    553 │ 													<li key={index}>{error}</li>
    554 │ 												))}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\GraphExportImport.tsx:568:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    566 │ 											<ul className="mt-2 list-inside list-disc text-sm">
    567 │ 												{importResult.warnings.map((warning, index) => (
  > 568 │ 													<li key={index}>{warning}</li>
        │ 													         ^^^^^
    569 │ 												))}
    570 │ 											</ul>
  
  i This is the source of the key value.
  
    565 │ 											<strong>Ostrzeżenia:</strong>
    566 │ 											<ul className="mt-2 list-inside list-disc text-sm">
  > 567 │ 												{importResult.warnings.map((warning, index) => (
        │ 												                                     ^^^^^
    568 │ 													<li key={index}>{warning}</li>
    569 │ 												))}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\GraphExportImport.tsx:585:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    583 │ 													.slice(0, 5)
    584 │ 													.map((issue, index) => (
  > 585 │ 														<li key={index}>{issue}</li>
        │ 														         ^^^^^
    586 │ 													))}
    587 │ 												{importResult.polishTextIssues.length > 5 && (
  
  i This is the source of the key value.
  
    582 │ 												{importResult.polishTextIssues
    583 │ 													.slice(0, 5)
  > 584 │ 													.map((issue, index) => (
        │ 													             ^^^^^
    585 │ 														<li key={index}>{issue}</li>
    586 │ 													))}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\ProgressiveGraphLoader.tsx:139:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    137 │ 	{ hasError: boolean; error?: Error }
    138 │ > {
  > 139 │ 	constructor(props: any) {
        │ 	                   ^^^
    140 │ 		super(props);
    141 │ 		this.state = { hasError: false };
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\ProgressiveGraphLoader.tsx:100:12 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
     98 │ 				{Array.from({ length: Math.min(loadedNodes, 20) }).map((_, i) => (
     99 │ 					<div
  > 100 │ 						key={i}
        │ 						     ^
    101 │ 						className="absolute h-3 w-3 animate-pulse rounded-full bg-blue-300"
    102 │ 						style={{
  
  i This is the source of the key value.
  
     97 │ 				{/* Simulated nodes */}
   > 98 │ 				{Array.from({ length: Math.min(loadedNodes, 20) }).map((_, i) => (
        │ 				                                                           ^
     99 │ 					<div
    100 │ 						key={i}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\ProgressiveGraphLoader.tsx:114:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    112 │ 					(_, i) => (
    113 │ 						<div
  > 114 │ 							key={`line-${i}`}
        │ 							             ^
    115 │ 							className="absolute h-px animate-pulse bg-gray-300"
    116 │ 							style={{
  
  i This is the source of the key value.
  
    110 │ 				{/* Simulated connections */}
    111 │ 				{Array.from({ length: Math.min(Math.floor(loadedNodes / 2), 10) }).map(
  > 112 │ 					(_, i) => (
        │ 					    ^
    113 │ 						<div
    114 │ 							key={`line-${i}`}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\GraphControls.tsx:131:63 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    130 │ 	const handleNodeTypeToggle = (nodeType: string) => {
  > 131 │ 		const newNodeTypes = filters.nodeTypes.includes(nodeType as any)
        │ 		                                                            ^^^
    132 │ 			? filters.nodeTypes.filter((type) => type !== nodeType)
    133 │ 			: [...filters.nodeTypes, nodeType as any];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphControls.tsx:133:41 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    131 │ 		const newNodeTypes = filters.nodeTypes.includes(nodeType as any)
    132 │ 			? filters.nodeTypes.filter((type) => type !== nodeType)
  > 133 │ 			: [...filters.nodeTypes, nodeType as any];
        │ 			                                     ^^^
    134 │ 		setFilters({ nodeTypes: newNodeTypes });
    135 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphControls.tsx:138:69 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    137 │ 	const handleRelationshipTypeToggle = (relType: string) => {
  > 138 │ 		const newRelTypes = filters.relationshipTypes.includes(relType as any)
        │ 		                                                                  ^^^
    139 │ 			? filters.relationshipTypes.filter((type) => type !== relType)
    140 │ 			: [...filters.relationshipTypes, relType as any];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphControls.tsx:140:48 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    138 │ 		const newRelTypes = filters.relationshipTypes.includes(relType as any)
    139 │ 			? filters.relationshipTypes.filter((type) => type !== relType)
  > 140 │ 			: [...filters.relationshipTypes, relType as any];
        │ 			                                            ^^^
    141 │ 		setFilters({ relationshipTypes: newRelTypes });
    142 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphControls.tsx:146:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    144 │ 	const handleEvidenceLevelToggle = (evidenceLevel: string) => {
    145 │ 		const newEvidenceLevels = filters.evidenceLevels.includes(
  > 146 │ 			evidenceLevel as any,
        │ 			                 ^^^
    147 │ 		)
    148 │ 			? filters.evidenceLevels.filter((level) => level !== evidenceLevel)
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphControls.tsx:149:51 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    147 │ 		)
    148 │ 			? filters.evidenceLevels.filter((level) => level !== evidenceLevel)
  > 149 │ 			: [...filters.evidenceLevels, evidenceLevel as any];
        │ 			                                               ^^^
    150 │ 		setFilters({ evidenceLevels: newEvidenceLevels });
    151 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphControls.tsx:257:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    255 │ 								{/* Node Types */}
    256 │ 								<div className="space-y-2">
  > 257 │ 									<label className="font-medium text-sm">Typy węzłów:</label>
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    258 │ 									<div className="flex flex-wrap gap-2">
    259 │ 										{nodeTypeOptions.map((option) => {
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:262:29 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    260 │ 											const Icon = option.icon;
    261 │ 											const isSelected = filters.nodeTypes.includes(
  > 262 │ 												option.value as any,
        │ 												                ^^^
    263 │ 											);
    264 │ 											return (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphControls.tsx:286:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    284 │ 								{/* Relationship Types */}
    285 │ 								<div className="space-y-2">
  > 286 │ 									<label className="font-medium text-sm">Typy relacji:</label>
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    287 │ 									<div className="flex flex-wrap gap-2">
    288 │ 										{relationshipTypeOptions.map((option) => {
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:290:29 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    288 │ 										{relationshipTypeOptions.map((option) => {
    289 │ 											const isSelected = filters.relationshipTypes.includes(
  > 290 │ 												option.value as any,
        │ 												                ^^^
    291 │ 											);
    292 │ 											return (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphControls.tsx:315:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    313 │ 								{/* Evidence Levels */}
    314 │ 								<div className="space-y-2">
  > 315 │ 									<label className="font-medium text-sm">
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 316 │ 										Poziomy dowodów:
  > 317 │ 									</label>
        │ 									^^^^^^^^
    318 │ 									<div className="flex flex-wrap gap-2">
    319 │ 										{evidenceLevelOptions.map((option) => {
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:321:29 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    319 │ 										{evidenceLevelOptions.map((option) => {
    320 │ 											const isSelected = filters.evidenceLevels.includes(
  > 321 │ 												option.value as any,
        │ 												                ^^^
    322 │ 											);
    323 │ 											return (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphControls.tsx:346:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    344 │ 								{/* Strength Range */}
    345 │ 								<div className="space-y-2">
  > 346 │ 									<label className="font-medium text-sm">
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 347 │ 										Siła połączeń: {filters.minStrength.toFixed(2)} -{" "}
  > 348 │ 										{filters.maxStrength.toFixed(2)}
  > 349 │ 									</label>
        │ 									^^^^^^^^
    350 │ 									<Slider
    351 │ 										value={[filters.minStrength, filters.maxStrength]}
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:362:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    360 │ 								{/* Confidence */}
    361 │ 								<div className="space-y-2">
  > 362 │ 									<label className="font-medium text-sm">
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 363 │ 										Min. pewność: {filters.minConfidence.toFixed(2)}
  > 364 │ 									</label>
        │ 									^^^^^^^^
    365 │ 									<Slider
    366 │ 										value={[filters.minConfidence]}
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:390:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    388 │ 							<div className="space-y-4">
    389 │ 								<div className="space-y-2">
  > 390 │ 									<label className="font-medium text-sm">Układ grafu:</label>
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    391 │ 									<div className="grid grid-cols-1 gap-2">
    392 │ 										{layoutOptions.map((option) => (
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:399:56 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    397 │ 															layout === option.value ? "default" : "outline"
    398 │ 														}
  > 399 │ 														onClick={() => setLayout(option.value as any)}
        │ 														                                         ^^^
    400 │ 														className="justify-start text-left"
    401 │ 													>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphControls.tsx:413:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    411 │ 								{/* Physics */}
    412 │ 								<div className="flex items-center justify-between">
  > 413 │ 									<label className="font-medium text-sm">Fizyka:</label>
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    414 │ 									<Button
    415 │ 										variant={enablePhysics ? "default" : "outline"}
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:425:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    423 │ 								{/* Animation Speed */}
    424 │ 								<div className="space-y-2">
  > 425 │ 									<label className="font-medium text-sm">
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 426 │ 										Prędkość animacji: {animationSpeed.toFixed(1)}x
  > 427 │ 									</label>
        │ 									^^^^^^^^
    428 │ 									<Slider
    429 │ 										value={[animationSpeed]}
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:445:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    443 │ 								{/* View Mode */}
    444 │ 								<div className="space-y-2">
  > 445 │ 									<label className="font-medium text-sm">Tryb widoku:</label>
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    446 │ 									<div className="flex gap-2">
    447 │ 										{["overview", "focused", "detailed"].map((mode) => (
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:452:48 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    450 │ 												variant={viewMode === mode ? "default" : "outline"}
    451 │ 												size="sm"
  > 452 │ 												onClick={() => setViewMode(mode as any)}
        │ 												                                   ^^^
    453 │ 											>
    454 │ 												{mode === "overview"
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\GraphControls.tsx:466:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    464 │ 								{/* Labels */}
    465 │ 								<div className="flex items-center justify-between">
  > 466 │ 									<label className="font-medium text-sm">
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 467 │ 										Etykiety węzłów:
  > 468 │ 									</label>
        │ 									^^^^^^^^
    469 │ 									<Button
    470 │ 										variant={filters.showLabels ? "default" : "outline"}
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:485:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    484 │ 								<div className="flex items-center justify-between">
  > 485 │ 									<label className="font-medium text-sm">
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 486 │ 										Etykiety relacji:
  > 487 │ 									</label>
        │ 									^^^^^^^^
    488 │ 									<Button
    489 │ 										variant={
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:509:10 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    507 │ 								{/* Max Nodes */}
    508 │ 								<div className="space-y-2">
  > 509 │ 									<label className="font-medium text-sm">
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 510 │ 										Maks. węzłów: {maxRenderNodes}
  > 511 │ 									</label>
        │ 									^^^^^^^^
    512 │ 									<Slider
    513 │ 										value={[maxRenderNodes]}
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\GraphControls.tsx:526:12 lint/a11y/noLabelWithoutControl ━━━━━━━━━━━━━━━━━━━━

  × A form label must be associated with an input.
  
    524 │ 									<div className="space-y-2">
    525 │ 										<div className="flex items-center justify-between">
  > 526 │ 											<label className="font-medium text-sm">
        │ 											^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 527 │ 												Wybrane węzły ({selectedNodes.length}):
  > 528 │ 											</label>
        │ 											^^^^^^^^
    529 │ 											<Button
    530 │ 												variant="outline"
  
  i Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element.
  

.\src\components\graph\NodeDetails.tsx:298:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    296 │ 														.map((name, index) => (
    297 │ 															<Badge
  > 298 │ 																key={index}
        │ 																     ^^^^^
    299 │ 																variant="outline"
    300 │ 																className="text-xs"
  
  i This is the source of the key value.
  
    294 │ 													{supplement.polishCommonNames
    295 │ 														.slice(0, 3)
  > 296 │ 														.map((name, index) => (
        │ 														            ^^^^^
    297 │ 															<Badge
    298 │ 																key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\NodeDetails.tsx:322:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    320 │ 														.map((app, index) => (
    321 │ 															<Badge
  > 322 │ 																key={index}
        │ 																     ^^^^^
    323 │ 																variant="secondary"
    324 │ 																className="text-xs"
  
  i This is the source of the key value.
  
    318 │ 													{supplement.clinicalApplications
    319 │ 														.slice(0, 3)
  > 320 │ 														.map((app, index) => (
        │ 														           ^^^^^
    321 │ 															<Badge
    322 │ 																key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\NodeDetails.tsx:554:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    552 │ 									<div className="space-y-2">
    553 │ 										{supplement.activeCompounds.map((compound, index) => (
  > 554 │ 											<div key={index} className="rounded-lg bg-gray-50 p-2">
        │ 											          ^^^^^
    555 │ 												<div className="font-medium text-sm">
    556 │ 													{compound.polishName || compound.name}
  
  i This is the source of the key value.
  
    551 │ 									<h4 className="font-medium text-sm">Składniki aktywne:</h4>
    552 │ 									<div className="space-y-2">
  > 553 │ 										{supplement.activeCompounds.map((compound, index) => (
        │ 										                                           ^^^^^
    554 │ 											<div key={index} className="rounded-lg bg-gray-50 p-2">
    555 │ 												<div className="font-medium text-sm">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\NodeDetails.tsx:608:18 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    606 │ 										{supplement.sideEffects.slice(0, 3).map((effect, index) => (
    607 │ 											<div
  > 608 │ 												key={index}
        │ 												     ^^^^^
    609 │ 												className="flex items-center gap-2 text-sm"
    610 │ 											>
  
  i This is the source of the key value.
  
    604 │ 									</h4>
    605 │ 									<div className="space-y-1">
  > 606 │ 										{supplement.sideEffects.slice(0, 3).map((effect, index) => (
        │ 										                                                 ^^^^^
    607 │ 											<div
    608 │ 												key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\WebGLGraphVisualization.tsx:170:5 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    168 │ 		return (
    169 │ 			<group position={position}>
  > 170 │ 				<mesh
        │ 				^^^^^
  > 171 │ 					ref={meshRef}
         ...
  > 176 │ 					onPointerOut={() => onHover(false)}
  > 177 │ 				/>
        │ 				^^
    178 │ 
    179 │ 				{/* Polish label */}
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\components\graph\WebGLGraphVisualization.tsx:423:37 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    421 │ 				// Memory usage (if available)
    422 │ 				if ("memory" in performance) {
  > 423 │ 					const memory = (performance as any).memory;
        │ 					                               ^^^
    424 │ 					setMemoryUsage(memory.usedJSHeapSize / 1024 / 1024); // MB
    425 │ 				}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\examples\GraphExportImportExample.tsx:254:8 lint/a11y/noSvgWithoutTitle ━━━━━━━━━━

  × Alternative text title element cannot be empty
  
    252 │ 							className="flex h-24 flex-col items-center justify-center gap-2"
    253 │ 						>
  > 254 │ 							<svg
        │ 							^^^^
  > 255 │ 								className="h-6 w-6"
         ...
  > 259 │ 								xmlns="http://www.w3.org/2000/svg"
  > 260 │ 							>
        │ 							^
    261 │ 								<path
    262 │ 									strokeLinecap="round"
  
  i For accessibility purposes, SVGs should have an alternative text, provided via title element. If the svg element has role="img", you should add the aria-label or aria-labelledby attribute.
  

.\src\components\graph\VirtualizedGraphVisualization.tsx:321:14 lint/style/noNonNullAssertion ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    319 │ 				return {
    320 │ 					...rel,
  > 321 │ 					source: source!,
        │ 					        ^^^^^^^
    322 │ 					target: target!,
    323 │ 				};
  

.\src\components\graph\VirtualizedGraphVisualization.tsx:322:14 lint/style/noNonNullAssertion ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    320 │ 					...rel,
    321 │ 					source: source!,
  > 322 │ 					target: target!,
        │ 					        ^^^^^^^
    323 │ 				};
    324 │ 			},
  

.\src\components\graph\VirtualizedGraphVisualization.tsx:556:5 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    554 │ 			{/* Graph Canvas */}
    555 │ 			<div className="relative overflow-hidden rounded-lg border bg-gray-50">
  > 556 │ 				<canvas
        │ 				^^^^^^^
  > 557 │ 					ref={canvasRef}
         ...
  > 562 │ 					className="h-full w-full cursor-pointer"
  > 563 │ 				/>
        │ 				^^
    564 │ 			</div>
    565 │ 
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\components\graph\VirtualizedGraphVisualization.tsx:579:69 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    577 │ 							/>
    578 │ 							{selectedNode.polishName || selectedNode.name}
  > 579 │ 							<Badge variant={selectedNode.evidenceLevel?.toLowerCase() as any}>
        │ 							                                                             ^^^
    580 │ 								{selectedNode.evidenceLevel}
    581 │ 							</Badge>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\loading\SkeletonCard.tsx:72:15 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    70 │ 		<div className="space-y-4">
    71 │ 			{Array.from({ length: count }).map((_, i) => (
  > 72 │ 				<div key={i} className="flex items-center gap-4">
       │ 				          ^
    73 │ 					<div className="h-16 w-16 flex-shrink-0 animate-pulse rounded-lg bg-gray-200 dark:bg-gray-700" />
    74 │ 					<div className="flex-1 space-y-2">
  
  i This is the source of the key value.
  
    69 │ 	return (
    70 │ 		<div className="space-y-4">
  > 71 │ 			{Array.from({ length: count }).map((_, i) => (
       │ 			                                       ^
    72 │ 				<div key={i} className="flex items-center gap-4">
    73 │ 					<div className="h-16 w-16 flex-shrink-0 animate-pulse rounded-lg bg-gray-200 dark:bg-gray-700" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\loading\SkeletonCard.tsx:88:34 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    86 │ 		<div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
    87 │ 			{Array.from({ length: count }).map((_, i) => (
  > 88 │ 				<SkeletonSupplementCard key={i} />
       │ 				                             ^
    89 │ 			))}
    90 │ 		</div>
  
  i This is the source of the key value.
  
    85 │ 	return (
    86 │ 		<div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
  > 87 │ 			{Array.from({ length: count }).map((_, i) => (
       │ 			                                       ^
    88 │ 				<SkeletonSupplementCard key={i} />
    89 │ 			))}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\navigation\BreadcrumbNavigation.tsx:44:46 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    42 │ const pathMap: Record<
    43 │ 	string,
  > 44 │ 	{ title: string; icon?: React.ComponentType<any> }
       │ 	                                            ^^^
    45 │ > = {
    46 │ 	"/": { title: "Strona główna", icon: Home },
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\PerformanceMonitor.tsx:132:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    131 │ 			if ("memory" in performance) {
  > 132 │ 				const memory = (performance as any).memory;
        │ 				                               ^^^
    133 │ 				memoryUsage = memory.usedJSHeapSize / 1024 / 1024; // Convert to MB
    134 │ 				heapSize = memory.totalJSHeapSize / 1024 / 1024;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\PerformanceMonitor.tsx:225:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    223 │ 			if (issues.length > 0) {
    224 │ 				setPerformanceIssues((prev) => [...prev.slice(-9), ...issues]); // Keep last 10 issues
  > 225 │ 				issues.forEach((issue) => onPerformanceIssue?.(issue));
        │ 				^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    226 │ 			}
    227 │ 		},
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\graph\PerformanceMonitor.tsx:257:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    255 │ 			);
    256 │ 
  > 257 │ 			polishTexts.forEach((text) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 258 │ 				text.normalize("NFD").toLowerCase();
  > 259 │ 			});
        │ 			^^
    260 │ 
    261 │ 			const endTime = performance.now();
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\graph\PerformanceMonitor.tsx:323:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    321 │ 		const recommendations = new Set<string>();
    322 │ 
  > 323 │ 		recentIssues.forEach((issue) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 324 │ 			switch (issue.type) {
         ...
  > 338 │ 			}
  > 339 │ 		});
        │ 		^^
    340 │ 
    341 │ 		return Array.from(recommendations);
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\graph\PerformanceMonitor.tsx:326:6 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    324 │ 			switch (issue.type) {
    325 │ 				case "fps":
  > 326 │ 					optimizationTips.lowFps.forEach((tip) => recommendations.add(tip));
        │ 					^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    327 │ 					break;
    328 │ 				case "memory":
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\graph\PerformanceMonitor.tsx:329:6 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    327 │ 					break;
    328 │ 				case "memory":
  > 329 │ 					optimizationTips.highMemory.forEach((tip) =>
        │ 					^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 330 │ 						recommendations.add(tip),
  > 331 │ 					);
        │ 					^
    332 │ 					break;
    333 │ 				case "render":
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\graph\PerformanceMonitor.tsx:334:6 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    332 │ 					break;
    333 │ 				case "render":
  > 334 │ 					optimizationTips.slowRender.forEach((tip) =>
        │ 					^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 335 │ 						recommendations.add(tip),
  > 336 │ 					);
        │ 					^
    337 │ 					break;
    338 │ 			}
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\graph\PerformanceMonitor.tsx:486:15 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    484 │ 							{performanceIssues.slice(-3).map((issue, index) => (
    485 │ 								<Alert
  > 486 │ 									key={index}
        │ 									     ^^^^^
    487 │ 									className={
    488 │ 										issue.severity === "critical"
  
  i This is the source of the key value.
  
    482 │ 							</div>
    483 │ 
  > 484 │ 							{performanceIssues.slice(-3).map((issue, index) => (
        │ 							                                         ^^^^^
    485 │ 								<Alert
    486 │ 									key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\PerformanceMonitor.tsx:516:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    514 │ 									.slice(0, 3)
    515 │ 									.map((tip, index) => (
  > 516 │ 										<li key={index} className="flex items-start gap-2">
        │ 										         ^^^^^
    517 │ 											<span className="mt-1 text-blue-600">•</span>
    518 │ 											{tip}
  
  i This is the source of the key value.
  
    513 │ 								{getRecommendations()
    514 │ 									.slice(0, 3)
  > 515 │ 									.map((tip, index) => (
        │ 									           ^^^^^
    516 │ 										<li key={index} className="flex items-start gap-2">
    517 │ 											<span className="mt-1 text-blue-600">•</span>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\interactions\DrugInteractionChecker.tsx:765:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    763 │ 															{interaction.management.map((strategy, index) => (
    764 │ 																<div
  > 765 │ 																	key={index}
        │ 																	     ^^^^^
    766 │ 																	className="rounded-lg bg-blue-50 p-3"
    767 │ 																>
  
  i This is the source of the key value.
  
    761 │ 														</h4>
    762 │ 														<div className="space-y-2">
  > 763 │ 															{interaction.management.map((strategy, index) => (
        │ 															                                       ^^^^^
    764 │ 																<div
    765 │ 																	key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\interactions\DrugInteractionChecker.tsx:789:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    787 │ 																(param, index) => (
    788 │ 																	<div
  > 789 │ 																		key={index}
        │ 																		     ^^^^^
    790 │ 																		className="rounded-lg border p-3"
    791 │ 																	>
  
  i This is the source of the key value.
  
    785 │ 														<div className="space-y-3">
    786 │ 															{interaction.monitoringParameters.map(
  > 787 │ 																(param, index) => (
        │ 																        ^^^^^
    788 │ 																	<div
    789 │ 																		key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\interactions\DrugInteractionChecker.tsx:811:30 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    809 │ 																						(signal, signalIndex) => (
    810 │ 																							<li
  > 811 │ 																								key={signalIndex}
        │ 																								     ^^^^^^^^^^^
    812 │ 																								className="flex items-center gap-1"
    813 │ 																							>
  
  i This is the source of the key value.
  
    807 │ 																				<ul className="space-y-1 text-orange-600 text-sm">
    808 │ 																					{param.polishWarningSignals.map(
  > 809 │ 																						(signal, signalIndex) => (
        │ 																						         ^^^^^^^^^^^
    810 │ 																							<li
    811 │ 																								key={signalIndex}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\graph\VirtualizedNodeList.tsx:96:3 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
     95 │ 	return (
   > 96 │ 		<div
        │ 		^^^^
   > 97 │ 			style={style}
         ...
  > 103 │ 			onMouseLeave={() => onHover(false)}
  > 104 │ 		>
        │ 		^
    105 │ 			<div className="flex items-center gap-3">
    106 │ 				{/* Node Type Icon */}
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\components\graph\VirtualizedNodeList.tsx:245:54 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    243 │ 	// Flatten grouped nodes for virtualization
    244 │ 	const virtualItems = useMemo(() => {
  > 245 │ 		const items: Array<{ type: "group" | "node"; data: any; id: string }> = [];
        │ 		                                                   ^^^
    246 │ 
    247 │ 		groupedNodes.forEach((group) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\graph\VirtualizedNodeList.tsx:247:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    245 │ 		const items: Array<{ type: "group" | "node"; data: any; id: string }> = [];
    246 │ 
  > 247 │ 		groupedNodes.forEach((group) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 248 │ 			if (groupByType && group.type !== "ALL") {
         ...
  > 275 │ 			}
  > 276 │ 		});
        │ 		^^
    277 │ 
    278 │ 		return items;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\graph\VirtualizedNodeList.tsx:258:6 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    256 │ 				// Add nodes if group is expanded
    257 │ 				if (expandedGroups.has(group.type)) {
  > 258 │ 					group.nodes.forEach((node) => {
        │ 					^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 259 │ 						items.push({
         ...
  > 263 │ 						});
  > 264 │ 					});
        │ 					^^
    265 │ 				}
    266 │ 			} else {
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\graph\VirtualizedNodeList.tsx:268:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    266 │ 			} else {
    267 │ 				// Add all nodes without grouping
  > 268 │ 				group.nodes.forEach((node) => {
        │ 				^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 269 │ 					items.push({
         ...
  > 273 │ 					});
  > 274 │ 				});
        │ 				^^
    275 │ 			}
    276 │ 		});
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\graph\VirtualizedNodeList.tsx:449:11 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    447 │ 										}}
    448 │ 									>
  > 449 │ 										<div
        │ 										^^^^
  > 450 │ 											className="flex cursor-pointer items-center gap-2 bg-gray-100 p-2 hover:bg-gray-200"
  > 451 │ 											onClick={() => toggleGroup(groupData.type)}
  > 452 │ 										>
        │ 										^
    453 │ 											{isExpanded ? (
    454 │ 												<ChevronDown className="h-4 w-4" />
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\utils\api.ts:137:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    135 │ export async function analyzeSupplementInteractions(
    136 │ 	supplementIds: string[],
  > 137 │ ): Promise<ApiResponse<any>> {
        │                        ^^^
    138 │ 	try {
    139 │ 		// Simulate API delay
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\utils\api.ts:171:39 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    170 │ // Helper function for error handling
  > 171 │ export function handleApiError(error: any): string {
        │                                       ^^^
    172 │ 	if (typeof error === "string") {
    173 │ 		return error;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\interactions\InteractionVisualizationPanel.tsx:49:38 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    47 │ 	supplementIds: string[];
    48 │ 	medications?: { name: string; activeIngredient: string }[];
  > 49 │ 	onInteractionSelect?: (interaction: any) => void;
       │ 	                                    ^^^
    50 │ 	showMedicationInteractions?: boolean;
    51 │ 	className?: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\interactions\InteractionVisualizationPanel.tsx:71:65 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    69 │ 	const [showBeneficial, setShowBeneficial] = useState(true);
    70 │ 	const [showMinor, setShowMinor] = useState(true);
  > 71 │ 	const [selectedInteraction, setSelectedInteraction] = useState<any>(null);
       │ 	                                                               ^^^
    72 │ 	const [loading, setLoading] = useState(false);
    73 │ 	const canvasRef = useRef<HTMLCanvasElement>(null);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\interactions\InteractionVisualizationPanel.tsx:367:15 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    366 │ 													return (
  > 367 │ 														<td
        │ 														^^^
  > 368 │ 															key={idB}
         ...
  > 379 │ 															}
  > 380 │ 														>
        │ 														^
    381 │ 															{interaction && (
    382 │ 																<div className="flex items-center justify-center">
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\components\interactions\InteractionVisualizationPanel.tsx:431:64 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    429 │ 									<Select
    430 │ 										value={selectedLayout}
  > 431 │ 										onValueChange={(value) => setSelectedLayout(value as any)}
        │ 										                                                     ^^^
    432 │ 									>
    433 │ 										<SelectTrigger className="w-40">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\interactions\InteractionVisualizationPanel.tsx:280:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    278 │ 										{interactionMatrix.riskAssessment.polishContraindications.map(
    279 │ 											(warning, index) => (
  > 280 │ 												<li key={index} className="text-sm">
        │ 												         ^^^^^
    281 │ 													• {warning}
    282 │ 												</li>
  
  i This is the source of the key value.
  
    277 │ 									<ul className="mt-2 space-y-1">
    278 │ 										{interactionMatrix.riskAssessment.polishContraindications.map(
  > 279 │ 											(warning, index) => (
        │ 											          ^^^^^
    280 │ 												<li key={index} className="text-sm">
    281 │ 													• {warning}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\interactions\InteractionVisualizationPanel.tsx:497:16 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    495 │ 								{filteredInteractions.map((interaction, index) => (
    496 │ 									<Card
  > 497 │ 										key={index}
        │ 										     ^^^^^
    498 │ 										className="cursor-pointer transition-shadow hover:shadow-md"
    499 │ 									>
  
  i This is the source of the key value.
  
    494 │ 							<div className="space-y-3">
  > 495 │ 								{filteredInteractions.map((interaction, index) => (
        │ 								                                        ^^^^^
    496 │ 									<Card
    497 │ 										key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\interactions\InteractionVisualizationPanel.tsx:587:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    585 │ 							{interactionMatrix?.recommendations.map(
    586 │ 								(recommendation, index) => (
  > 587 │ 									<Card key={index}>
        │ 									           ^^^^^
    588 │ 										<CardHeader className="pb-2">
    589 │ 											<CardTitle className="flex items-center gap-2 text-sm">
  
  i This is the source of the key value.
  
    585 │ 							{interactionMatrix?.recommendations.map(
  > 586 │ 								(recommendation, index) => (
        │ 								                 ^^^^^
    587 │ 									<Card key={index}>
    588 │ 										<CardHeader className="pb-2">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\interactions\InteractionVisualizationPanel.tsx:642:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    640 │ 															(step, stepIndex) => (
    641 │ 																<li
  > 642 │ 																	key={stepIndex}
        │ 																	     ^^^^^^^^^
    643 │ 																	className="flex items-start gap-2"
    644 │ 																>
  
  i This is the source of the key value.
  
    638 │ 													<ul className="space-y-1 text-gray-600 text-xs">
    639 │ 														{recommendation.polishImplementationSteps.map(
  > 640 │ 															(step, stepIndex) => (
        │ 															       ^^^^^^^^^
    641 │ 																<li
    642 │ 																	key={stepIndex}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\learning\InteractiveLearningModule.tsx:109:30 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    107 │ 	currentSectionIndex: number;
    108 │ 	completedSections: string[];
  > 109 │ 	quizAnswers: Record<string, any>;
        │ 	                            ^^^
    110 │ 	quizScore: number;
    111 │ 	timeSpent: number;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\learning\InteractiveLearningModule.tsx:138:64 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    136 │ 		userProgress?.completedSections || [],
    137 │ 	);
  > 138 │ 	const [quizAnswers, setQuizAnswers] = useState<Record<string, any>>(
        │ 	                                                              ^^^
    139 │ 		userProgress?.quizAnswers || {},
    140 │ 	);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\learning\InteractiveLearningModule.tsx:186:3 lint/complexity/noForEach ━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    184 │ 		let earnedPoints = 0;
    185 │ 
  > 186 │ 		module.quiz.forEach((question) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 187 │ 			totalPoints += question.points;
         ...
  > 209 │ 			}
  > 210 │ 		});
        │ 		^^
    211 │ 
    212 │ 		return totalPoints > 0 ? (earnedPoints / totalPoints) * 100 : 0;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\learning\InteractiveLearningModule.tsx:238:68 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    236 │ 	}, [isFirstSection]);
    237 │ 
  > 238 │ 	const handleQuizAnswer = useCallback((questionId: string, answer: any) => {
        │ 	                                                                  ^^^
    239 │ 		setQuizAnswers((prev) => ({
    240 │ 			...prev,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\learning\InteractiveLearningModule.tsx:585:10 lint/a11y/useMediaCaption ━━━━━━━━━━━

  × Provide a track for captions when using audio or video elements.
  
    583 │ 							<div className="mt-4">
    584 │ 								{currentSection.type === "VIDEO" ? (
  > 585 │ 									<video controls className="w-full rounded-lg">
        │ 									^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 586 │ 										<source src={currentSection.mediaUrl} type="video/mp4" />
  > 587 │ 										Twoja przeglądarka nie obsługuje odtwarzania wideo.
  > 588 │ 									</video>
        │ 									^^^^^^^^
    589 │ 								) : (
    590 │ 									<img
  
  i Captions support users with hearing-impairments. They should be a transcription or translation of the dialogue, sound effects, musical cues, and other relevant audio information.
  

.\src\components\learning\InteractiveLearningModule.tsx:155:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: module.id
  
    154 │ 	// Update progress when state changes
  > 155 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    156 │ 		const progress: UserProgress = {
    157 │ 			moduleId: module.id,
  
  i This dependency is not specified in the hook dependency list.
  
    155 │ 	useEffect(() => {
    156 │ 		const progress: UserProgress = {
  > 157 │ 			moduleId: module.id,
        │ 			          ^^^^^^^^^
    158 │ 			currentSectionIndex,
    159 │ 			completedSections,
  

.\src\components\learning\InteractiveLearningModule.tsx:155:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: showQuizResults
  
    154 │ 	// Update progress when state changes
  > 155 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    156 │ 		const progress: UserProgress = {
    157 │ 			moduleId: module.id,
  
  i This dependency is not specified in the hook dependency list.
  
    162 │ 			timeSpent,
    163 │ 			startedAt: startTime,
  > 164 │ 			attempts: (userProgress?.attempts || 0) + (showQuizResults ? 1 : 0),
        │ 			                                           ^^^^^^^^^^^^^^^
    165 │ 		};
    166 │ 
  

.\src\components\learning\InteractiveLearningModule.tsx:155:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: userProgress?.attempts
  
    154 │ 	// Update progress when state changes
  > 155 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    156 │ 		const progress: UserProgress = {
    157 │ 			moduleId: module.id,
  
  i This dependency is not specified in the hook dependency list.
  
    162 │ 			timeSpent,
    163 │ 			startedAt: startTime,
  > 164 │ 			attempts: (userProgress?.attempts || 0) + (showQuizResults ? 1 : 0),
        │ 			           ^^^^^^^^^^^^^^^^^^^^^^
    165 │ 		};
    166 │ 
  

.\src\components\learning\InteractiveLearningModule.tsx:155:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: onProgressUpdate
  
    154 │ 	// Update progress when state changes
  > 155 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    156 │ 		const progress: UserProgress = {
    157 │ 			moduleId: module.id,
  
  i This dependency is not specified in the hook dependency list.
  
    165 │ 		};
    166 │ 
  > 167 │ 		onProgressUpdate(progress);
        │ 		^^^^^^^^^^^^^^^^
    168 │ 	}, [currentSectionIndex, completedSections, quizAnswers, timeSpent]);
    169 │ 
  

.\src\components\learning\InteractiveLearningModule.tsx:155:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook does not specify all of its dependencies: startTime
  
    154 │ 	// Update progress when state changes
  > 155 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    156 │ 		const progress: UserProgress = {
    157 │ 			moduleId: module.id,
  
  i This dependency is not specified in the hook dependency list.
  
    161 │ 			quizScore: calculateQuizScore(),
    162 │ 			timeSpent,
  > 163 │ 			startedAt: startTime,
        │ 			           ^^^^^^^^^
    164 │ 			attempts: (userProgress?.attempts || 0) + (showQuizResults ? 1 : 0),
    165 │ 		};
  

.\src\components\learning\InteractiveLearningModule.tsx:576:9 lint/security/noDangerouslySetInnerHtml ━━━━━━━━━━

  × Avoid passing content using the dangerouslySetInnerHTML prop.
  
    574 │ 						<div className="prose prose-sm max-w-none">
    575 │ 							<div
  > 576 │ 								dangerouslySetInnerHTML={{
        │ 								^^^^^^^^^^^^^^^^^^^^^^^
    577 │ 									__html: currentSection.polishContent,
    578 │ 								}}
  
  ! Setting content using code can expose users to cross-site scripting (XSS) attacks
  

.\src\components\supplements\InteractionMatrix.tsx:9:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
     8 │ export interface InteractionMatrixProps {
   > 9 │ 	supplements?: any[];
       │ 	              ^^^
    10 │ 	interactions?: any[];
    11 │ 	onInteractionCheck?: (s1: string, s2: string) => void;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\InteractionMatrix.tsx:10:17 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
     8 │ export interface InteractionMatrixProps {
     9 │ 	supplements?: any[];
  > 10 │ 	interactions?: any[];
       │ 	               ^^^
    11 │ 	onInteractionCheck?: (s1: string, s2: string) => void;
    12 │ 	className?: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\InteractionMatrix.tsx:78:13 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    76 │ 					{mockInteractions.map((interaction, index) => (
    77 │ 						<div
  > 78 │ 							key={index}
       │ 							     ^^^^^
    79 │ 							className="flex items-center justify-between rounded-lg border p-3"
    80 │ 						>
  
  i This is the source of the key value.
  
    74 │ 			<CardContent>
    75 │ 				<div className="space-y-4">
  > 76 │ 					{mockInteractions.map((interaction, index) => (
       │ 					                                    ^^^^^
    77 │ 						<div
    78 │ 							key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\stack-builder\StackBuilder.tsx:252:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    250 │ 	const totalDosages = useMemo(() => {
    251 │ 		const totals: Record<string, { amount: number; unit: string }> = {};
  > 252 │ 		stack.forEach((supplement) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 253 │ 			if (!totals[supplement.category]) {
  > 254 │ 				totals[supplement.category] = { amount: 0, unit: supplement.unit };
  > 255 │ 			}
  > 256 │ 			totals[supplement.category]!.amount += supplement.dosage;
  > 257 │ 		});
        │ 		^^
    258 │ 		return totals;
    259 │ 	}, [stack]);
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\stack-builder\StackBuilder.tsx:256:4 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    254 │ 				totals[supplement.category] = { amount: 0, unit: supplement.unit };
    255 │ 			}
  > 256 │ 			totals[supplement.category]!.amount += supplement.dosage;
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    257 │ 		});
    258 │ 		return totals;
  

.\src\components\stack-builder\StackBuilder.tsx:243:23 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook specifies more dependencies than necessary: stack
  
    242 │ 	// Calculate interactions
  > 243 │ 	const interactions = useMemo<Interaction[]>(() => {
        │ 	                     ^^^^^^^
    244 │ 		// This would be calculated based on supplement data
    245 │ 		// For now, return empty array
  
  i This dependency can be removed from the list.
  
    245 │ 		// For now, return empty array
    246 │ 		return [];
  > 247 │ 	}, [stack]);
        │ 	    ^^^^^
    248 │ 
    249 │ 	// Calculate total daily dosages
  

.\src\components\supplements\SafetyChecker.tsx:10:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
     9 │ export interface SafetyCheckerProps {
  > 10 │ 	supplements?: any[];
       │ 	              ^^^
    11 │ 	onSafetyIssue?: (issue: unknown) => void;
    12 │ 	className?: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\SafetyChecker.tsx:96:15 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    94 │ 							return (
    95 │ 								<div
  > 96 │ 									key={index}
       │ 									     ^^^^^
    97 │ 									className="flex items-start gap-3 rounded-lg border p-3"
    98 │ 								>
  
  i This is the source of the key value.
  
    90 │ 					<div className="space-y-3">
    91 │ 						<h4 className="font-medium">Sprawdzenia bezpieczeństwa</h4>
  > 92 │ 						{mockSafetyChecks.map((check, index) => {
       │ 						                              ^^^^^
    93 │ 							const IconComponent = check.icon;
    94 │ 							return (
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SafetyChecker.tsx:117:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    115 │ 						<h4 className="font-medium">Przeciwwskazania</h4>
    116 │ 						{mockContraindications.map((item, index) => (
  > 117 │ 							<Alert key={index}>
        │ 							            ^^^^^
    118 │ 								<AlertTriangle className="h-4 w-4" />
    119 │ 								<AlertDescription>
  
  i This is the source of the key value.
  
    114 │ 					<div className="space-y-3">
    115 │ 						<h4 className="font-medium">Przeciwwskazania</h4>
  > 116 │ 						{mockContraindications.map((item, index) => (
        │ 						                                  ^^^^^
    117 │ 							<Alert key={index}>
    118 │ 								<AlertTriangle className="h-4 w-4" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\CognitiveBiasDetector.tsx:605:19 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    603 │ 											(step, index) => (
    604 │ 												<div
  > 605 │ 													key={index}
        │ 													     ^^^^^
    606 │ 													className="flex items-start gap-2 text-sm"
    607 │ 												>
  
  i This is the source of the key value.
  
    601 │ 									<div className="space-y-2">
    602 │ 										{currentScenario.mitigation.polishSteps.map(
  > 603 │ 											(step, index) => (
        │ 											       ^^^^^
    604 │ 												<div
    605 │ 													key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\CognitiveBiasDetector.tsx:643:19 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    641 │ 						{currentScenario.supplementContext.polishPreventionTips.map(
    642 │ 							(tip, index) => (
  > 643 │ 								<div key={index} className="flex items-start gap-2 text-sm">
        │ 								          ^^^^^
    644 │ 									<CheckCircle className="mt-0.5 h-4 w-4 flex-shrink-0 text-green-600" />
    645 │ 									<span>{tip}</span>
  
  i This is the source of the key value.
  
    640 │ 					<div className="space-y-3">
    641 │ 						{currentScenario.supplementContext.polishPreventionTips.map(
  > 642 │ 							(tip, index) => (
        │ 							      ^^^^^
    643 │ 								<div key={index} className="flex items-start gap-2 text-sm">
    644 │ 									<CheckCircle className="mt-0.5 h-4 w-4 flex-shrink-0 text-green-600" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\learning\ResearchStudyCard.tsx:337:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    335 │ 							.slice(0, 3)
    336 │ 							.map((condition, index) => (
  > 337 │ 								<Badge key={index} variant="secondary" className="text-xs">
        │ 								            ^^^^^
    338 │ 									{condition}
    339 │ 								</Badge>
  
  i This is the source of the key value.
  
    334 │ 						{study.polishConditionsStudied
    335 │ 							.slice(0, 3)
  > 336 │ 							.map((condition, index) => (
        │ 							                 ^^^^^
    337 │ 								<Badge key={index} variant="secondary" className="text-xs">
    338 │ 									{condition}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\learning\ResearchStudyCard.tsx:423:18 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    421 │ 										{study.interventions.map((intervention, index) => (
    422 │ 											<div
  > 423 │ 												key={index}
        │ 												     ^^^^^
    424 │ 												className="flex items-center justify-between rounded bg-gray-50 p-2"
    425 │ 											>
  
  i This is the source of the key value.
  
    419 │ 									</h4>
    420 │ 									<div className="space-y-2">
  > 421 │ 										{study.interventions.map((intervention, index) => (
        │ 										                                        ^^^^^
    422 │ 											<div
    423 │ 												key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\learning\ResearchStudyCard.tsx:456:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    454 │ 											.filter((outcome) => outcome.type === "PRIMARY")
    455 │ 											.map((outcome, index) => (
  > 456 │ 												<div key={index} className="rounded-lg border p-3">
        │ 												          ^^^^^
    457 │ 													<div className="mb-2 flex items-center justify-between">
    458 │ 														<h5 className="font-medium text-sm">
  
  i This is the source of the key value.
  
    453 │ 										{study.outcomeMeasures
    454 │ 											.filter((outcome) => outcome.type === "PRIMARY")
  > 455 │ 											.map((outcome, index) => (
        │ 											               ^^^^^
    456 │ 												<div key={index} className="rounded-lg border p-3">
    457 │ 													<div className="mb-2 flex items-center justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\learning\ResearchStudyCard.tsx:584:18 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    582 │ 										{study.qualityAssessment.domains.map((domain, index) => (
    583 │ 											<div
  > 584 │ 												key={index}
        │ 												     ^^^^^
    585 │ 												className="flex items-center justify-between rounded border p-2"
    586 │ 											>
  
  i This is the source of the key value.
  
    580 │ 									</h5>
    581 │ 									<div className="space-y-2">
  > 582 │ 										{study.qualityAssessment.domains.map((domain, index) => (
        │ 										                                              ^^^^^
    583 │ 											<div
    584 │ 												key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\learning\ResearchStudyCard.tsx:606:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    604 │ 											{study.qualityAssessment.polishStrengths.map(
    605 │ 												(strength, index) => (
  > 606 │ 													<li key={index} className="flex items-start gap-2">
        │ 													         ^^^^^
    607 │ 														<div className="mt-2 h-1 w-1 flex-shrink-0 rounded-full bg-green-600" />
    608 │ 														{strength}
  
  i This is the source of the key value.
  
    603 │ 										<ul className="space-y-1 text-gray-700 text-sm">
    604 │ 											{study.qualityAssessment.polishStrengths.map(
  > 605 │ 												(strength, index) => (
        │ 												           ^^^^^
    606 │ 													<li key={index} className="flex items-start gap-2">
    607 │ 														<div className="mt-2 h-1 w-1 flex-shrink-0 rounded-full bg-green-600" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\learning\ResearchStudyCard.tsx:625:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    623 │ 											{study.qualityAssessment.polishLimitations.map(
    624 │ 												(limitation, index) => (
  > 625 │ 													<li key={index} className="flex items-start gap-2">
        │ 													         ^^^^^
    626 │ 														<div className="mt-2 h-1 w-1 flex-shrink-0 rounded-full bg-orange-600" />
    627 │ 														{limitation}
  
  i This is the source of the key value.
  
    622 │ 										<ul className="space-y-1 text-gray-700 text-sm">
    623 │ 											{study.qualityAssessment.polishLimitations.map(
  > 624 │ 												(limitation, index) => (
        │ 												             ^^^^^
    625 │ 													<li key={index} className="flex items-start gap-2">
    626 │ 														<div className="mt-2 h-1 w-1 flex-shrink-0 rounded-full bg-orange-600" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\learning\ResearchStudyCard.tsx:708:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    706 │ 									<div className="flex flex-wrap gap-1">
    707 │ 										{study.polishKeywords.map((keyword, index) => (
  > 708 │ 											<Badge key={index} variant="outline" className="text-xs">
        │ 											            ^^^^^
    709 │ 												{keyword}
    710 │ 											</Badge>
  
  i This is the source of the key value.
  
    705 │ 									<h5 className="mb-2 font-medium text-sm">Słowa kluczowe</h5>
    706 │ 									<div className="flex flex-wrap gap-1">
  > 707 │ 										{study.polishKeywords.map((keyword, index) => (
        │ 										                                    ^^^^^
    708 │ 											<Badge key={index} variant="outline" className="text-xs">
    709 │ 												{keyword}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\HabitFormationTracker.tsx:332:38 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    330 │ 	};
    331 │ 
  > 332 │ 	const renderHabitCard = (habitStat: any) => {
        │ 	                                    ^^^
    333 │ 		const habit = habitStat;
    334 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\psychology\HabitFormationTracker.tsx:639:27 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    637 │ 											<div className="space-y-2">
    638 │ 												{habit.relatedSupplements.map(
  > 639 │ 													(supplement: any, index: number) => (
        │ 													             ^^^
    640 │ 														<div
    641 │ 															key={index}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\psychology\HabitFormationTracker.tsx:664:26 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    662 │ 											<div className="space-y-2">
    663 │ 												{habit.relatedTechniques.map(
  > 664 │ 													(technique: any, index: number) => (
        │ 													            ^^^
    665 │ 														<div
    666 │ 															key={index}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\psychology\HabitFormationTracker.tsx:768:32 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    766 │ 							<Select
    767 │ 								value={viewMode}
  > 768 │ 								onValueChange={(value: any) => setViewMode(value)}
        │ 								                       ^^^
    769 │ 							>
    770 │ 								<SelectTrigger className="w-32">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\psychology\HabitFormationTracker.tsx:553:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    551 │ 													(trigger: string, index: number) => (
    552 │ 														<Badge
  > 553 │ 															key={index}
        │ 															     ^^^^^
    554 │ 															variant="secondary"
    555 │ 															className="text-xs"
  
  i This is the source of the key value.
  
    549 │ 											<div className="flex flex-wrap gap-1">
    550 │ 												{habit.formationStrategy.polishEnvironmentalTriggers.map(
  > 551 │ 													(trigger: string, index: number) => (
        │ 													                  ^^^^^
    552 │ 														<Badge
    553 │ 															key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\HabitFormationTracker.tsx:579:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    577 │ 													(time: string, index: number) => (
    578 │ 														<Badge
  > 579 │ 															key={index}
        │ 															     ^^^^^
    580 │ 															className="bg-green-100 text-green-800 text-xs"
    581 │ 														>
  
  i This is the source of the key value.
  
    575 │ 											<div className="flex flex-wrap gap-1">
    576 │ 												{habit.insights.polishBestPerformanceTimes.map(
  > 577 │ 													(time: string, index: number) => (
        │ 													               ^^^^^
    578 │ 														<Badge
    579 │ 															key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\HabitFormationTracker.tsx:599:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    597 │ 												{habit.insights.polishChallengingScenarios.map(
    598 │ 													(scenario: string, index: number) => (
  > 599 │ 														<li key={index} className="flex items-start gap-2">
        │ 														         ^^^^^
    600 │ 															<span className="mt-0.5 text-orange-600">!</span>
    601 │ 															{scenario}
  
  i This is the source of the key value.
  
    596 │ 											<ul className="space-y-1 text-gray-700 text-sm">
    597 │ 												{habit.insights.polishChallengingScenarios.map(
  > 598 │ 													(scenario: string, index: number) => (
        │ 													                   ^^^^^
    599 │ 														<li key={index} className="flex items-start gap-2">
    600 │ 															<span className="mt-0.5 text-orange-600">!</span>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\HabitFormationTracker.tsx:618:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    616 │ 												{habit.insights.polishMotivationalFactors.map(
    617 │ 													(factor: string, index: number) => (
  > 618 │ 														<li key={index} className="flex items-start gap-2">
        │ 														         ^^^^^
    619 │ 															<CheckCircle className="mt-0.5 h-3 w-3 flex-shrink-0 text-green-600" />
    620 │ 															{factor}
  
  i This is the source of the key value.
  
    615 │ 											<ul className="space-y-1 text-gray-700 text-sm">
    616 │ 												{habit.insights.polishMotivationalFactors.map(
  > 617 │ 													(factor: string, index: number) => (
        │ 													                 ^^^^^
    618 │ 														<li key={index} className="flex items-start gap-2">
    619 │ 															<CheckCircle className="mt-0.5 h-3 w-3 flex-shrink-0 text-green-600" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\HabitFormationTracker.tsx:641:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    639 │ 													(supplement: any, index: number) => (
    640 │ 														<div
  > 641 │ 															key={index}
        │ 															     ^^^^^
    642 │ 															className="flex items-center justify-between rounded border p-2"
    643 │ 														>
  
  i This is the source of the key value.
  
    637 │ 											<div className="space-y-2">
    638 │ 												{habit.relatedSupplements.map(
  > 639 │ 													(supplement: any, index: number) => (
        │ 													                  ^^^^^
    640 │ 														<div
    641 │ 															key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\HabitFormationTracker.tsx:666:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    664 │ 													(technique: any, index: number) => (
    665 │ 														<div
  > 666 │ 															key={index}
        │ 															     ^^^^^
    667 │ 															className="flex items-center justify-between rounded border p-2"
    668 │ 														>
  
  i This is the source of the key value.
  
    662 │ 											<div className="space-y-2">
    663 │ 												{habit.relatedTechniques.map(
  > 664 │ 													(technique: any, index: number) => (
        │ 													                 ^^^^^
    665 │ 														<div
    666 │ 															key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SynergyAnalyzer.tsx:10:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
     9 │ export interface SynergyAnalyzerProps {
  > 10 │ 	supplements?: any[];
       │ 	              ^^^
    11 │ 	synergies?: any[];
    12 │ 	onSynergyIdentified?: (synergy: unknown) => void;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\SynergyAnalyzer.tsx:11:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
     9 │ export interface SynergyAnalyzerProps {
    10 │ 	supplements?: any[];
  > 11 │ 	synergies?: any[];
       │ 	            ^^^
    12 │ 	onSynergyIdentified?: (synergy: unknown) => void;
    13 │ 	className?: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\SynergyAnalyzer.tsx:75:17 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    73 │ 				<div className="space-y-6">
    74 │ 					{mockSynergies.map((synergy, index) => (
  > 75 │ 						<div key={index} className="space-y-3 rounded-lg border p-4">
       │ 						          ^^^^^
    76 │ 							<div className="flex items-center justify-between">
    77 │ 								<div className="flex items-center gap-2">
  
  i This is the source of the key value.
  
    72 │ 			<CardContent>
    73 │ 				<div className="space-y-6">
  > 74 │ 					{mockSynergies.map((synergy, index) => (
       │ 					                             ^^^^^
    75 │ 						<div key={index} className="space-y-3 rounded-lg border p-4">
    76 │ 							<div className="flex items-center justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:32:16 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    31 │ export interface EnhancedSupplementDashboardProps {
  > 32 │ 	supplements?: any[];
       │ 	              ^^^
    33 │ 	onSupplementSelect?: (supplement: any) => void;
    34 │ 	className?: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:33:36 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    31 │ export interface EnhancedSupplementDashboardProps {
    32 │ 	supplements?: any[];
  > 33 │ 	onSupplementSelect?: (supplement: any) => void;
       │ 	                                  ^^^
    34 │ 	className?: string;
    35 │ }
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:79:48 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    77 │ 	};
    78 │ 
  > 79 │ 	const handleInteractionSelect = (interaction: any) => {
       │ 	                                              ^^^
    80 │ 		console.log("Selected interaction:", interaction);
    81 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:98:26 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
     96 │ 					total +
     97 │ 					supplement.clinicalApplications.reduce(
   > 98 │ 						(sum: number, app: any) => sum + (app.effectivenessRating || 0),
        │ 						                   ^^^
     99 │ 						0,
    100 │ 					) /
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:108:23 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    107 │ 	const getPotentialInteractions = () => {
  > 108 │ 		const interactions: any[] = [];
        │ 		                    ^^^
    109 │ 		selectedSupplements.forEach((supplement: any) => {
    110 │ 			supplement.interactions.forEach((interaction: any) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:109:3 lint/complexity/noForEach ━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    107 │ 	const getPotentialInteractions = () => {
    108 │ 		const interactions: any[] = [];
  > 109 │ 		selectedSupplements.forEach((supplement: any) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 110 │ 			supplement.interactions.forEach((interaction: any) => {
         ...
  > 123 │ 			});
  > 124 │ 		});
        │ 		^^
    125 │ 		return interactions;
    126 │ 	};
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:109:44 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    107 │ 	const getPotentialInteractions = () => {
    108 │ 		const interactions: any[] = [];
  > 109 │ 		selectedSupplements.forEach((supplement: any) => {
        │ 		                                         ^^^
    110 │ 			supplement.interactions.forEach((interaction: any) => {
    111 │ 				const targetSupplement = selectedSupplements.find(
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:110:4 lint/complexity/noForEach ━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    108 │ 		const interactions: any[] = [];
    109 │ 		selectedSupplements.forEach((supplement: any) => {
  > 110 │ 			supplement.interactions.forEach((interaction: any) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 111 │ 				const targetSupplement = selectedSupplements.find(
         ...
  > 122 │ 				}
  > 123 │ 			});
        │ 			^^
    124 │ 		});
    125 │ 		return interactions;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:110:50 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    108 │ 		const interactions: any[] = [];
    109 │ 		selectedSupplements.forEach((supplement: any) => {
  > 110 │ 			supplement.interactions.forEach((interaction: any) => {
        │ 			                                              ^^^
    111 │ 				const targetSupplement = selectedSupplements.find(
    112 │ 					(s) =>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:174:61 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    172 │ 						<div className="lg:col-span-2">
    173 │ 							<div className="grid grid-cols-1 gap-4">
  > 174 │ 								{allSupplementProfiles.slice(0, 3).map((supplement: any) => (
        │ 								                                                    ^^^
    175 │ 									<div key={supplement.id} className="relative">
    176 │ 										<ComprehensiveSupplementCard
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:177:38 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    175 │ 									<div key={supplement.id} className="relative">
    176 │ 										<ComprehensiveSupplementCard
  > 177 │ 											supplement={supplement as any}
        │ 											                          ^^^
    178 │ 											onAddToStack={(id: string) => handleSupplementSelect(id)}
    179 │ 											onViewInteractions={(id: string) => handleViewDetails(id)}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\EnhancedSupplementDashboard.tsx:441:40 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    439 │ 			{selectedSupplement && (
    440 │ 				<SupplementDetailPanel
  > 441 │ 					supplement={selectedSupplement as any}
        │ 					                                  ^^^
    442 │ 					isOpen={!!selectedSupplement}
    443 │ 					onClose={() => setSelectedSupplementForDetails(null)}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:965:32 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    963 │ 							<Select
    964 │ 								value={sortBy}
  > 965 │ 								onValueChange={(value: any) => setSortBy(value)}
        │ 								                       ^^^
    966 │ 							>
    967 │ 								<SelectTrigger>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:582:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    580 │ 												(scenario, index) => (
    581 │ 													<Badge
  > 582 │ 														key={index}
        │ 														     ^^^^^
    583 │ 														variant="secondary"
    584 │ 														className="text-xs"
  
  i This is the source of the key value.
  
    578 │ 										<div className="flex flex-wrap gap-1">
    579 │ 											{technique.effectiveness.polishApplicabilityScenarios.map(
  > 580 │ 												(scenario, index) => (
        │ 												           ^^^^^
    581 │ 													<Badge
    582 │ 														key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:601:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    599 │ 										<div className="space-y-3">
    600 │ 											{technique.methodology.steps.map((step, index) => (
  > 601 │ 												<div key={index} className="rounded-lg border p-3">
        │ 												          ^^^^^
    602 │ 													<div className="mb-2 flex items-center gap-2">
    603 │ 														<span className="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 font-medium text-blue-800 text-xs">
  
  i This is the source of the key value.
  
    598 │ 										</h4>
    599 │ 										<div className="space-y-3">
  > 600 │ 											{technique.methodology.steps.map((step, index) => (
        │ 											                                        ^^^^^
    601 │ 												<div key={index} className="rounded-lg border p-3">
    602 │ 													<div className="mb-2 flex items-center gap-2">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:627:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    625 │ 																{step.polishTips.map((tip, tipIndex) => (
    626 │ 																	<li
  > 627 │ 																		key={tipIndex}
        │ 																		     ^^^^^^^^
    628 │ 																		className="flex items-start gap-1"
    629 │ 																	>
  
  i This is the source of the key value.
  
    623 │ 															</h6>
    624 │ 															<ul className="space-y-1 text-gray-600 text-xs">
  > 625 │ 																{step.polishTips.map((tip, tipIndex) => (
        │ 																                           ^^^^^^^^
    626 │ 																	<li
    627 │ 																		key={tipIndex}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:648:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    646 │ 												{technique.methodology.polishRequirements.map(
    647 │ 													(req, index) => (
  > 648 │ 														<li key={index} className="flex items-start gap-2">
        │ 														         ^^^^^
    649 │ 															<CheckCircle className="mt-0.5 h-3 w-3 flex-shrink-0 text-green-600" />
    650 │ 															{req}
  
  i This is the source of the key value.
  
    645 │ 											<ul className="space-y-1 text-gray-700 text-sm">
    646 │ 												{technique.methodology.polishRequirements.map(
  > 647 │ 													(req, index) => (
        │ 													      ^^^^^
    648 │ 														<li key={index} className="flex items-start gap-2">
    649 │ 															<CheckCircle className="mt-0.5 h-3 w-3 flex-shrink-0 text-green-600" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:662:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    660 │ 												{technique.methodology.polishTools.map(
    661 │ 													(tool, index) => (
  > 662 │ 														<li key={index} className="flex items-start gap-2">
        │ 														         ^^^^^
    663 │ 															<Target className="mt-0.5 h-3 w-3 flex-shrink-0 text-blue-600" />
    664 │ 															{tool}
  
  i This is the source of the key value.
  
    659 │ 											<ul className="space-y-1 text-gray-700 text-sm">
    660 │ 												{technique.methodology.polishTools.map(
  > 661 │ 													(tool, index) => (
        │ 													       ^^^^^
    662 │ 														<li key={index} className="flex items-start gap-2">
    663 │ 															<Target className="mt-0.5 h-3 w-3 flex-shrink-0 text-blue-600" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:691:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    689 │ 												(principle, index) => (
    690 │ 													<Badge
  > 691 │ 														key={index}
        │ 														     ^^^^^
    692 │ 														variant="outline"
    693 │ 														className="text-xs"
  
  i This is the source of the key value.
  
    687 │ 										<div className="flex flex-wrap gap-1">
    688 │ 											{technique.scientificBasis.polishPsychologicalPrinciples.map(
  > 689 │ 												(principle, index) => (
        │ 												            ^^^^^
    690 │ 													<Badge
    691 │ 														key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:712:25 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    710 │ 													.slice(0, 2)
    711 │ 													.map((study, index) => (
  > 712 │ 														<div key={index} className="rounded-lg border p-3">
        │ 														          ^^^^^
    713 │ 															<h5 className="font-medium text-sm">
    714 │ 																{study.polishTitle}
  
  i This is the source of the key value.
  
    709 │ 												{technique.scientificBasis.researchStudies
    710 │ 													.slice(0, 2)
  > 711 │ 													.map((study, index) => (
        │ 													             ^^^^^
    712 │ 														<div key={index} className="rounded-lg border p-3">
    713 │ 															<h5 className="font-medium text-sm">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:752:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    750 │ 											{technique.implementation.polishCommonMistakes.map(
    751 │ 												(mistake, index) => (
  > 752 │ 													<li key={index} className="flex items-start gap-2">
        │ 													         ^^^^^
    753 │ 														<span className="mt-0.5 text-red-600">!</span>
    754 │ 														{mistake}
  
  i This is the source of the key value.
  
    749 │ 										<ul className="space-y-1 text-gray-700 text-sm">
    750 │ 											{technique.implementation.polishCommonMistakes.map(
  > 751 │ 												(mistake, index) => (
        │ 												          ^^^^^
    752 │ 													<li key={index} className="flex items-start gap-2">
    753 │ 														<span className="mt-0.5 text-red-600">!</span>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:769:25 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    767 │ 												{technique.implementation.troubleshooting.map(
    768 │ 													(item, index) => (
  > 769 │ 														<div key={index} className="rounded-lg border p-3">
        │ 														          ^^^^^
    770 │ 															<h5 className="font-medium text-orange-800 text-sm">
    771 │ 																{item.polishProblem}
  
  i This is the source of the key value.
  
    766 │ 											<div className="space-y-2">
    767 │ 												{technique.implementation.troubleshooting.map(
  > 768 │ 													(item, index) => (
        │ 													       ^^^^^
    769 │ 														<div key={index} className="rounded-lg border p-3">
    770 │ 															<h5 className="font-medium text-orange-800 text-sm">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:792:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    790 │ 											<div className="space-y-3">
    791 │ 												{technique.supplementSynergies.map((synergy, index) => (
  > 792 │ 													<div key={index} className="rounded-lg border p-3">
        │ 													          ^^^^^
    793 │ 														<div className="mb-2 flex items-center justify-between">
    794 │ 															<h5 className="font-medium text-sm">
  
  i This is the source of the key value.
  
    789 │ 											</h4>
    790 │ 											<div className="space-y-3">
  > 791 │ 												{technique.supplementSynergies.map((synergy, index) => (
        │ 												                                             ^^^^^
    792 │ 													<div key={index} className="rounded-lg border p-3">
    793 │ 														<div className="mb-2 flex items-center justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\psychology\ProductivityTechniqueBrowser.tsx:837:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    835 │ 											<div className="space-y-2">
    836 │ 												{technique.trackingMetrics.map((metric, index) => (
  > 837 │ 													<div key={index} className="rounded-lg border p-3">
        │ 													          ^^^^^
    838 │ 														<h5 className="font-medium text-sm">
    839 │ 															{metric.polishMetric}
  
  i This is the source of the key value.
  
    834 │ 											</h4>
    835 │ 											<div className="space-y-2">
  > 836 │ 												{technique.trackingMetrics.map((metric, index) => (
        │ 												                                        ^^^^^
    837 │ 													<div key={index} className="rounded-lg border p-3">
    838 │ 														<h5 className="font-medium text-sm">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\recommendations\AIRecommendationInterface.tsx:305:31 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    303 │ 												setUserProfile((prev) => ({
    304 │ 													...prev,
  > 305 │ 													gender: value as any,
        │ 													                 ^^^
    306 │ 												}))
    307 │ 											}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\recommendations\AIRecommendationInterface.tsx:330:18 lint/style/noNonNullAssertion ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    328 │ 													...prev,
    329 │ 													lifestyle: {
  > 330 │ 														...prev.lifestyle!,
        │ 														   ^^^^^^^^^^^^^^^
    331 │ 														activityLevel: value as any,
    332 │ 													},
  

.\src\components\recommendations\AIRecommendationInterface.tsx:331:39 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    329 │ 													lifestyle: {
    330 │ 														...prev.lifestyle!,
  > 331 │ 														activityLevel: value as any,
        │ 														                        ^^^
    332 │ 													},
    333 │ 												}))
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\recommendations\AIRecommendationInterface.tsx:361:18 lint/style/noNonNullAssertion ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    359 │ 													...prev,
    360 │ 													lifestyle: {
  > 361 │ 														...prev.lifestyle!,
        │ 														   ^^^^^^^^^^^^^^^
    362 │ 														stressLevel: Number.parseInt(value) as any,
    363 │ 													},
  

.\src\components\recommendations\AIRecommendationInterface.tsx:362:54 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    360 │ 													lifestyle: {
    361 │ 														...prev.lifestyle!,
  > 362 │ 														stressLevel: Number.parseInt(value) as any,
        │ 														                                       ^^^
    363 │ 													},
    364 │ 												}))
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\recommendations\AIRecommendationInterface.tsx:403:12 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    401 │ 										);
    402 │ 										return (
  > 403 │ 											<div
        │ 											^^^^
  > 404 │ 												key={option.id}
         ...
  > 414 │ 												}
  > 415 │ 											>
        │ 											^
    416 │ 												<div className="flex items-center justify-between">
    417 │ 													<div>
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\components\recommendations\AIRecommendationInterface.tsx:452:28 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    450 │ 																	updateHealthGoalPriority(
    451 │ 																		goal.id,
  > 452 │ 																		value as any,
        │ 																		         ^^^
    453 │ 																	)
    454 │ 																}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\recommendations\AIRecommendationInterface.tsx:520:19 lint/style/noNonNullAssertion ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    518 │ 														...prev,
    519 │ 														preferences: {
  > 520 │ 															...prev.preferences!,
        │ 															   ^^^^^^^^^^^^^^^^^
    521 │ 															budgetRange: {
    522 │ 																min: Number.parseInt(e.target.value) || 0,
  

.\src\components\recommendations\AIRecommendationInterface.tsx:540:19 lint/style/noNonNullAssertion ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    538 │ 														...prev,
    539 │ 														preferences: {
  > 540 │ 															...prev.preferences!,
        │ 															   ^^^^^^^^^^^^^^^^^
    541 │ 															budgetRange: {
    542 │ 																min: prev.preferences?.budgetRange?.min || 0,
  

.\src\components\recommendations\AIRecommendationInterface.tsx:567:18 lint/style/noNonNullAssertion ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    565 │ 													...prev,
    566 │ 													preferences: {
  > 567 │ 														...prev.preferences!,
        │ 														   ^^^^^^^^^^^^^^^^^
    568 │ 														maxDailySupplements:
    569 │ 															Number.parseInt(e.target.value) || 5,
  

.\src\components\recommendations\AIRecommendationInterface.tsx:588:18 lint/style/noNonNullAssertion ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    586 │ 													...prev,
    587 │ 													preferences: {
  > 588 │ 														...prev.preferences!,
        │ 														   ^^^^^^^^^^^^^^^^^
    589 │ 														organicPreference: checked as boolean,
    590 │ 													},
  

.\src\components\recommendations\AIRecommendationInterface.tsx:609:18 lint/style/noNonNullAssertion ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    607 │ 													...prev,
    608 │ 													preferences: {
  > 609 │ 														...prev.preferences!,
        │ 														   ^^^^^^^^^^^^^^^^^
    610 │ 														veganPreference: checked as boolean,
    611 │ 													},
  

.\src\components\recommendations\AIRecommendationInterface.tsx:650:15 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    648 │ 							{recommendations.map((recommendation, index) => (
    649 │ 								<Card
  > 650 │ 									key={index}
        │ 									     ^^^^^
    651 │ 									className="cursor-pointer transition-shadow hover:shadow-md"
    652 │ 								>
  
  i This is the source of the key value.
  
    646 │ 					<CardContent>
    647 │ 						<div className="space-y-4">
  > 648 │ 							{recommendations.map((recommendation, index) => (
        │ 							                                      ^^^^^
    649 │ 								<Card
    650 │ 									key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\recommendations\AIRecommendationInterface.tsx:692:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    690 │ 													.slice(0, 3)
    691 │ 													.map((reason, idx) => (
  > 692 │ 														<li key={idx} className="flex items-start gap-2">
        │ 														         ^^^
    693 │ 															<CheckCircle className="mt-1 h-3 w-3 text-green-500" />
    694 │ 															{reason}
  
  i This is the source of the key value.
  
    689 │ 												{recommendation.reasoning.polishPrimaryReasons
    690 │ 													.slice(0, 3)
  > 691 │ 													.map((reason, idx) => (
        │ 													              ^^^
    692 │ 														<li key={idx} className="flex items-start gap-2">
    693 │ 															<CheckCircle className="mt-1 h-3 w-3 text-green-500" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\recommendations\AIRecommendationInterface.tsx:710:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    708 │ 													.map((benefit, idx) => (
    709 │ 														<Badge
  > 710 │ 															key={idx}
        │ 															     ^^^
    711 │ 															variant="outline"
    712 │ 															className="text-xs"
  
  i This is the source of the key value.
  
    706 │ 												{recommendation.expectedBenefits
    707 │ 													.slice(0, 3)
  > 708 │ 													.map((benefit, idx) => (
        │ 													               ^^^
    709 │ 														<Badge
    710 │ 															key={idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\recommendations\AIRecommendationInterface.tsx:821:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    819 │ 										{selectedRecommendation.reasoning.polishPersonalizedFactors.map(
    820 │ 											(factor, idx) => (
  > 821 │ 												<li key={idx} className="flex items-start gap-2">
        │ 												         ^^^
    822 │ 													<span className="mt-1 text-blue-500">•</span>
    823 │ 													{factor}
  
  i This is the source of the key value.
  
    818 │ 									<ul className="space-y-1 text-gray-700 text-sm">
    819 │ 										{selectedRecommendation.reasoning.polishPersonalizedFactors.map(
  > 820 │ 											(factor, idx) => (
        │ 											         ^^^
    821 │ 												<li key={idx} className="flex items-start gap-2">
    822 │ 													<span className="mt-1 text-blue-500">•</span>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\recommendations\AIRecommendationInterface.tsx:858:25 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    856 │ 										{selectedRecommendation.dosageRecommendation.polishTiming.map(
    857 │ 											(timing, idx) => (
  > 858 │ 												<Badge key={idx} variant="outline">
        │ 												            ^^^
    859 │ 													{timing}
    860 │ 												</Badge>
  
  i This is the source of the key value.
  
    855 │ 									<div className="flex flex-wrap gap-2">
    856 │ 										{selectedRecommendation.dosageRecommendation.polishTiming.map(
  > 857 │ 											(timing, idx) => (
        │ 											         ^^^
    858 │ 												<Badge key={idx} variant="outline">
    859 │ 													{timing}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\recommendations\AIRecommendationInterface.tsx:879:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    877 │ 							<TabsContent value="timeline" className="space-y-4">
    878 │ 								{selectedRecommendation.timeline.phases.map((phase, idx) => (
  > 879 │ 									<div key={idx} className="rounded-lg border p-3">
        │ 									          ^^^
    880 │ 										<div className="mb-2 flex items-center justify-between">
    881 │ 											<h5 className="font-medium">{phase.polishPhase}</h5>
  
  i This is the source of the key value.
  
    877 │ 							<TabsContent value="timeline" className="space-y-4">
  > 878 │ 								{selectedRecommendation.timeline.phases.map((phase, idx) => (
        │ 								                                                    ^^^
    879 │ 									<div key={idx} className="rounded-lg border p-3">
    880 │ 										<div className="mb-2 flex items-center justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\recommendations\AIRecommendationInterface.tsx:886:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    884 │ 										<ul className="space-y-1 text-gray-700 text-sm">
    885 │ 											{phase.polishExpectedChanges.map((change, changeIdx) => (
  > 886 │ 												<li key={changeIdx} className="flex items-start gap-2">
        │ 												         ^^^^^^^^^
    887 │ 													<span className="mt-1 text-green-500">•</span>
    888 │ 													{change}
  
  i This is the source of the key value.
  
    883 │ 										</div>
    884 │ 										<ul className="space-y-1 text-gray-700 text-sm">
  > 885 │ 											{phase.polishExpectedChanges.map((change, changeIdx) => (
        │ 											                                          ^^^^^^^^^
    886 │ 												<li key={changeIdx} className="flex items-start gap-2">
    887 │ 													<span className="mt-1 text-green-500">•</span>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\recommendations\AIRecommendationInterface.tsx:923:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    921 │ 										{selectedRecommendation.costAnalysis.polishCostOptimizationTips.map(
    922 │ 											(tip, idx) => (
  > 923 │ 												<li key={idx} className="flex items-start gap-2">
        │ 												         ^^^
    924 │ 													<span className="mt-1 text-yellow-500">💡</span>
    925 │ 													{tip}
  
  i This is the source of the key value.
  
    920 │ 									<ul className="space-y-1 text-gray-700 text-sm">
    921 │ 										{selectedRecommendation.costAnalysis.polishCostOptimizationTips.map(
  > 922 │ 											(tip, idx) => (
        │ 											      ^^^
    923 │ 												<li key={idx} className="flex items-start gap-2">
    924 │ 													<span className="mt-1 text-yellow-500">💡</span>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:331:29 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    329 │ 											</div>
    330 │ 
  > 331 │ 											{(application as any).polishMechanism && (
        │ 											                 ^^^
    332 │ 												<div className="mb-2 text-gray-600 text-sm">
    333 │ 													<strong>Mechanizm:</strong>{" "}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:334:31 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    332 │ 												<div className="mb-2 text-gray-600 text-sm">
    333 │ 													<strong>Mechanizm:</strong>{" "}
  > 334 │ 													{(application as any).polishMechanism}
        │ 													                 ^^^
    335 │ 												</div>
    336 │ 											)}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:346:29 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    344 │ 											</div>
    345 │ 
  > 346 │ 											{(application as any).polishContraindications &&
        │ 											                 ^^^
    347 │ 												(application as any).polishContraindications.length >
    348 │ 													0 && (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:347:29 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    346 │ 											{(application as any).polishContraindications &&
  > 347 │ 												(application as any).polishContraindications.length >
        │ 												                ^^^
    348 │ 													0 && (
    349 │ 													<Alert className="mt-2">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:354:32 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    352 │ 															<strong>Przeciwwskazania:</strong>{" "}
    353 │ 															{(
  > 354 │ 																application as any
        │ 																               ^^^
    355 │ 															).polishContraindications.join(", ")}
    356 │ 														</AlertDescription>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:571:43 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    569 │ 									</div>
    570 │ 
  > 571 │ 									{(supplement.dosageGuidelines as any)
        │ 									                                 ^^^
    572 │ 										.polishSpecialPopulations && (
    573 │ 										<div className="rounded-lg border p-3">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:579:46 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    577 │ 											<div className="space-y-1 text-xs">
    578 │ 												{Object.entries(
  > 579 │ 													(supplement.dosageGuidelines as any)
        │ 													                                ^^^
    580 │ 														.polishSpecialPopulations,
    581 │ 												).map(([population, dosage]: [string, any]) => (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:581:51 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    579 │ 													(supplement.dosageGuidelines as any)
    580 │ 														.polishSpecialPopulations,
  > 581 │ 												).map(([population, dosage]: [string, any]) => (
        │ 												                                      ^^^
    582 │ 													<div
    583 │ 														key={population}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:247:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    245 │ 											{supplement.educationalContent.polishKeyTakeaways.map(
    246 │ 												(takeaway, index) => (
  > 247 │ 													<li key={index} className="flex items-start gap-1">
        │ 													         ^^^^^
    248 │ 														<span className="mt-1 text-green-500">•</span>
    249 │ 														{takeaway}
  
  i This is the source of the key value.
  
    244 │ 										<ul className="space-y-1 text-gray-600 text-sm">
    245 │ 											{supplement.educationalContent.polishKeyTakeaways.map(
  > 246 │ 												(takeaway, index) => (
        │ 												           ^^^^^
    247 │ 													<li key={index} className="flex items-start gap-1">
    248 │ 														<span className="mt-1 text-green-500">•</span>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:264:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    262 │ 												.slice(0, 3)
    263 │ 												.map((compound, index) => (
  > 264 │ 													<div key={index} className="text-sm">
        │ 													          ^^^^^
    265 │ 														<div className="font-medium">
    266 │ 															{compound.polishName || compound.name}
  
  i This is the source of the key value.
  
    261 │ 											{supplement.activeCompounds
    262 │ 												.slice(0, 3)
  > 263 │ 												.map((compound, index) => (
        │ 												                ^^^^^
    264 │ 													<div key={index} className="text-sm">
    265 │ 														<div className="font-medium">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:285:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    283 │ 								<div className="space-y-3">
    284 │ 									{supplement.mechanisms.slice(0, 2).map((mechanism, index) => (
  > 285 │ 										<div key={index} className="rounded-lg border p-3">
        │ 										          ^^^^^
    286 │ 											<div className="mb-1 font-medium text-sm">
    287 │ 												{mechanism.polishPathway}
  
  i This is the source of the key value.
  
    282 │ 								<h4 className="mb-2 font-medium">Mechanizmy działania</h4>
    283 │ 								<div className="space-y-3">
  > 284 │ 									{supplement.mechanisms.slice(0, 2).map((mechanism, index) => (
        │ 									                                                   ^^^^^
    285 │ 										<div key={index} className="rounded-lg border p-3">
    286 │ 											<div className="mb-1 font-medium text-sm">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:315:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    313 │ 								<div className="space-y-3">
    314 │ 									{supplement.clinicalApplications.map((application, index) => (
  > 315 │ 										<div key={index} className="rounded-lg border p-4">
        │ 										          ^^^^^
    316 │ 											<div className="mb-2 flex items-center justify-between">
    317 │ 												<h5 className="font-medium">
  
  i This is the source of the key value.
  
    312 │ 								</h4>
    313 │ 								<div className="space-y-3">
  > 314 │ 									{supplement.clinicalApplications.map((application, index) => (
        │ 									                                                   ^^^^^
    315 │ 										<div key={index} className="rounded-lg border p-4">
    316 │ 											<div className="mb-2 flex items-center justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:474:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    472 │ 														(consideration, index) => (
    473 │ 															<li
  > 474 │ 																key={index}
        │ 																     ^^^^^
    475 │ 																className="flex items-start gap-1"
    476 │ 															>
  
  i This is the source of the key value.
  
    470 │ 												<ul className="space-y-1 text-gray-600 text-xs">
    471 │ 													{supplement.safetyProfile.polishElderlyConsiderations.map(
  > 472 │ 														(consideration, index) => (
        │ 														                ^^^^^
    473 │ 															<li
    474 │ 																key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:496:25 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    494 │ 													.slice(0, 3)
    495 │ 													.map((effect, index) => (
  > 496 │ 														<div key={index} className="text-xs">
        │ 														          ^^^^^
    497 │ 															<div className="flex items-center justify-between">
    498 │ 																<span className="font-medium">
  
  i This is the source of the key value.
  
    493 │ 												{supplement.sideEffects
    494 │ 													.slice(0, 3)
  > 495 │ 													.map((effect, index) => (
        │ 													              ^^^^^
    496 │ 														<div key={index} className="text-xs">
    497 │ 															<div className="flex items-center justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:562:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    560 │ 											{supplement.dosageGuidelines.timing.map(
    561 │ 												(timing: string, index: number) => (
  > 562 │ 													<li key={index} className="flex items-center gap-1">
        │ 													         ^^^^^
    563 │ 														<Clock className="h-3 w-3" />
    564 │ 														{timing}
  
  i This is the source of the key value.
  
    559 │ 										<ul className="space-y-1 text-gray-600 text-xs">
    560 │ 											{supplement.dosageGuidelines.timing.map(
  > 561 │ 												(timing: string, index: number) => (
        │ 												                 ^^^^^
    562 │ 													<li key={index} className="flex items-center gap-1">
    563 │ 														<Clock className="h-3 w-3" />
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:611:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    609 │ 												(form, index) => (
    610 │ 													<Badge
  > 611 │ 														key={index}
        │ 														     ^^^^^
    612 │ 														variant="outline"
    613 │ 														className="text-xs"
  
  i This is the source of the key value.
  
    607 │ 										<div className="flex flex-wrap gap-2">
    608 │ 											{supplement.qualityConsiderations.polishBioavailabilityForms.map(
  > 609 │ 												(form, index) => (
        │ 												       ^^^^^
    610 │ 													<Badge
    611 │ 														key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:629:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    627 │ 											{supplement.qualityConsiderations.polishQualityMarkers.map(
    628 │ 												(marker, index) => (
  > 629 │ 													<li key={index} className="flex items-center gap-1">
        │ 													         ^^^^^
    630 │ 														<span className="text-green-500">✓</span>
    631 │ 														{marker}
  
  i This is the source of the key value.
  
    626 │ 										<ul className="space-y-1 text-gray-600 text-xs">
    627 │ 											{supplement.qualityConsiderations.polishQualityMarkers.map(
  > 628 │ 												(marker, index) => (
        │ 												         ^^^^^
    629 │ 													<li key={index} className="flex items-center gap-1">
    630 │ 														<span className="text-green-500">✓</span>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:710:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    708 │ 															(factor, index) => (
    709 │ 																<Badge
  > 710 │ 																	key={index}
        │ 																	     ^^^^^
    711 │ 																	variant="outline"
    712 │ 																	className="text-xs"
  
  i This is the source of the key value.
  
    706 │ 													<div className="mt-1 flex flex-wrap gap-1">
    707 │ 														{supplement.pharmacokinetics.absorption.polishFactors.map(
  > 708 │ 															(factor, index) => (
        │ 															         ^^^^^
    709 │ 																<Badge
    710 │ 																	key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\ComprehensiveSupplementCard.tsx:741:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    739 │ 															(enzyme, index) => (
    740 │ 																<Badge
  > 741 │ 																	key={index}
        │ 																	     ^^^^^
    742 │ 																	variant="outline"
    743 │ 																	className="text-xs"
  
  i This is the source of the key value.
  
    737 │ 													<div className="mt-1 flex flex-wrap gap-1">
    738 │ 														{supplement.pharmacokinetics.metabolism.enzymes.map(
  > 739 │ 															(enzyme, index) => (
        │ 															         ^^^^^
    740 │ 																<Badge
    741 │ 																	key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SupplementDetailPanel.tsx:176:12 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    174 │ 									{supplement.mechanisms.map((mechanism, index) => (
    175 │ 										<div key={index} className="rounded-lg border p-4">
  > 176 │ 											<div
        │ 											^^^^
  > 177 │ 												className="flex cursor-pointer items-center justify-between"
  > 178 │ 												onClick={() => toggleMechanism(mechanism.pathway)}
  > 179 │ 											>
        │ 											^
    180 │ 												<div>
    181 │ 													<h5 className="mb-1 font-medium text-lg">
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\components\supplements\SupplementDetailPanel.tsx:175:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    173 │ 								<div className="space-y-4">
    174 │ 									{supplement.mechanisms.map((mechanism, index) => (
  > 175 │ 										<div key={index} className="rounded-lg border p-4">
        │ 										          ^^^^^
    176 │ 											<div
    177 │ 												className="flex cursor-pointer items-center justify-between"
  
  i This is the source of the key value.
  
    173 │ 								<div className="space-y-4">
  > 174 │ 									{supplement.mechanisms.map((mechanism, index) => (
        │ 									                                       ^^^^^
    175 │ 										<div key={index} className="rounded-lg border p-4">
    176 │ 											<div
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SupplementDetailPanel.tsx:214:25 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    212 │ 																	(site: string, idx: number) => (
    213 │ 																		<Badge
  > 214 │ 																			key={idx}
        │ 																			     ^^^
    215 │ 																			variant="outline"
    216 │ 																			className="text-xs"
  
  i This is the source of the key value.
  
    210 │ 															<div className="flex flex-wrap gap-1">
    211 │ 																{mechanism.targetSystems?.map(
  > 212 │ 																	(site: string, idx: number) => (
        │ 																	               ^^^
    213 │ 																		<Badge
    214 │ 																			key={idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SupplementDetailPanel.tsx:251:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    249 │ 								<div className="grid grid-cols-1 gap-4 md:grid-cols-2">
    250 │ 									{supplement.activeCompounds.map((compound, index) => (
  > 251 │ 										<div key={index} className="rounded-lg border p-4">
        │ 										          ^^^^^
    252 │ 											<h5 className="mb-3 font-medium text-lg">
    253 │ 												{compound.polishName || compound.name}
  
  i This is the source of the key value.
  
    249 │ 								<div className="grid grid-cols-1 gap-4 md:grid-cols-2">
  > 250 │ 									{supplement.activeCompounds.map((compound, index) => (
        │ 									                                           ^^^^^
    251 │ 										<div key={index} className="rounded-lg border p-4">
    252 │ 											<h5 className="mb-3 font-medium text-lg">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SupplementDetailPanel.tsx:287:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    285 │ 																.map((receptor, idx) => (
    286 │ 																	<Badge
  > 287 │ 																		key={idx}
        │ 																		     ^^^
    288 │ 																		variant="outline"
    289 │ 																		className="text-xs"
  
  i This is the source of the key value.
  
    283 │ 															{compound.targetReceptors
    284 │ 																?.slice(0, 2)
  > 285 │ 																.map((receptor, idx) => (
        │ 																                ^^^
    286 │ 																	<Badge
    287 │ 																		key={idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SupplementDetailPanel.tsx:305:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    303 │ 														{compound.metabolicPathway?.map((pathway, idx) => (
    304 │ 															<Badge
  > 305 │ 																key={idx}
        │ 																     ^^^
    306 │ 																variant="outline"
    307 │ 																className="text-xs"
  
  i This is the source of the key value.
  
    301 │ 													</span>
    302 │ 													<div className="mt-1 flex flex-wrap gap-1">
  > 303 │ 														{compound.metabolicPathway?.map((pathway, idx) => (
        │ 														                                          ^^^
    304 │ 															<Badge
    305 │ 																key={idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SupplementDetailPanel.tsx:364:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    362 │ 										?.slice(0, 3)
    363 │ 										.map((study, index) => (
  > 364 │ 											<div key={index} className="rounded-lg border p-4">
        │ 											          ^^^^^
    365 │ 												<div className="mb-3 flex items-start justify-between">
    366 │ 													<div className="flex-1">
  
  i This is the source of the key value.
  
    361 │ 									{supplement.researchStudies
    362 │ 										?.slice(0, 3)
  > 363 │ 										.map((study, index) => (
        │ 										             ^^^^^
    364 │ 											<div key={index} className="rounded-lg border p-4">
    365 │ 												<div className="mb-3 flex items-start justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SupplementDetailPanel.tsx:434:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    432 │ 								<div className="space-y-4">
    433 │ 									{supplement.interactions.map((interaction, index) => (
  > 434 │ 										<div key={index} className="rounded-lg border p-4">
        │ 										          ^^^^^
    435 │ 											<div className="mb-3 flex items-center gap-3">
    436 │ 												<Badge
  
  i This is the source of the key value.
  
    432 │ 								<div className="space-y-4">
  > 433 │ 									{supplement.interactions.map((interaction, index) => (
        │ 									                                           ^^^^^
    434 │ 										<div key={index} className="rounded-lg border p-4">
    435 │ 											<div className="mb-3 flex items-center gap-3">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SupplementDetailPanel.tsx:569:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    567 │ 														(consideration, index) => (
    568 │ 															<li
  > 569 │ 																key={index}
        │ 																     ^^^^^
    570 │ 																className="flex items-start gap-1"
    571 │ 															>
  
  i This is the source of the key value.
  
    565 │ 												<ul className="space-y-1 text-gray-600 text-xs">
    566 │ 													{supplement.safetyProfile.polishElderlyConsiderations.map(
  > 567 │ 														(consideration, index) => (
        │ 														                ^^^^^
    568 │ 															<li
    569 │ 																key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SupplementDetailPanel.tsx:591:25 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    589 │ 													.slice(0, 4)
    590 │ 													.map((effect, index) => (
  > 591 │ 														<div key={index} className="text-sm">
        │ 														          ^^^^^
    592 │ 															<div className="mb-1 flex items-center justify-between">
    593 │ 																<span className="font-medium">
  
  i This is the source of the key value.
  
    588 │ 												{supplement.sideEffects
    589 │ 													.slice(0, 4)
  > 590 │ 													.map((effect, index) => (
        │ 													              ^^^^^
    591 │ 														<div key={index} className="text-sm">
    592 │ 															<div className="mb-1 flex items-center justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SupplementSelector.tsx:38:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    37 │ interface SupplementSelectorProps {
  > 38 │ 	supplements?: any[];
       │ 	              ^^^
    39 │ 	selectedSupplement?: string;
    40 │ 	onSelect?: (supplementId: string) => void;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\SupplementSelector.tsx:150:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    148 │ 					case "cost":
    149 │ 						return (
  > 150 │ 							((a as any).economicData?.averageCostPerMonth?.average || 0) -
        │ 							       ^^^
    151 │ 							((b as any).economicData?.averageCostPerMonth?.average || 0)
    152 │ 						);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\SupplementSelector.tsx:151:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    149 │ 						return (
    150 │ 							((a as any).economicData?.averageCostPerMonth?.average || 0) -
  > 151 │ 							((b as any).economicData?.averageCostPerMonth?.average || 0)
        │ 							       ^^^
    152 │ 						);
    153 │ 					default:
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\SupplementSelector.tsx:240:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    238 │ 				case "cost":
    239 │ 					return (
  > 240 │ 						((a as any).economicData?.averageCostPerMonth?.average || 0) -
        │ 						       ^^^
    241 │ 						((b as any).economicData?.averageCostPerMonth?.average || 0)
    242 │ 					);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\SupplementSelector.tsx:241:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    239 │ 					return (
    240 │ 						((a as any).economicData?.averageCostPerMonth?.average || 0) -
  > 241 │ 						((b as any).economicData?.averageCostPerMonth?.average || 0)
        │ 						       ^^^
    242 │ 					);
    243 │ 				default:
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\SupplementSelector.tsx:372:31 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    370 │ 						<Select
    371 │ 							value={sortBy}
  > 372 │ 							onValueChange={(value: any) => setSortBy(value)}
        │ 							                       ^^^
    373 │ 						>
    374 │ 							<SelectTrigger className="w-48">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\SupplementSelector.tsx:544:28 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    542 │ 										<div className="flex items-center gap-1">
    543 │ 											<Users className="h-3 w-3" />
  > 544 │ 											{(supplement as any).clinicalEvidence?.totalStudies || 0}{" "}
        │ 											                ^^^
    545 │ 											badań
    546 │ 										</div>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\SupplementSelector.tsx:549:28 lint/suspicious/noExplicitAny ━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    547 │ 										<div className="flex items-center gap-1">
    548 │ 											<Euro className="h-3 w-3" />
  > 549 │ 											{(supplement as any).economicData?.averageCostPerMonth
        │ 											                ^^^
    550 │ 												?.average || 0}
    551 │ 											€/miesiąc
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\supplements\SupplementSelector.tsx:561:19 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    559 │ 											.map((mechanism, index) => (
    560 │ 												<Badge
  > 561 │ 													key={index}
        │ 													     ^^^^^
    562 │ 													variant="outline"
    563 │ 													className="text-xs"
  
  i This is the source of the key value.
  
    557 │ 										{supplement.mechanisms
    558 │ 											.slice(0, 2)
  > 559 │ 											.map((mechanism, index) => (
        │ 											                 ^^^^^
    560 │ 												<Badge
    561 │ 													key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\SupplementSelector.tsx:604:12 lint/a11y/useButtonType ━━━━━━━━━━━━━━━━━

  × Provide an explicit type prop for the button element.
  
    602 │ 										>
    603 │ 											{supplement.polishName}
  > 604 │ 											<button
        │ 											^^^^^^^
  > 605 │ 												onClick={() => handleSelect(id)}
  > 606 │ 												className="ml-1 rounded-full p-0.5 hover:bg-black/20"
  > 607 │ 											>
        │ 											^
    608 │ 												×
    609 │ 											</button>
  
  i The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.
  
  i Allowed button types are: submit, button or reset
  

.\src\components\ui\animated-button.tsx:87:37 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    85 │ 				: undefined;
    86 │ 
  > 87 │ 		const MotionComp = motion(Comp as any);
       │ 		                                  ^^^
    88 │ 
    89 │ 		return (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\ui\calendar.tsx:59:10 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    57 │ 				{
    58 │ 					Chevron: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
  > 59 │ 				} as any
       │ 				     ^^^
    60 │ 			}
    61 │ 			{...props}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\ui\breadcrumb.tsx:65:2 lint/a11y/useFocusableInteractive ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The HTML element with the interactive role "link" is not focusable.
  
    63 │ 	React.ComponentPropsWithoutRef<"span">
    64 │ >(({ className, ...props }, ref) => (
  > 65 │ 	<span
       │ 	^^^^^
  > 66 │ 		ref={ref}
        ...
  > 71 │ 		{...props}
  > 72 │ 	/>
       │ 	^^
    73 │ ));
    74 │ BreadcrumbPage.displayName = "BreadcrumbPage";
  
  i A non-interactive HTML element that is not focusable may not be reachable for users that rely on keyboard navigation, even with an added role like "link".
  
  i Add a tabIndex attribute to make this element focusable.
  

.\src\components\tracking\ProgressTrackingDashboard.tsx:213:53 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    211 │ 	};
    212 │ 
  > 213 │ 	const CustomTooltip = ({ active, payload, label }: any) => {
        │ 	                                                   ^^^
    214 │ 		if (active && payload && payload.length) {
    215 │ 			return (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\ProgressTrackingDashboard.tsx:218:27 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    216 │ 				<div className="rounded-lg border bg-white p-3 shadow-lg">
    217 │ 					<p className="mb-2 font-medium text-sm">{label}</p>
  > 218 │ 					{payload.map((entry: any, index: number) => (
        │ 					                     ^^^
    219 │ 						<p key={index} className="text-xs" style={{ color: entry.color }}>
    220 │ 							{entry.name}: {entry.value.toFixed(1)}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\ProgressTrackingDashboard.tsx:393:33 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    391 │ 								<Select
    392 │ 									value={selectedMetric}
  > 393 │ 									onValueChange={(value: any) => setSelectedMetric(value)}
        │ 									                       ^^^
    394 │ 								>
    395 │ 									<SelectTrigger className="w-40">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\ProgressTrackingDashboard.tsx:219:15 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    217 │ 					<p className="mb-2 font-medium text-sm">{label}</p>
    218 │ 					{payload.map((entry: any, index: number) => (
  > 219 │ 						<p key={index} className="text-xs" style={{ color: entry.color }}>
        │ 						        ^^^^^
    220 │ 							{entry.name}: {entry.value.toFixed(1)}
    221 │ 							{entry.name === "adherence" && "%"}
  
  i This is the source of the key value.
  
    216 │ 				<div className="rounded-lg border bg-white p-3 shadow-lg">
    217 │ 					<p className="mb-2 font-medium text-sm">{label}</p>
  > 218 │ 					{payload.map((entry: any, index: number) => (
        │ 					                          ^^^^^
    219 │ 						<p key={index} className="text-xs" style={{ color: entry.color }}>
    220 │ 							{entry.name}: {entry.value.toFixed(1)}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\tracking\ProgressTrackingDashboard.tsx:455:32 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    453 │ 										>
    454 │ 											{adherenceData.map((entry, index) => (
  > 455 │ 												<Cell key={`cell-${index}`} fill={entry.color} />
        │ 												                   ^^^^^
    456 │ 											))}
    457 │ 										</Pie>
  
  i This is the source of the key value.
  
    452 │ 											label={({ name, value }) => `${name}: ${value}`}
    453 │ 										>
  > 454 │ 											{adherenceData.map((entry, index) => (
        │ 											                           ^^^^^
    455 │ 												<Cell key={`cell-${index}`} fill={entry.color} />
    456 │ 											))}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\tracking\ProgressTrackingDashboard.tsx:570:19 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    568 │ 											{supplement.targetEffects.map((effect, index) => (
    569 │ 												<div
  > 570 │ 													key={index}
        │ 													     ^^^^^
    571 │ 													className="grid grid-cols-1 items-center gap-4 md:grid-cols-4"
    572 │ 												>
  
  i This is the source of the key value.
  
    566 │ 										<div key={supplement.id} className="space-y-4">
    567 │ 											<h4 className="font-medium">{supplement.polishName}</h4>
  > 568 │ 											{supplement.targetEffects.map((effect, index) => (
        │ 											                                       ^^^^^
    569 │ 												<div
    570 │ 													key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\tracking\DailyIntakeLogger.tsx:255:41 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    254 │ 	const updateSideEffect = useCallback(
  > 255 │ 		(index: number, field: string, value: any) => {
        │ 		                                      ^^^
    256 │ 			setSideEffectsList((prev) =>
    257 │ 				prev.map((effect, i) =>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\DailyIntakeLogger.tsx:536:34 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    534 │ 									<Label className="mb-2 flex items-center gap-2">
    535 │ 										{field === "mood" &&
  > 536 │ 											getMoodIcon((watch as any)(`context.${field}`) as number)}
        │ 											                      ^^^
    537 │ 										{field === "energy" &&
    538 │ 											getEnergyIcon(
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\DailyIntakeLogger.tsx:539:23 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    537 │ 										{field === "energy" &&
    538 │ 											getEnergyIcon(
  > 539 │ 												(watch as any)(`context.${field}`) as number,
        │ 												          ^^^
    540 │ 											)}
    541 │ 										{field === "stress" && (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\DailyIntakeLogger.tsx:556:39 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    554 │ 									</Label>
    555 │ 									<Controller
  > 556 │ 										name={`context.${field}` as any}
        │ 										                            ^^^
    557 │ 										control={control}
    558 │ 										render={({ field: formField }) => (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\DailyIntakeLogger.tsx:667:16 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    665 │ 								{sideEffectsList.map((effect, index) => (
    666 │ 									<div
  > 667 │ 										key={index}
        │ 										     ^^^^^
    668 │ 										className="grid grid-cols-1 gap-4 rounded-lg bg-gray-50 p-3 md:grid-cols-4"
    669 │ 									>
  
  i This is the source of the key value.
  
    663 │ 						{showSideEffects && (
    664 │ 							<div className="space-y-4 rounded-lg border p-4">
  > 665 │ 								{sideEffectsList.map((effect, index) => (
        │ 								                              ^^^^^
    666 │ 									<div
    667 │ 										key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\supplements\DosageCalculator.tsx:12:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    11 │ export interface DosageCalculatorProps {
  > 12 │ 	supplement?: any;
       │ 	             ^^^
    13 │ 	weight?: number;
    14 │ 	age?: number;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\SupplementTrackingDashboard.tsx:872:32 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    870 │ 										setQuickLogData((prev) => ({
    871 │ 											...prev,
  > 872 │ 											timeOfDay: value as any,
        │ 											                    ^^^
    873 │ 										}))
    874 │ 									}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\SupplementTrackingDashboard.tsx:896:45 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    894 │ 											setQuickLogData((prev) => ({
    895 │ 												...prev,
  > 896 │ 												mood: Number.parseInt(value) as any,
        │ 												                                ^^^
    897 │ 											}))
    898 │ 										}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\SupplementTrackingDashboard.tsx:920:47 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    918 │ 											setQuickLogData((prev) => ({
    919 │ 												...prev,
  > 920 │ 												energy: Number.parseInt(value) as any,
        │ 												                                  ^^^
    921 │ 											}))
    922 │ 										}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\SupplementTrackingDashboard.tsx:88:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook specifies more dependencies than necessary: selectedTimeframe, supplementIds
  
    86 │ 	});
    87 │ 
  > 88 │ 	useEffect(() => {
       │ 	^^^^^^^^^
    89 │ 		loadTrackingData();
    90 │ 	}, [selectedTimeframe, supplementIds]);
  
  i This dependency can be removed from the list.
  
    88 │ 	useEffect(() => {
    89 │ 		loadTrackingData();
  > 90 │ 	}, [selectedTimeframe, supplementIds]);
       │ 	    ^^^^^^^^^^^^^^^^^
    91 │ 
    92 │ 	const loadTrackingData = async () => {
  
  i Outer scope values aren't valid dependencies because mutating them doesn't re-render the component.
  
    88 │ 	useEffect(() => {
    89 │ 		loadTrackingData();
  > 90 │ 	}, [selectedTimeframe, supplementIds]);
       │ 	                       ^^^^^^^^^^^^^
    91 │ 
    92 │ 	const loadTrackingData = async () => {
  

.\src\components\tracking\SupplementTrackingDashboard.tsx:351:16 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    349 │ 								.map((insight, index) => (
    350 │ 									<Alert
  > 351 │ 										key={index}
        │ 										     ^^^^^
    352 │ 										className={getInsightColor(insight.priority)}
    353 │ 									>
  
  i This is the source of the key value.
  
    347 │ 								)
    348 │ 								.slice(0, 3)
  > 349 │ 								.map((insight, index) => (
        │ 								               ^^^^^
    350 │ 									<Alert
    351 │ 										key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\tracking\SupplementTrackingDashboard.tsx:373:24 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    371 │ 																.map((rec, recIndex) => (
    372 │ 																	<li
  > 373 │ 																		key={recIndex}
        │ 																		     ^^^^^^^^
    374 │ 																		className="flex items-start gap-1"
    375 │ 																	>
  
  i This is the source of the key value.
  
    369 │ 															{insight.recommendations
    370 │ 																.slice(0, 2)
  > 371 │ 																.map((rec, recIndex) => (
        │ 																           ^^^^^^^^
    372 │ 																	<li
    373 │ 																		key={recIndex}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\tracking\SupplementTrackingDashboard.tsx:634:21 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    632 │ 							<div className="space-y-3">
    633 │ 								{insights.map((insight, index) => (
  > 634 │ 									<Card key={index}>
        │ 									           ^^^^^
    635 │ 										<CardHeader className="pb-2">
    636 │ 											<CardTitle className="flex items-center justify-between text-sm">
  
  i This is the source of the key value.
  
    631 │ 						<TabsContent value="insights" className="space-y-4 p-6">
    632 │ 							<div className="space-y-3">
  > 633 │ 								{insights.map((insight, index) => (
        │ 								                        ^^^^^
    634 │ 									<Card key={index}>
    635 │ 										<CardHeader className="pb-2">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\tracking\SupplementTrackingDashboard.tsx:675:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    673 │ 														{insight.recommendations.map((rec, recIndex) => (
    674 │ 															<div
  > 675 │ 																key={recIndex}
        │ 																     ^^^^^^^^
    676 │ 																className="rounded border p-2"
    677 │ 															>
  
  i This is the source of the key value.
  
    671 │ 													</h5>
    672 │ 													<div className="space-y-2">
  > 673 │ 														{insight.recommendations.map((rec, recIndex) => (
        │ 														                                   ^^^^^^^^
    674 │ 															<div
    675 │ 																key={recIndex}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\tracking\SupplementTrackingDashboard.tsx:718:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    716 │ 														(opt, index) => (
    717 │ 															<div
  > 718 │ 																key={index}
        │ 																     ^^^^^
    719 │ 																className="rounded-lg border p-3"
    720 │ 															>
  
  i This is the source of the key value.
  
    714 │ 												<div className="space-y-3">
    715 │ 													{analytics.optimization.timingOptimization.map(
  > 716 │ 														(opt, index) => (
        │ 														      ^^^^^
    717 │ 															<div
    718 │ 																key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\tracking\SupplementTrackingDashboard.tsx:767:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    765 │ 														(opt, index) => (
    766 │ 															<div
  > 767 │ 																key={index}
        │ 																     ^^^^^
    768 │ 																className="rounded-lg border p-3"
    769 │ 															>
  
  i This is the source of the key value.
  
    763 │ 												<div className="space-y-3">
    764 │ 													{analytics.optimization.dosageOptimization.map(
  > 765 │ 														(opt, index) => (
        │ 														      ^^^^^
    766 │ 															<div
    767 │ 																key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\tracking\ProgressTracker.tsx:296:14 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    294 │ 			id: `entry_${Date.now()}`,
    295 │ 			date: selectedDate,
  > 296 │ 			category: newEntry.category!,
        │ 			          ^^^^^^^^^^^^^^^^^^
    297 │ 			polishCategory: newEntry.polishCategory!,
    298 │ 			metric: newEntry.metric,
  

.\src\components\tracking\ProgressTracker.tsx:297:20 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    295 │ 			date: selectedDate,
    296 │ 			category: newEntry.category!,
  > 297 │ 			polishCategory: newEntry.polishCategory!,
        │ 			                ^^^^^^^^^^^^^^^^^^^^^^^^
    298 │ 			metric: newEntry.metric,
    299 │ 			polishMetric: newEntry.polishMetric || newEntry.metric,
  

.\src\components\tracking\ProgressTracker.tsx:345:14 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    343 │ 			description: newGoal.description || "",
    344 │ 			polishDescription: newGoal.polishDescription || newGoal.description || "",
  > 345 │ 			category: newGoal.category!,
        │ 			          ^^^^^^^^^^^^^^^^^
    346 │ 			polishCategory: newGoal.polishCategory!,
    347 │ 			targetValue: newGoal.targetValue,
  

.\src\components\tracking\ProgressTracker.tsx:346:20 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    344 │ 			polishDescription: newGoal.polishDescription || newGoal.description || "",
    345 │ 			category: newGoal.category!,
  > 346 │ 			polishCategory: newGoal.polishCategory!,
        │ 			                ^^^^^^^^^^^^^^^^^^^^^^^
    347 │ 			targetValue: newGoal.targetValue,
    348 │ 			currentValue: newGoal.currentValue || 0,
  

.\src\components\tracking\ProgressTracker.tsx:351:14 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    349 │ 			unit: newGoal.unit || "points",
    350 │ 			polishUnit: newGoal.polishUnit || "punkty",
  > 351 │ 			deadline: newGoal.deadline!,
        │ 			          ^^^^^^^^^^^^^^^^^
    352 │ 			isActive: true,
    353 │ 			createdAt: new Date(),
  

.\src\components\tracking\ProgressTracker.tsx:409:32 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    407 │ 							<Select
    408 │ 								value={timeRange}
  > 409 │ 								onValueChange={(value: any) => setTimeRange(value)}
        │ 								                       ^^^
    410 │ 							>
    411 │ 								<SelectTrigger className="w-32">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\ProgressTracker.tsx:574:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    572 │ 											<Select
    573 │ 												value={newEntry.category}
  > 574 │ 												onValueChange={(value: any) => {
        │ 												                       ^^^
    575 │ 													const categoryInfo = getCategoryInfo(value);
    576 │ 													setNewEntry({
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\ProgressTracker.tsx:847:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    845 │ 											<Select
    846 │ 												value={newGoal.category}
  > 847 │ 												onValueChange={(value: any) => {
        │ 												                       ^^^
    848 │ 													const categoryInfo = getCategoryInfo(value);
    849 │ 													setNewGoal({
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\tracking\ProgressTracker.tsx:483:16 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    481 │ 								{[...Array(5)].map((_, i) => (
    482 │ 									<Star
  > 483 │ 										key={i}
        │ 										     ^
    484 │ 										className={cn(
    485 │ 											"h-3 w-3",
  
  i This is the source of the key value.
  
    479 │ 							<div className="text-gray-600 text-sm">Średni nastrój</div>
    480 │ 							<div className="mt-2 flex justify-center">
  > 481 │ 								{[...Array(5)].map((_, i) => (
        │ 								                       ^
    482 │ 									<Star
    483 │ 										key={i}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\visualization\BrainRegionDiagram.tsx:179:3 lint/a11y/noSvgWithoutTitle ━━━━━━━━━━━━

  × Alternative text title element cannot be empty
  
    177 │ 	// SVG Brain Outline (simplified sagittal view)
    178 │ 	const BrainOutline = () => (
  > 179 │ 		<svg
        │ 		^^^^
  > 180 │ 			viewBox="0 0 400 300"
  > 181 │ 			className="h-full w-full"
  > 182 │ 			style={{ maxHeight: "400px" }}
  > 183 │ 		>
        │ 		^
    184 │ 			{/* Brain outline */}
    185 │ 			<path
  
  i For accessibility purposes, SVGs should have an alternative text, provided via title element. If the svg element has role="img", you should add the aria-label or aria-labelledby attribute.
  

.\src\components\visualization\BrainRegionDiagram.tsx:212:7 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    210 │ 					<g key={region.id}>
    211 │ 						{/* Region circle */}
  > 212 │ 						<circle
        │ 						^^^^^^^
  > 213 │ 							cx={adjustedPosition.x}
         ...
  > 223 │ 							onClick={() => onRegionSelect(region.id)}
  > 224 │ 						/>
        │ 						^^
    225 │ 
    226 │ 						{/* Region label */}
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\components\visualization\BrainRegionDiagram.tsx:444:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    442 │ 															(func, index) => (
    443 │ 																<div
  > 444 │ 																	key={index}
        │ 																	     ^^^^^
    445 │ 																	className="flex items-center gap-2 text-xs"
    446 │ 																>
  
  i This is the source of the key value.
  
    440 │ 													<div className="space-y-1">
    441 │ 														{selectedRegion.polishFunctions.map(
  > 442 │ 															(func, index) => (
        │ 															       ^^^^^
    443 │ 																<div
    444 │ 																	key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\visualization\BrainRegionDiagram.tsx:464:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    462 │ 															.map((nt, index) => (
    463 │ 																<div
  > 464 │ 																	key={index}
        │ 																	     ^^^^^
    465 │ 																	className="flex items-center justify-between"
    466 │ 																>
  
  i This is the source of the key value.
  
    460 │ 														{selectedRegion.neurotransmitterActivity
    461 │ 															.slice(0, 3)
  > 462 │ 															.map((nt, index) => (
        │ 															          ^^^^^
    463 │ 																<div
    464 │ 																	key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\visualization\BrainRegionDiagram.tsx:500:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    498 │ 														.map((effect, index) => (
    499 │ 															<div
  > 500 │ 																key={index}
        │ 																     ^^^^^
    501 │ 																className="rounded-lg border p-3"
    502 │ 															>
  
  i This is the source of the key value.
  
    496 │ 													selectedRegion.supplementEffects
    497 │ 														.slice(0, 3)
  > 498 │ 														.map((effect, index) => (
        │ 														              ^^^^^
    499 │ 															<div
    500 │ 																key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\visualization\SupplementEffectChart.tsx:191:53 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    190 │ 	// Custom tooltip for charts
  > 191 │ 	const CustomTooltip = ({ active, payload, label }: any) => {
        │ 	                                                   ^^^
    192 │ 		if (active && payload && payload.length) {
    193 │ 			return (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\visualization\SupplementEffectChart.tsx:196:27 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    194 │ 				<div className="rounded-lg border bg-white p-3 shadow-lg">
    195 │ 					<p className="mb-2 font-medium text-sm">{label}</p>
  > 196 │ 					{payload.map((entry: any, index: number) => (
        │ 					                     ^^^
    197 │ 						<p key={index} className="text-xs" style={{ color: entry.color }}>
    198 │ 							{entry.name}: {entry.value}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\visualization\SupplementEffectChart.tsx:197:15 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    195 │ 					<p className="mb-2 font-medium text-sm">{label}</p>
    196 │ 					{payload.map((entry: any, index: number) => (
  > 197 │ 						<p key={index} className="text-xs" style={{ color: entry.color }}>
        │ 						        ^^^^^
    198 │ 							{entry.name}: {entry.value}
    199 │ 							{entry.name === "intensity" && "%"}
  
  i This is the source of the key value.
  
    194 │ 				<div className="rounded-lg border bg-white p-3 shadow-lg">
    195 │ 					<p className="mb-2 font-medium text-sm">{label}</p>
  > 196 │ 					{payload.map((entry: any, index: number) => (
        │ 					                          ^^^^^
    197 │ 						<p key={index} className="text-xs" style={{ color: entry.color }}>
    198 │ 							{entry.name}: {entry.value}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\visualization\SupplementEffectChart.tsx:313:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    311 │ 										{supplementData.neurotransmitterEffects.map(
    312 │ 											(effect, index) => (
  > 313 │ 												<div key={index} className="rounded-lg border p-3">
        │ 												          ^^^^^
    314 │ 													<div className="mb-2 flex items-center justify-between">
    315 │ 														<h4 className="font-medium text-sm">
  
  i This is the source of the key value.
  
    310 │ 									<div className="max-h-80 space-y-4 overflow-y-auto">
    311 │ 										{supplementData.neurotransmitterEffects.map(
  > 312 │ 											(effect, index) => (
        │ 											         ^^^^^
    313 │ 												<div key={index} className="rounded-lg border p-3">
    314 │ 													<div className="mb-2 flex items-center justify-between">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\visualization\SupplementEffectChart.tsx:545:19 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    543 │ 											.map((effect, index) => (
    544 │ 												<div
  > 545 │ 													key={index}
        │ 													     ^^^^^
    546 │ 													className="flex items-center justify-between"
    547 │ 												>
  
  i This is the source of the key value.
  
    541 │ 											.sort((a, b) => Math.abs(b.effect) - Math.abs(a.effect))
    542 │ 											.slice(0, 3)
  > 543 │ 											.map((effect, index) => (
        │ 											              ^^^^^
    544 │ 												<div
    545 │ 													key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\src\components\visualization\SupplementInteractionNetwork.tsx:92:2 lint/complexity/noForEach ━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
     90 │ 	const interactions: InteractionEdge[] = [];
     91 │ 
   > 92 │ 	supplements.forEach((supplement) => {
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 93 │ 		supplement.interactions.forEach((interaction) => {
         ...
  > 132 │ 		});
  > 133 │ 	});
        │ 	^^
    134 │ 
    135 │ 	return interactions;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\visualization\SupplementInteractionNetwork.tsx:93:3 lint/complexity/noForEach ━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
     92 │ 	supplements.forEach((supplement) => {
   > 93 │ 		supplement.interactions.forEach((interaction) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 94 │ 			// Find the target supplement by name
         ...
  > 131 │ 			}
  > 132 │ 		});
        │ 		^^
    133 │ 	});
    134 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\components\visualization\SupplementInteractionNetwork.tsx:368:31 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    366 │ 						<Select
    367 │ 							value={viewMode}
  > 368 │ 							onValueChange={(value: any) => setViewMode(value)}
        │ 							                       ^^^
    369 │ 						>
    370 │ 							<SelectTrigger className="w-40">
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\components\visualization\SupplementInteractionNetwork.tsx:404:10 lint/a11y/noSvgWithoutTitle ━━━━━━━━━━

  × Alternative text title element cannot be empty
  
    402 │ 							<CardContent className="p-4">
    403 │ 								<div className="relative overflow-hidden rounded-lg bg-gray-50">
  > 404 │ 									<svg
        │ 									^^^^
  > 405 │ 										ref={svgRef}
  > 406 │ 										viewBox="0 0 600 400"
  > 407 │ 										className="h-full w-full"
  > 408 │ 										style={{ minHeight: "400px" }}
  > 409 │ 									>
        │ 									^
    410 │ 										{/* Interaction edges */}
    411 │ 										<g className="interactions">
  
  i For accessibility purposes, SVGs should have an alternative text, provided via title element. If the svg element has role="img", you should add the aria-label or aria-labelledby attribute.
  

.\src\components\visualization\SupplementInteractionNetwork.tsx:414:14 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    412 │ 											{filteredInteractions.map((interaction) => (
    413 │ 												<g key={interaction.id}>
  > 414 │ 													<path
        │ 													^^^^^
  > 415 │ 														d={getInteractionPath(interaction)}
         ...
  > 430 │ 														}
  > 431 │ 													/>
        │ 													^^
    432 │ 
    433 │ 													{/* Interaction type indicator */}
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\components\visualization\SupplementInteractionNetwork.tsx:471:15 lint/a11y/useKeyWithClickEvents ━━━━━━━━━━

  × Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.
  
    469 │ 												return (
    470 │ 													<g key={supplement.id}>
  > 471 │ 														<circle
        │ 														^^^^^^^
  > 472 │ 															cx={position.x}
         ...
  > 487 │ 															onClick={() => handleNodeClick(supplement)}
  > 488 │ 														/>
        │ 														^^
    489 │ 
    490 │ 														{/* Node label */}
  
  i Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.
  

.\src\data\age-gender-specific-recommendations.ts:39:25 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    37 │ 		| "CONFLICTING";
    38 │ 	researchStudies: RecommendationStudy[];
  > 39 │ 	polishResearchStudies: any[];
       │ 	                       ^^^
    40 │ 	lastUpdated: string;
    41 │ 	createdAt: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\data\age-gender-specific-recommendations.ts:268:9 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    266 │ 				polishFindings:
    267 │ 					"Suplementacja omega-3 wykazała umiarkowane ale znaczące poprawy objawów ADHD, szczególnie nieuwagę",
  > 268 │ 			} as any,
        │ 			     ^^^
    269 │ 		],
    270 │ 		lastUpdated: "2024-01-15T00:00:00Z",
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\data\enhanced-knowledge-graph-schema.ts:14:29 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    12 │ 	description: string;
    13 │ 	polishDescription: string;
  > 14 │ 	properties: Record<string, any>;
       │ 	                           ^^^
    15 │ 	tags: string[];
    16 │ 	polishTags: string[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\data\supplements\extended-nootropics.ts format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
     12  12 │   		polishName: "Grzyb Soplówka Jeżowata",
     13  13 │   		scientificName: "Hericium erinaceus",
     14     │ - → → commonNames:·[
     15     │ - → → → "Lion's·Mane",
     16     │ - → → → "Bearded·Tooth·Mushroom",
     17     │ - → → → "Pom·Pom·Mushroom",
     18     │ - → → ],
         14 │ + → → commonNames:·["Lion's·Mane",·"Bearded·Tooth·Mushroom",·"Pom·Pom·Mushroom"],
     19  15 │   		polishCommonNames: ["Soplówka jeżowata", "Grzyb lwie grzywy", "Hericium"],
     20  16 │   		category: "NOOTROPIC",
    ······· │ 
    121 117 │   					polishDescription: "Może wzmacniać działanie antykoagulantów",
    122 118 │   					clinicalSignificance: "Monitor bleeding time and consult physician",
    123     │ - → → → → → polishClinicalSignificance:·"Monitorować·czas·krwawienia·i·skonsultować·z·lekarzem",
        119 │ + → → → → → polishClinicalSignificance:
        120 │ + → → → → → → "Monitorować·czas·krwawienia·i·skonsultować·z·lekarzem",
    124 121 │   					recommendation: "Use with caution, monitor coagulation parameters",
    125     │ - → → → → → polishRecommendation:·"Stosować·ostrożnie,·monitorować·parametry·krzepnięcia",
        122 │ + → → → → → polishRecommendation:
        123 │ + → → → → → → "Stosować·ostrożnie,·monitorować·parametry·krzepnięcia",
    126 124 │   					evidenceLevel: "MODERATE",
    127 125 │   				},
    ······· │ 
    139 137 │   				timeToOnset: "1-2 hours",
    140 138 │   				management: "Take with food, reduce dose if needed",
    141     │ - → → → → polishManagement:·"Przyjmować·z·jedzeniem,·zmniejszyć·dawkę·w·razie·potrzeby",
        139 │ + → → → → polishManagement:
        140 │ + → → → → → "Przyjmować·z·jedzeniem,·zmniejszyć·dawkę·w·razie·potrzeby",
    142 141 │   			},
    143 142 │   		],
    ······· │ 
    154 153 │   				polishDescription: "Może wzmacniać działanie antykoagulantów",
    155 154 │   				clinicalSignificance: "Monitor bleeding time and consult physician",
    156     │ - → → → → polishClinicalSignificance:·"Monitorować·czas·krwawienia·i·skonsultować·z·lekarzem",
        155 │ + → → → → polishClinicalSignificance:
        156 │ + → → → → → "Monitorować·czas·krwawienia·i·skonsultować·z·lekarzem",
    157 157 │   				recommendation: "Use with caution, monitor coagulation parameters",
    158     │ - → → → → polishRecommendation:·"Stosować·ostrożnie,·monitorować·parametry·krzepnięcia",
        158 │ + → → → → polishRecommendation:
        159 │ + → → → → → "Stosować·ostrożnie,·monitorować·parametry·krzepnięcia",
    159 160 │   				evidenceLevel: "MODERATE",
    160 161 │   			},
    ······· │ 
    167 168 │   				polishMechanism: "Komplementarne działanie immunomodulujące",
    168 169 │   				description: "May enhance immune benefits when taken together",
    169     │ - → → → → polishDescription:·"Może·wzmacniać·korzyści·immunologiczne·przy·wspólnym·przyjmowaniu",
        170 │ + → → → → polishDescription:
        171 │ + → → → → → "Może·wzmacniać·korzyści·immunologiczne·przy·wspólnym·przyjmowaniu",
    170 172 │   				clinicalSignificance: "Can be taken together for enhanced effects",
    171     │ - → → → → polishClinicalSignificance:·"Można·przyjmować·razem·dla·wzmocnionych·efektów",
        173 │ + → → → → polishClinicalSignificance:
        174 │ + → → → → → "Można·przyjmować·razem·dla·wzmocnionych·efektów",
    172 175 │   				recommendation: "Safe to combine, monitor for enhanced benefits",
    173     │ - → → → → polishRecommendation:·"Bezpieczne·do·łączenia,·monitorować·wzmocnione·korzyści",
        176 │ + → → → → polishRecommendation:
        177 │ + → → → → → "Bezpieczne·do·łączenia,·monitorować·wzmocnione·korzyści",
    174 178 │   				evidenceLevel: "MODERATE",
    175 179 │   			},
    ······· │ 
    317 321 │   			withFood: false,
    318 322 │   			contraindications: ["bipolar disorder", "sleep disorders"],
    319     │ - → → → polishContraindications:·["choroba·afektywna·dwubiegunowa",·"zaburzenia·snu"],
        323 │ + → → → polishContraindications:·[
        324 │ + → → → → "choroba·afektywna·dwubiegunowa",
        325 │ + → → → → "zaburzenia·snu",
        326 │ + → → → ],
    320 327 │   			interactions: [
    321 328 │   				{
    ······· │ 
    327 334 │   					polishMechanism: "Potencjalne interakcje z układem serotoninowym",
    328 335 │   					description: "May interact with antidepressant medications",
    329     │ - → → → → → polishDescription:·"Może·wchodzić·w·interakcje·z·lekami·antydepresyjnymi",
    330     │ - → → → → → clinicalSignificance:·"Monitor·for·serotonin·syndrome,·consult·physician",
    331     │ - → → → → → polishClinicalSignificance:·"Monitorować·zespół·serotoninowy,·skonsultować·z·lekarzem",
        336 │ + → → → → → polishDescription:
        337 │ + → → → → → → "Może·wchodzić·w·interakcje·z·lekami·antydepresyjnymi",
        338 │ + → → → → → clinicalSignificance:
        339 │ + → → → → → → "Monitor·for·serotonin·syndrome,·consult·physician",
        340 │ + → → → → → polishClinicalSignificance:
        341 │ + → → → → → → "Monitorować·zespół·serotoninowy,·skonsultować·z·lekarzem",
    332 342 │   					recommendation: "Use with caution under medical supervision",
    333 343 │   					polishRecommendation: "Stosować ostrożnie pod nadzorem lekarza",
    ······· │ 
    371 381 │   				polishMechanism: "Potencjalne interakcje z układem serotoninowym",
    372 382 │   				description: "May interact with antidepressant medications",
    373     │ - → → → → polishDescription:·"Może·wchodzić·w·interakcje·z·lekami·antydepresyjnymi",
    374     │ - → → → → clinicalSignificance:·"Monitor·for·serotonin·syndrome,·consult·physician",
    375     │ - → → → → polishClinicalSignificance:·"Monitorować·zespół·serotoninowy,·skonsultować·z·lekarzem",
        383 │ + → → → → polishDescription:
        384 │ + → → → → → "Może·wchodzić·w·interakcje·z·lekami·antydepresyjnymi",
        385 │ + → → → → clinicalSignificance:
        386 │ + → → → → → "Monitor·for·serotonin·syndrome,·consult·physician",
        387 │ + → → → → polishClinicalSignificance:
        388 │ + → → → → → "Monitorować·zespół·serotoninowy,·skonsultować·z·lekarzem",
    376 389 │   				recommendation: "Use with caution under medical supervision",
    377 390 │   				polishRecommendation: "Stosować ostrożnie pod nadzorem lekarza",
    ······· │ 
    386 399 │   				polishMechanism: "Komplementarne działanie adaptogenne",
    387 400 │   				description: "May enhance stress-reducing benefits when combined",
    388     │ - → → → → polishDescription:·"Może·wzmacniać·korzyści·redukujące·stres·przy·łączeniu",
    389     │ - → → → → clinicalSignificance:·"Take·at·different·times·to·avoid·overstimulation",
    390     │ - → → → → polishClinicalSignificance:·"Przyjmować·o·różnych·porach,·aby·uniknąć·nadmiernej·stymulacji",
        401 │ + → → → → polishDescription:
        402 │ + → → → → → "Może·wzmacniać·korzyści·redukujące·stres·przy·łączeniu",
        403 │ + → → → → clinicalSignificance:
        404 │ + → → → → → "Take·at·different·times·to·avoid·overstimulation",
        405 │ + → → → → polishClinicalSignificance:
        406 │ + → → → → → "Przyjmować·o·różnych·porach,·aby·uniknąć·nadmiernej·stymulacji",
    391 407 │   				recommendation: "Safe to combine but monitor stimulation levels",
    392     │ - → → → → polishRecommendation:·"Bezpieczne·do·łączenia,·ale·monitorować·poziom·stymulacji",
        408 │ + → → → → polishRecommendation:
        409 │ + → → → → → "Bezpieczne·do·łączenia,·ale·monitorować·poziom·stymulacji",
    393 410 │   				evidenceLevel: "MODERATE",
    394 411 │   			},
  

.\src\server\api\routers\supplement.ts:89:18 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    88 │ 			// Build MongoDB filter
  > 89 │ 			const filter: any = {};
       │ 			              ^^^
    90 │ 
    91 │ 			if (category) {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:114:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    113 │ 			// Build sort object
  > 114 │ 			const sort: any = {};
        │ 			            ^^^
    115 │ 			sort[sortBy] = sortOrder === "asc" ? 1 : -1;
    116 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:127:33 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    126 │ 			return {
  > 127 │ 				supplements: supplements as any[],
        │ 				                            ^^^
    128 │ 				totalCount,
    129 │ 				hasMore: offset + limit < totalCount,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:152:25 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    150 │ 			}
    151 │ 
  > 152 │ 			return supplement as any;
        │ 			                     ^^^
    153 │ 		}),
    154 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:165:18 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    163 │ 			const { query, limit, categories, evidenceLevels } = input;
    164 │ 
  > 165 │ 			const filter: any = {
        │ 			              ^^^
    166 │ 				$or: [
    167 │ 					{ name: { $regex: query, $options: "i" } },
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:193:26 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    191 │ 				.lean();
    192 │ 
  > 193 │ 			return supplements as any[];
        │ 			                      ^^^
    194 │ 		}),
    195 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:213:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    212 │ 			// Analyze interactions between supplements
  > 213 │ 			const interactions: any[] = [];
        │ 			                    ^^^
    214 │ 			const warnings: string[] = [];
    215 │ 			const polishWarnings: string[] = [];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:219:26 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    217 │ 			for (let i = 0; i < supplements.length; i++) {
    218 │ 				for (let j = i + 1; j < supplements.length; j++) {
  > 219 │ 					const supplement1 = supplements[i]!;
        │ 					                    ^^^^^^^^^^^^^^^
    220 │ 					const supplement2 = supplements[j]!;
    221 │ 
  

.\src\server\api\routers\supplement.ts:220:26 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    218 │ 				for (let j = i + 1; j < supplements.length; j++) {
    219 │ 					const supplement1 = supplements[i]!;
  > 220 │ 					const supplement2 = supplements[j]!;
        │ 					                    ^^^^^^^^^^^^^^^
    221 │ 
    222 │ 					// Check interactions from supplement1's data
  

.\src\server\api\routers\supplement.ts:223:66 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    222 │ 					// Check interactions from supplement1's data
  > 223 │ 					const supplement1Interactions = supplement1.interactions as any[];
        │ 					                                                            ^^^
    224 │ 					const relevantInteractions = supplement1Interactions.filter(
    225 │ 						(interaction: any) =>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:225:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    223 │ 					const supplement1Interactions = supplement1.interactions as any[];
    224 │ 					const relevantInteractions = supplement1Interactions.filter(
  > 225 │ 						(interaction: any) =>
        │ 						              ^^^
    226 │ 							interaction.substance
    227 │ 								.toLowerCase()
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:234:6 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    232 │ 					);
    233 │ 
  > 234 │ 					relevantInteractions.forEach((interaction: any) => {
        │ 					^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 235 │ 						if (!severityFilter || interaction.severity === severityFilter) {
         ...
  > 255 │ 						}
  > 256 │ 					});
        │ 					^^
    257 │ 				}
    258 │ 			}
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\server\api\routers\supplement.ts:234:49 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    232 │ 					);
    233 │ 
  > 234 │ 					relevantInteractions.forEach((interaction: any) => {
        │ 					                                           ^^^
    235 │ 						if (!severityFilter || interaction.severity === severityFilter) {
    236 │ 							interactions.push({
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:261:48 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    260 │ 			// Determine overall risk level
  > 261 │ 			const severityLevels = interactions.map((i: any) => i.severity);
        │ 			                                            ^^^
    262 │ 			const overallRisk = severityLevels.includes("severe")
    263 │ 				? "high"
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:303:26 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    301 │ 			// Simple recommendation algorithm based on goals and evidence
    302 │ 			const recommendations = allSupplements
  > 303 │ 				.filter((supplement: any) => {
        │ 				                     ^^^
    304 │ 					const supplementData = supplement as any;
    305 │ 					const clinicalApplications =
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:304:43 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    302 │ 			const recommendations = allSupplements
    303 │ 				.filter((supplement: any) => {
  > 304 │ 					const supplementData = supplement as any;
        │ 					                                     ^^^
    305 │ 					const clinicalApplications =
    306 │ 						supplementData.clinicalApplications as any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:306:46 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    304 │ 					const supplementData = supplement as any;
    305 │ 					const clinicalApplications =
  > 306 │ 						supplementData.clinicalApplications as any[];
        │ 						                                       ^^^
    307 │ 
    308 │ 					// Check if supplement addresses any of the user's goals
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:311:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    309 │ 					return goals.some((goal: string) =>
    310 │ 						clinicalApplications.some(
  > 311 │ 							(app: any) =>
        │ 							      ^^^
    312 │ 								app.condition.toLowerCase().includes(goal.toLowerCase()) ||
    313 │ 								app.polishCondition.toLowerCase().includes(goal.toLowerCase()),
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:318:23 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    316 │ 				})
    317 │ 				.slice(0, maxRecommendations)
  > 318 │ 				.map((supplement: any) => ({
        │ 				                  ^^^
    319 │ 					supplement: {
    320 │ 						...supplement,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:321:54 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    319 │ 					supplement: {
    320 │ 						...supplement,
  > 321 │ 						activeCompounds: supplement.activeCompounds as any,
        │ 						                                               ^^^
    322 │ 						clinicalApplications: supplement.clinicalApplications as any,
    323 │ 						mechanisms: supplement.mechanisms as any,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:322:64 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    320 │ 						...supplement,
    321 │ 						activeCompounds: supplement.activeCompounds as any,
  > 322 │ 						clinicalApplications: supplement.clinicalApplications as any,
        │ 						                                                         ^^^
    323 │ 						mechanisms: supplement.mechanisms as any,
    324 │ 						dosageGuidelines: supplement.dosageGuidelines as any,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:323:44 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    321 │ 						activeCompounds: supplement.activeCompounds as any,
    322 │ 						clinicalApplications: supplement.clinicalApplications as any,
  > 323 │ 						mechanisms: supplement.mechanisms as any,
        │ 						                                     ^^^
    324 │ 						dosageGuidelines: supplement.dosageGuidelines as any,
    325 │ 						sideEffects: supplement.sideEffects as any,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:324:56 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    322 │ 						clinicalApplications: supplement.clinicalApplications as any,
    323 │ 						mechanisms: supplement.mechanisms as any,
  > 324 │ 						dosageGuidelines: supplement.dosageGuidelines as any,
        │ 						                                                 ^^^
    325 │ 						sideEffects: supplement.sideEffects as any,
    326 │ 						interactions: supplement.interactions as any,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:325:46 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    323 │ 						mechanisms: supplement.mechanisms as any,
    324 │ 						dosageGuidelines: supplement.dosageGuidelines as any,
  > 325 │ 						sideEffects: supplement.sideEffects as any,
        │ 						                                       ^^^
    326 │ 						interactions: supplement.interactions as any,
    327 │ 						researchStudies: supplement.researchStudies as any,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:326:48 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    324 │ 						dosageGuidelines: supplement.dosageGuidelines as any,
    325 │ 						sideEffects: supplement.sideEffects as any,
  > 326 │ 						interactions: supplement.interactions as any,
        │ 						                                         ^^^
    327 │ 						researchStudies: supplement.researchStudies as any,
    328 │ 					} as SupplementWithRelations,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:327:54 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    325 │ 						sideEffects: supplement.sideEffects as any,
    326 │ 						interactions: supplement.interactions as any,
  > 327 │ 						researchStudies: supplement.researchStudies as any,
        │ 						                                               ^^^
    328 │ 					} as SupplementWithRelations,
    329 │ 					matchingGoals: goals.filter((goal) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:331:43 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    329 │ 					matchingGoals: goals.filter((goal) => {
    330 │ 						const clinicalApplications =
  > 331 │ 							supplement.clinicalApplications as any[];
        │ 							                                   ^^^
    332 │ 						return clinicalApplications.some(
    333 │ 							(app: any) =>
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:333:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    331 │ 							supplement.clinicalApplications as any[];
    332 │ 						return clinicalApplications.some(
  > 333 │ 							(app: any) =>
        │ 							      ^^^
    334 │ 								app.condition.toLowerCase().includes(goal.toLowerCase()) ||
    335 │ 								app.polishCondition.toLowerCase().includes(goal.toLowerCase()),
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:368:31 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    366 │ 		]);
    367 │ 
  > 368 │ 		return categories.map((cat: any) => ({
        │ 		                            ^^^
    369 │ 			category: cat.category,
    370 │ 			count: cat._count.category,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\supplement.ts:395:33 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    393 │ 				.lean();
    394 │ 
  > 395 │ 			return popularSupplements as any[];
        │ 			                             ^^^
    396 │ 		}),
    397 │ });
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\data\supplements\vitamins-minerals-fixed.ts format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
      1     │ - /**␍
      2     │ - ·*·Vitamins·and·Minerals·Database·-·FIXED␍
      3     │ - ·*·Comprehensive·profiles·for·essential·micronutrients·with·cognitive·and·health·benefits␍
      4     │ - ·*/␍
      5     │ - ␍
      6     │ - import·type·{·SupplementWithRelations·}·from·"@/types/supplement";␍
      7     │ - ␍
      8     │ - export·const·vitaminsAndMinerals:·SupplementWithRelations[]·=·[␍
      9     │ - → {␍
     10     │ - → → id:·"vitamin-d3-cholecalciferol",␍
     11     │ - → → name:·"Vitamin·D3·(Cholecalciferol)",␍
     12     │ - → → polishName:·"Witamina·D3·(Cholekalcyferol)",␍
     13     │ - → → scientificName:·"Cholecalciferol",␍
     14     │ - → → commonNames:·["Vitamin·D3",·"Cholecalciferol",·"Sunshine·Vitamin"],␍
     15     │ - → → polishCommonNames:·["Witamina·D3",·"Cholekalcyferol",·"Witamina·słońca"],␍
     16     │ - → → category:·"VITAMIN",␍
     17     │ - → → description:␍
     18     │ - → → → "Essential·fat-soluble·vitamin·crucial·for·bone·health,·immune·function,·and·cognitive·performance",␍
     19     │ - → → polishDescription:␍
     20     │ - → → → "Niezbędna·witamina·rozpuszczalna·w·tłuszczach,·kluczowa·dla·zdrowia·kości,·funkcji·immunologicznej·i·wydajności·poznawczej",␍
     21     │ - ␍
     22     │ - → → activeCompounds:·[␍
     23     │ - → → → {␍
     24     │ - → → → → name:·"Cholecalciferol",␍
     25     │ - → → → → polishName:·"Cholekalcyferol",␍
     26     │ - → → → → concentration:·"100%",␍
     27     │ - → → → → bioavailability:·80,␍
     28     │ - → → → → halfLife:·"15-25·days",␍
     29     │ - → → → → metabolicPathway:·["Liver·hydroxylation",·"Kidney·activation"],␍
     30     │ - → → → → targetReceptors:·["Vitamin·D·receptors·(VDR)"],␍
     31     │ - → → → },␍
     32     │ - → → ],␍
     33     │ - ␍
     34     │ - → → clinicalApplications:·[␍
     35     │ - → → → {␍
     36     │ - → → → → condition:·"Bone·health",␍
     37     │ - → → → → polishCondition:·"Zdrowie·kości",␍
     38     │ - → → → → indication:·"Prevention·of·osteoporosis·and·bone·fractures",␍
     39     │ - → → → → polishIndication:·"Zapobieganie·osteoporozie·i·złamaniom·kości",␍
     40     │ - → → → → efficacy:·"high",␍
     41     │ - → → → → effectivenessRating:·9,␍
     42     │ - → → → → evidenceLevel:·"STRONG",␍
     43     │ - → → → → recommendedDose:·"1000-4000·IU·daily",␍
     44     │ - → → → → duration:·"6-12·months",␍
     45     │ - → → → → effectSize:·0.7,␍
     46     │ - → → → → studyCount:·800,␍
     47     │ - → → → → participantCount:·50000,␍
     48     │ - → → → → recommendationGrade:·"A",␍
     49     │ - → → → },␍
     50     │ - → → ],␍
     51     │ - ␍
     52     │ - → → mechanisms:·[␍
     53     │ - → → → {␍
     54     │ - → → → → id:·"vdr-activation",␍
     55     │ - → → → → name:·"Vitamin·D·receptor·activation",␍
     56     │ - → → → → polishName:·"Aktywacja·receptora·witaminy·D",␍
     57     │ - → → → → pathway:·"Vitamin·D·endocrine·system",␍
     58     │ - → → → → polishPathway:·"Układ·endokrynny·witaminy·D",␍
     59     │ - → → → → description:␍
     60     │ - → → → → → "Vitamin·D3·activates·vitamin·D·receptors·(VDR)·throughout·the·body,·regulating·calcium·absorption,·immune·function,·and·gene·expression",␍
     61     │ - → → → → polishDescription:␍
     62     │ - → → → → → "Witamina·D3·aktywuje·receptory·witaminy·D·(VDR)·w·całym·organizmie,·regulując·absorpcję·wapnia,·funkcję·immunologiczną·i·ekspresję·genów",␍
     63     │ - → → → → evidenceLevel:·"STRONG",␍
     64     │ - → → → → targetSystems:·[␍
     65     │ - → → → → → "Skeletal·system",␍
     66     │ - → → → → → "Immune·system",␍
     67     │ - → → → → → "Nervous·system",␍
     68     │ - → → → → ],␍
     69     │ - → → → → timeToEffect:·"1-2·weeks",␍
     70     │ - → → → → duration:·"Chronic·supplementation·required",␍
     71     │ - → → → },␍
     72     │ - → → ],␍
     73     │ - ␍
     74     │ - → → dosageGuidelines:·{␍
     75     │ - → → → therapeuticRange:·{␍
     76     │ - → → → → min:·1000,␍
     77     │ - → → → → max:·4000,␍
     78     │ - → → → → unit:·"IU",␍
     79     │ - → → → },␍
     80     │ - → → → timing:·["with·meals",·"morning",·"with·fat"],␍
     81     │ - → → → withFood:·true,␍
     82     │ - → → → contraindications:·["hypercalcemia",·"kidney·disease"],␍
     83     │ - → → → polishContraindications:·["hiperkalcemia",·"choroba·nerek"],␍
     84     │ - → → → interactions:·[␍
     85     │ - → → → → {␍
     86     │ - → → → → → substance:·"Thiazide·diuretics",␍
     87     │ - → → → → → polishSubstance:·"Diuretyki·tiazydowe",␍
     88     │ - → → → → → type:·"antagonistic",␍
     89     │ - → → → → → severity:·"moderate",␍
     90     │ - → → → → → mechanism:·"Calcium·metabolism·interference",␍
     91     │ - → → → → → polishMechanism:·"Zakłócenie·metabolizmu·wapnia",␍
     92     │ - → → → → → description:·"May·increase·calcium·levels",␍
     93     │ - → → → → → polishDescription:·"Może·zwiększać·poziomy·wapnia",␍
     94     │ - → → → → → clinicalSignificance:·"Monitor·calcium·levels·regularly",␍
     95     │ - → → → → → polishClinicalSignificance:·"Regularnie·monitorować·poziomy·wapnia",␍
     96     │ - → → → → → recommendation:·"Monitor·calcium·and·vitamin·D·levels",␍
     97     │ - → → → → → polishRecommendation:·"Monitorować·poziomy·wapnia·i·witaminy·D",␍
     98     │ - → → → → → evidenceLevel:·"MODERATE",␍
     99     │ - → → → → },␍
    100     │ - → → → ],␍
    101     │ - → → },␍
    102     │ - ␍
    103     │ - → → sideEffects:·[␍
    104     │ - → → → {␍
    105     │ - → → → → effect:·"Hypercalcemia·(high·doses)",␍
    106     │ - → → → → polishEffect:·"Hiperkalcemia·(wysokie·dawki)",␍
    107     │ - → → → → frequency:·"rare",␍
    108     │ - → → → → severity:·"moderate",␍
    109     │ - → → → → reversible:·true,␍
    110     │ - → → → → dosageDependent:·true,␍
    111     │ - → → → → timeToOnset:·"1-3·months",␍
    112     │ - → → → → management:·"Reduce·dose,·monitor·calcium·levels",␍
    113     │ - → → → → polishManagement:·"Zmniejszyć·dawkę,·monitorować·poziomy·wapnia",␍
    114     │ - → → → },␍
    115     │ - → → ],␍
    116     │ - ␍
    117     │ - → → interactions:·[␍
    118     │ - → → → {␍
    119     │ - → → → → substance:·"Thiazide·diuretics",␍
    120     │ - → → → → polishSubstance:·"Diuretyki·tiazydowe",␍
    121     │ - → → → → type:·"antagonistic",␍
    122     │ - → → → → severity:·"moderate",␍
    123     │ - → → → → mechanism:·"Calcium·metabolism·interference",␍
    124     │ - → → → → polishMechanism:·"Zakłócenie·metabolizmu·wapnia",␍
    125     │ - → → → → description:·"May·increase·calcium·levels",␍
    126     │ - → → → → polishDescription:·"Może·zwiększać·poziomy·wapnia",␍
    127     │ - → → → → clinicalSignificance:·"Monitor·calcium·levels·regularly",␍
    128     │ - → → → → polishClinicalSignificance:·"Regularnie·monitorować·poziomy·wapnia",␍
    129     │ - → → → → recommendation:·"Monitor·calcium·and·vitamin·D·levels",␍
    130     │ - → → → → polishRecommendation:·"Monitorować·poziomy·wapnia·i·witaminy·D",␍
    131     │ - → → → → evidenceLevel:·"MODERATE",␍
    132     │ - → → → },␍
    133     │ - → → → {␍
    134     │ - → → → → substance:·"Calcium",␍
    135     │ - → → → → polishSubstance:·"Wapń",␍
    136     │ - → → → → type:·"synergistic",␍
    137     │ - → → → → severity:·"beneficial",␍
    138     │ - → → → → mechanism:·"Enhanced·calcium·absorption",␍
    139     │ - → → → → polishMechanism:·"Wzmocniona·absorpcja·wapnia",␍
    140     │ - → → → → description:·"Vitamin·D·enhances·calcium·absorption",␍
    141     │ - → → → → polishDescription:·"Witamina·D·wzmacnia·absorpcję·wapnia",␍
    142     │ - → → → → clinicalSignificance:·"Take·together·for·optimal·absorption",␍
    143     │ - → → → → polishClinicalSignificance:·"Przyjmować·razem·dla·optymalnej·absorpcji",␍
    144     │ - → → → → recommendation:·"Take·together·for·bone·health·benefits",␍
    145     │ - → → → → polishRecommendation:·"Przyjmować·razem·dla·korzyści·zdrowotnych·kości",␍
    146     │ - → → → → evidenceLevel:·"STRONG",␍
    147     │ - → → → },␍
    148     │ - → → ],␍
    149     │ - ␍
    150     │ - → → evidenceLevel:·"STRONG",␍
  632 more lines truncated
  

.\src\data\supplements\vitamins-minerals.ts format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
     67  67 │   				polishCondition: "Regulacja nastroju",
     68  68 │   				indication: "Support for seasonal affective disorder and depression",
     69     │ - → → → → polishIndication:·"Wsparcie·dla·sezonowych·zaburzeń·afektywnych·i·depresji",
         69 │ + → → → → polishIndication:
         70 │ + → → → → → "Wsparcie·dla·sezonowych·zaburzeń·afektywnych·i·depresji",
     70  71 │   				efficacy: "moderate",
     71  72 │   				effectivenessRating: 6,
    ······· │ 
     92  93 │   					"Witamina D3 aktywuje receptory witaminy D (VDR) w całym organizmie, regulując absorpcję wapnia, funkcję immunologiczną i ekspresję genów",
     93  94 │   				evidenceLevel: "STRONG",
     94     │ - → → → → targetSystems:·[
     95     │ - → → → → → "Skeletal·system",
     96     │ - → → → → → "Immune·system",
     97     │ - → → → → → "Nervous·system",
     98     │ - → → → → ],
         95 │ + → → → → targetSystems:·["Skeletal·system",·"Immune·system",·"Nervous·system"],
     99  96 │   				timeToEffect: "1-2 weeks",
    100  97 │   				duration: "Chronic supplementation required",
    ······· │ 
    190 187 │   				primaryOutcome: "Cardiovascular risk assessment",
    191 188 │   				polishPrimaryOutcome: "Ocena ryzyka sercowo-naczyniowego",
    192     │ - → → → → findings:·"Vitamin·D·deficiency·associated·with·increased·cardiovascular·risk",
    193     │ - → → → → polishFindings:·"Niedobór·witaminy·D·związany·ze·zwiększonym·ryzykiem·sercowo-naczyniowym",
        189 │ + → → → → findings:
        190 │ + → → → → → "Vitamin·D·deficiency·associated·with·increased·cardiovascular·risk",
        191 │ + → → → → polishFindings:
        192 │ + → → → → → "Niedobór·witaminy·D·związany·ze·zwiększonym·ryzykiem·sercowo-naczyniowym",
    194 193 │   				evidenceLevel: "MODERATE",
    195 194 │   				lastUpdated: "2024-01-15T00:00:00Z",
  

.\src\hooks\use-toast.ts:95:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    93 │ 				addToRemoveQueue(toastId);
    94 │ 			} else {
  > 95 │ 				state.toasts.forEach((toast) => {
       │ 				^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 96 │ 					addToRemoveQueue(toast.id);
  > 97 │ 				});
       │ 				^^
    98 │ 			}
    99 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\hooks\use-toast.ts:132:2 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    130 │ function dispatch(action: Action) {
    131 │ 	memoryState = reducer(memoryState, action);
  > 132 │ 	listeners.forEach((listener) => {
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 133 │ 		listener(memoryState);
  > 134 │ 	});
        │ 	^^
    135 │ }
    136 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\hooks\use-toast.ts:171:8 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This hook specifies more dependencies than necessary: state
  
    169 │ 	const [state, setState] = React.useState<State>(memoryState);
    170 │ 
  > 171 │ 	React.useEffect(() => {
        │ 	      ^^^^^^^^^
    172 │ 		listeners.push(setState);
    173 │ 		return () => {
  
  i This dependency can be removed from the list.
  
    177 │ 			}
    178 │ 		};
  > 179 │ 	}, [state]);
        │ 	    ^^^^^
    180 │ 
    181 │ 	return {
  

.\src\lib\db\check-database.ts:38:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    37 │ 		console.log("\n📋 Sample supplements:");
  > 38 │ 		supplements.forEach((supp: any) => {
       │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 39 │ 			console.log(`  • ${supp.polishName} (${supp.name})`);
  > 40 │ 			console.log(
  > 41 │ 				`    Category: ${supp.category}, Evidence: ${supp.evidenceLevel}`,
  > 42 │ 			);
  > 43 │ 		});
       │ 		^^
    44 │ 
    45 │ 		// Get category distribution
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\db\check-database.ts:38:30 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    37 │ 		console.log("\n📋 Sample supplements:");
  > 38 │ 		supplements.forEach((supp: any) => {
       │ 		                           ^^^
    39 │ 			console.log(`  • ${supp.polishName} (${supp.name})`);
    40 │ 			console.log(
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\check-database.ts:53:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    52 │ 		console.log("\n📊 Category distribution:");
  > 53 │ 		categories.forEach((cat: any) => {
       │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 54 │ 			console.log(`  • ${cat._id}: ${cat.count} supplements`);
  > 55 │ 		});
       │ 		^^
    56 │ 
    57 │ 		console.log("\n✅ Database check complete!\n");
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\db\check-database.ts:53:28 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    52 │ 		console.log("\n📊 Category distribution:");
  > 53 │ 		categories.forEach((cat: any) => {
       │ 		                         ^^^
    54 │ 			console.log(`  • ${cat._id}: ${cat.count} supplements`);
    55 │ 		});
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\animations\hooks.ts:291:60 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    289 │  * Hook for managing spring animations
    290 │  */
  > 291 │ export function useSpringAnimation(value: number, config?: any) {
        │                                                            ^^^
    292 │ 	const shouldReduceMotion = useReducedMotion();
    293 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\migrations\001-migrate-supplements.ts:348:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    346 │ 		if (!validationResult.isValid) {
    347 │ 			console.warn("!� Migration completed with validation issues:");
  > 348 │ 			validationResult.issues.forEach((issue) => console.warn(`   - ${issue}`));
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    349 │ 		}
    350 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\accessibility\graph-accessibility.ts:158:21 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    156 │ 	): void {
    157 │ 		if (currentIndex < nodes.length - 1) {
  > 158 │ 			const nextNode = nodes[currentIndex + 1]!;
        │ 			                 ^^^^^^^^^^^^^^^^^^^^^^^^
    159 │ 			this.setFocusedElement(nextNode.id);
    160 │ 			onNodeFocus(nextNode);
  

.\src\lib\accessibility\graph-accessibility.ts:163:29 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    161 │ 		} else if (-currentIndex - 1 < relationships.length - 1) {
    162 │ 			const relIndex = -currentIndex - 1;
  > 163 │ 			const nextRelationship = relationships[relIndex + 1]!;
        │ 			                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    164 │ 			this.setFocusedElement(nextRelationship.id);
    165 │ 			onRelationshipFocus(nextRelationship);
  

.\src\lib\accessibility\graph-accessibility.ts:169:23 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    167 │ 			// Wrap around to first element
    168 │ 			if (nodes.length > 0) {
  > 169 │ 				const firstNode = nodes[0]!;
        │ 				                  ^^^^^^^^^
    170 │ 				this.setFocusedElement(firstNode.id);
    171 │ 				onNodeFocus(firstNode);
  

.\src\lib\accessibility\graph-accessibility.ts:173:22 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    171 │ 				onNodeFocus(firstNode);
    172 │ 			} else if (relationships.length > 0) {
  > 173 │ 				const firstRel = relationships[0]!;
        │ 				                 ^^^^^^^^^^^^^^^^^
    174 │ 				this.setFocusedElement(firstRel.id);
    175 │ 				onRelationshipFocus(firstRel);
  

.\src\lib\accessibility\graph-accessibility.ts:188:21 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    186 │ 	): void {
    187 │ 		if (currentIndex > 0) {
  > 188 │ 			const prevNode = nodes[currentIndex - 1]!;
        │ 			                 ^^^^^^^^^^^^^^^^^^^^^^^^
    189 │ 			this.setFocusedElement(prevNode.id);
    190 │ 			onNodeFocus(prevNode);
  

.\src\lib\accessibility\graph-accessibility.ts:194:30 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    192 │ 			const relIndex = -currentIndex - 1;
    193 │ 			if (relIndex > 0) {
  > 194 │ 				const prevRelationship = relationships[relIndex - 1]!;
        │ 				                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    195 │ 				this.setFocusedElement(prevRelationship.id);
    196 │ 				onRelationshipFocus(prevRelationship);
  

.\src\lib\accessibility\graph-accessibility.ts:200:23 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    198 │ 				// Wrap to last node
    199 │ 				if (nodes.length > 0) {
  > 200 │ 					const lastNode = nodes[nodes.length - 1]!;
        │ 					                 ^^^^^^^^^^^^^^^^^^^^^^^^
    201 │ 					this.setFocusedElement(lastNode.id);
    202 │ 					onNodeFocus(lastNode);
  

.\src\lib\accessibility\graph-accessibility.ts:208:30 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    206 │ 			// Wrap around to last element
    207 │ 			if (relationships.length > 0) {
  > 208 │ 				const lastRelationship = relationships[relationships.length - 1]!;
        │ 				                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    209 │ 				this.setFocusedElement(lastRelationship.id);
    210 │ 				onRelationshipFocus(lastRelationship);
  

.\src\lib\accessibility\graph-accessibility.ts:212:22 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    210 │ 				onRelationshipFocus(lastRelationship);
    211 │ 			} else if (nodes.length > 0) {
  > 212 │ 				const lastNode = nodes[nodes.length - 1]!;
        │ 				                 ^^^^^^^^^^^^^^^^^^^^^^^^
    213 │ 				this.setFocusedElement(lastNode.id);
    214 │ 				onNodeFocus(lastNode);
  

.\src\lib\accessibility\graph-accessibility.ts:227:16 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    225 │ 	): void {
    226 │ 		if (currentIndex >= 0 && currentIndex < nodes.length) {
  > 227 │ 			onNodeFocus(nodes[currentIndex]!);
        │ 			            ^^^^^^^^^^^^^^^^^^^^
    228 │ 		} else if (currentIndex < 0) {
    229 │ 			const relIndex = -currentIndex - 1;
  

.\src\lib\accessibility\graph-accessibility.ts:231:25 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    229 │ 			const relIndex = -currentIndex - 1;
    230 │ 			if (relIndex < relationships.length) {
  > 231 │ 				onRelationshipFocus(relationships[relIndex]!);
        │ 				                    ^^^^^^^^^^^^^^^^^^^^^^^^
    232 │ 			}
    233 │ 		}
  

.\src\lib\accessibility\graph-accessibility.ts:245:8 lint/complexity/noStaticOnlyClass ━━━━━━━━━━━━━

  × Avoid classes that contain only static members.
  
    243 │  * Accessibility utilities for canvas-based graph visualization
    244 │  */
  > 245 │ export class CanvasAccessibilityManager {
        │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 246 │ 	static addKeyboardNavigation(
         ...
  > 284 │ 	}
  > 285 │ }
        │ ^
    286 │ 
    287 │ /**
  
  i Prefer using simple functions instead of classes with only static members.
  

.\src\lib\accessibility\graph-accessibility.ts:290:8 lint/complexity/noStaticOnlyClass ━━━━━━━━━━━━━

  × Avoid classes that contain only static members.
  
    288 │  * Utility functions for ARIA labels and descriptions
    289 │  */
  > 290 │ export class AriaLabelUtils {
        │        ^^^^^^^^^^^^^^^^^^^^^^
  > 291 │ 	static getNodeAriaLabel(node: KnowledgeNode): string {
         ...
  > 310 │ 	}
  > 311 │ }
        │ ^
    312 │ 
    313 │ // Singleton instance for global use
  
  i Prefer using simple functions instead of classes with only static members.
  

.\src\hooks\useGraphData.ts:267:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    266 │ 		const connectedIds = new Set<string>();
  > 267 │ 		relationships.forEach((rel) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 268 │ 			if (rel.sourceId === focusedNodeId) connectedIds.add(rel.targetId);
  > 269 │ 			if (rel.targetId === focusedNodeId) connectedIds.add(rel.sourceId);
  > 270 │ 		});
        │ 		^^
    271 │ 
    272 │ 		return nodes.filter((node) => connectedIds.has(node.id));
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\db\models\BrainRegion.ts:243:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    241 │ 	if (supplementId) {
    242 │ 		return this.supplementEffects.filter(
  > 243 │ 			(effect: any) => effect.supplementId === supplementId,
        │ 			         ^^^
    244 │ 		);
    245 │ 	}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\BrainRegion.ts:254:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    252 │ 	if (neurotransmitter) {
    253 │ 		return this.neurotransmitterActivity.filter(
  > 254 │ 			(activity: any) =>
        │ 			           ^^^
    255 │ 				activity.neurotransmitter.toLowerCase() ===
    256 │ 				neurotransmitter.toLowerCase(),
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\BrainRegion.ts:343:18 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    341 │ 	description: string;
    342 │ 	polishDescription: string;
  > 343 │ 	anatomicalInfo: any;
        │ 	                ^^^
    344 │ 	neurotransmitterActivity: any[];
    345 │ 	functionalNetworks: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\BrainRegion.ts:344:28 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    342 │ 	polishDescription: string;
    343 │ 	anatomicalInfo: any;
  > 344 │ 	neurotransmitterActivity: any[];
        │ 	                          ^^^
    345 │ 	functionalNetworks: any[];
    346 │ 	supplementEffects: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\BrainRegion.ts:345:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    343 │ 	anatomicalInfo: any;
    344 │ 	neurotransmitterActivity: any[];
  > 345 │ 	functionalNetworks: any[];
        │ 	                    ^^^
    346 │ 	supplementEffects: any[];
    347 │ 	educationalContent: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\BrainRegion.ts:346:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    344 │ 	neurotransmitterActivity: any[];
    345 │ 	functionalNetworks: any[];
  > 346 │ 	supplementEffects: any[];
        │ 	                   ^^^
    347 │ 	educationalContent: any;
    348 │ 	visualizationProperties: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\BrainRegion.ts:347:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    345 │ 	functionalNetworks: any[];
    346 │ 	supplementEffects: any[];
  > 347 │ 	educationalContent: any;
        │ 	                    ^^^
    348 │ 	visualizationProperties: any;
    349 │ 	clinicalSignificance: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\BrainRegion.ts:348:27 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    346 │ 	supplementEffects: any[];
    347 │ 	educationalContent: any;
  > 348 │ 	visualizationProperties: any;
        │ 	                         ^^^
    349 │ 	clinicalSignificance: string;
    350 │ 	polishClinicalSignificance: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\BrainRegion.ts:365:47 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    364 │ 	// Methods
  > 365 │ 	getSupplementEffects(supplementId?: string): any[];
        │ 	                                             ^^^
    366 │ 	getNeurotransmitterActivity(neurotransmitter?: string): any[];
    367 │ 	getEducationalContent(level?: "beginner" | "intermediate" | "expert"): any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\BrainRegion.ts:366:58 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    364 │ 	// Methods
    365 │ 	getSupplementEffects(supplementId?: string): any[];
  > 366 │ 	getNeurotransmitterActivity(neurotransmitter?: string): any[];
        │ 	                                                        ^^^
    367 │ 	getEducationalContent(level?: "beginner" | "intermediate" | "expert"): any;
    368 │ }
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\BrainRegion.ts:367:73 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    365 │ 	getSupplementEffects(supplementId?: string): any[];
    366 │ 	getNeurotransmitterActivity(neurotransmitter?: string): any[];
  > 367 │ 	getEducationalContent(level?: "beginner" | "intermediate" | "expert"): any;
        │ 	                                                                       ^^^
    368 │ }
    369 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\KnowledgeNode.ts:116:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    114 │ KnowledgeNodeSchema.set("toJSON", {
    115 │ 	virtuals: true,
  > 116 │ 	transform: (doc, ret: any) => {
        │ 	                      ^^^
    117 │ 		ret.id = ret._id;
    118 │ 		ret._id = undefined;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\KnowledgeRelationship.ts:125:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    123 │ KnowledgeRelationshipSchema.set("toJSON", {
    124 │ 	virtuals: true,
  > 125 │ 	transform: (doc, ret: any) => {
        │ 	                      ^^^
    126 │ 		ret.id = ret._id;
    127 │ 		ret._id = undefined;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\recommendations.ts:113:17 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    112 │ 			// Build stack considering synergies and budget
  > 113 │ 			const stack: any[] = [];
        │ 			             ^^^
    114 │ 			const addedIds = new Set<string>();
    115 │ 			let totalCost = 0;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\recommendations.ts:328:52 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    327 │ 			// Calculate scores if user profile provided
  > 328 │ 			const comparison = supplements.map((supplement: any) => {
        │ 			                                                ^^^
    329 │ 				const score = input.userProfile
    330 │ 					? recommendationEngine.calculateScore(
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\recommendations.ts:331:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    329 │ 				const score = input.userProfile
    330 │ 					? recommendationEngine.calculateScore(
  > 331 │ 							supplement as any,
        │ 							              ^^^
    332 │ 							input.userProfile,
    333 │ 						)
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\migrations\003-migrate-cognitive-psychology.ts:110:7 lint/suspicious/noRedeclare ━━━━━━━━━━

  × Shouldn't redeclare 'ProductivityTechnique'. Consider to delete it or rename it.
  
    109 │ // Create models
  > 110 │ const ProductivityTechnique =
        │       ^^^^^^^^^^^^^^^^^^^^^
    111 │ 	mongoose.models.ProductivityTechnique ||
    112 │ 	mongoose.model<ProductivityTechnique>(
  
  i 'ProductivityTechnique' is defined here:
  
    12 │ import type {
    13 │ 	CognitiveBias,
  > 14 │ 	ProductivityTechnique,
       │ 	^^^^^^^^^^^^^^^^^^^^^
    15 │ } from "../models/CognitivePsychology";
    16 │ import connectToDatabase from "../mongodb";
  

.\src\lib\db\migrations\003-migrate-cognitive-psychology.ts:116:7 lint/suspicious/noRedeclare ━━━━━━━━━━

  × Shouldn't redeclare 'CognitiveBias'. Consider to delete it or rename it.
  
    114 │ 		ProductivityTechniqueSchema,
    115 │ 	);
  > 116 │ const CognitiveBias =
        │       ^^^^^^^^^^^^^
    117 │ 	mongoose.models.CognitiveBias ||
    118 │ 	mongoose.model<CognitiveBias>("CognitiveBias", CognitiveBiasSchema);
  
  i 'CognitiveBias' is defined here:
  
    11 │ import mongoose, { Schema } from "mongoose";
    12 │ import type {
  > 13 │ 	CognitiveBias,
       │ 	^^^^^^^^^^^^^
    14 │ 	ProductivityTechnique,
    15 │ } from "../models/CognitivePsychology";
  

.\src\lib\db\models\CognitivePsychology.ts:85:12 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    83 │ 		description: string;
    84 │ 		polishDescription: string;
  > 85 │ 		content: any; // Flexible content structure
       │ 		         ^^^
    86 │ 		estimatedTime: number; // minutes
    87 │ 	}>;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:327:18 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    325 │ 	if (supplementId) {
    326 │ 		return this.supplementInteractions.filter(
  > 327 │ 			(interaction: any) => interaction.supplementId === supplementId,
        │ 			              ^^^
    328 │ 		);
    329 │ 	}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:336:42 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    334 │ 	type: "IONOTROPIC" | "METABOTROPIC",
    335 │ ) {
  > 336 │ 	return this.receptors.filter((receptor: any) => receptor.type === type);
        │ 	                                        ^^^
    337 │ };
    338 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:343:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    341 │ ) {
    342 │ 	return this.pathways.filter(
  > 343 │ 		(pathway: any) =>
        │ 		          ^^^
    344 │ 			pathway.function.toLowerCase().includes(functionKeyword.toLowerCase()) ||
    345 │ 			pathway.polishFunction
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:426:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    424 │ 	polishDescription: string;
    425 │ 	category: string;
  > 426 │ 	chemistry: any;
        │ 	           ^^^
    427 │ 	receptors: any[];
    428 │ 	pathways: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:427:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    425 │ 	category: string;
    426 │ 	chemistry: any;
  > 427 │ 	receptors: any[];
        │ 	           ^^^
    428 │ 	pathways: any[];
    429 │ 	functions: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:428:12 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    426 │ 	chemistry: any;
    427 │ 	receptors: any[];
  > 428 │ 	pathways: any[];
        │ 	          ^^^
    429 │ 	functions: any[];
    430 │ 	supplementInteractions: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:429:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    427 │ 	receptors: any[];
    428 │ 	pathways: any[];
  > 429 │ 	functions: any[];
        │ 	           ^^^
    430 │ 	supplementInteractions: any[];
    431 │ 	clinicalAspects: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:430:26 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    428 │ 	pathways: any[];
    429 │ 	functions: any[];
  > 430 │ 	supplementInteractions: any[];
        │ 	                        ^^^
    431 │ 	clinicalAspects: any;
    432 │ 	educationalContent: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:431:19 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    429 │ 	functions: any[];
    430 │ 	supplementInteractions: any[];
  > 431 │ 	clinicalAspects: any;
        │ 	                 ^^^
    432 │ 	educationalContent: any;
    433 │ 	researchStatus: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:432:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    430 │ 	supplementInteractions: any[];
    431 │ 	clinicalAspects: any;
  > 432 │ 	educationalContent: any;
        │ 	                    ^^^
    433 │ 	researchStatus: string;
    434 │ 	lastResearchUpdate: Date;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:437:27 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    435 │ 	keyResearchers: string[];
    436 │ 	researchInstitutions: string[];
  > 437 │ 	visualizationProperties: any;
        │ 	                         ^^^
    438 │ 	tags: string[];
    439 │ 	polishTags: string[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:446:52 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    445 │ 	// Methods
  > 446 │ 	getSupplementInteractions(supplementId?: string): any[];
        │ 	                                                  ^^^
    447 │ 	getReceptorsByType(type: "IONOTROPIC" | "METABOTROPIC"): any[];
    448 │ 	getPathwaysByFunction(functionKeyword: string): any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:447:59 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    445 │ 	// Methods
    446 │ 	getSupplementInteractions(supplementId?: string): any[];
  > 447 │ 	getReceptorsByType(type: "IONOTROPIC" | "METABOTROPIC"): any[];
        │ 	                                                         ^^^
    448 │ 	getPathwaysByFunction(functionKeyword: string): any[];
    449 │ 	getEducationalContent(level?: "beginner" | "intermediate" | "expert"): any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:448:50 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    446 │ 	getSupplementInteractions(supplementId?: string): any[];
    447 │ 	getReceptorsByType(type: "IONOTROPIC" | "METABOTROPIC"): any[];
  > 448 │ 	getPathwaysByFunction(functionKeyword: string): any[];
        │ 	                                                ^^^
    449 │ 	getEducationalContent(level?: "beginner" | "intermediate" | "expert"): any;
    450 │ }
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\NeurotransmitterSystem.ts:449:73 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    447 │ 	getReceptorsByType(type: "IONOTROPIC" | "METABOTROPIC"): any[];
    448 │ 	getPathwaysByFunction(functionKeyword: string): any[];
  > 449 │ 	getEducationalContent(level?: "beginner" | "intermediate" | "expert"): any;
        │ 	                                                                       ^^^
    450 │ }
    451 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\index.ts format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
     26  26 │   
     27  27 │   // AI recommendation models
     28     │ - import·{
     29     │ - → AIRecommendation,
     30     │ - → UserHealthProfile,
     31     │ - }·from·"./AIRecommendations";
         28 │ + import·{·AIRecommendation,·UserHealthProfile·}·from·"./AIRecommendations";
     32  29 │   
     33  30 │   export {
  

.\src\lib\db\models\AIRecommendations.ts:219:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    217 │ 		preferenceUpdates: Array<{
    218 │ 			category: string;
  > 219 │ 			oldValue: any;
        │ 			          ^^^
    220 │ 			newValue: any;
    221 │ 			reason: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\AIRecommendations.ts:220:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    218 │ 			category: string;
    219 │ 			oldValue: any;
  > 220 │ 			newValue: any;
        │ 			          ^^^
    221 │ 			reason: string;
    222 │ 			polishReason: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\AIRecommendations.ts:813:19 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    811 │ 			recommendationId: string;
    812 │ 			field: string;
  > 813 │ 			originalValue: any;
        │ 			               ^^^
    814 │ 			customValue: any;
    815 │ 			reason: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\AIRecommendations.ts:814:17 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    812 │ 			field: string;
    813 │ 			originalValue: any;
  > 814 │ 			customValue: any;
        │ 			             ^^^
    815 │ 			reason: string;
    816 │ 			polishReason: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\Supplement.ts:293:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    291 │ SupplementSchema.set("toJSON", {
    292 │ 	virtuals: true,
  > 293 │ 	transform: (doc, ret: any) => {
        │ 	                      ^^^
    294 │ 		ret.id = ret._id;
    295 │ 		ret._id = undefined;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\mongodb.ts:18:21 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    16 │ }
    17 │ 
  > 18 │ const MONGODB_URI = process.env.MONGODB_URI!;
       │                     ^^^^^^^^^^^^^^^^^^^^^^^^
    19 │ const NODE_ENV = process.env.NODE_ENV || "development";
    20 │ 
  

.\src\lib\db\mongodb.ts:15:6 lint/suspicious/noRedeclare ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Shouldn't redeclare 'mongoose'. Consider to delete it or rename it.
  
    13 │ declare global {
    14 │ 	// biome-ignore lint/style/noVar: Required for Next.js global caching pattern
  > 15 │ 	var mongoose: MongooseCache | undefined;
       │ 	    ^^^^^^^^
    16 │ }
    17 │ 
  
  i 'mongoose' is defined here:
  
    4 │  */
    5 │ 
  > 6 │ import mongoose from "mongoose";
      │        ^^^^^^^^
    7 │ 
    8 │ interface MongooseCache {
  

.\src\lib\db\mongodb.ts:6:8 lint/style/useImportType  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × All these imports are only used as types.
  
    4 │  */
    5 │ 
  > 6 │ import mongoose from "mongoose";
      │        ^^^^^^^^^^^^^^^^^^^^^^^^
    7 │ 
    8 │ interface MongooseCache {
  
  i Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  i Safe fix: Use import type.
  
    6 │ import·type·mongoose·from·"mongoose";
      │        +++++                         

.\src\lib\db\mongodb.ts:14:2 suppressions/unused ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Suppression comment has no effect. Remove the suppression or make sure you are suppressing the correct rule.
  
    13 │ declare global {
  > 14 │ 	// biome-ignore lint/style/noVar: Required for Next.js global caching pattern
       │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    15 │ 	var mongoose: MongooseCache | undefined;
    16 │ }
  

.\src\lib\db\models\ResearchEvidence.ts:346:19 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    344 │ 	if (supplementId) {
    345 │ 		return this.interventions.filter(
  > 346 │ 			(intervention: any) => intervention.supplementId === supplementId,
        │ 			               ^^^
    347 │ 		);
    348 │ 	}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:354:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    352 │ ResearchStudySchema.methods.getPrimaryOutcomes = function () {
    353 │ 	return this.outcomeMeasures.filter(
  > 354 │ 		(outcome: any) => outcome.type === "PRIMARY",
        │ 		          ^^^
    355 │ 	);
    356 │ };
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:360:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    358 │ ResearchStudySchema.methods.getSecondaryOutcomes = function () {
    359 │ 	return this.outcomeMeasures.filter(
  > 360 │ 		(outcome: any) => outcome.type === "SECONDARY",
        │ 		          ^^^
    361 │ 	);
    362 │ };
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:445:11 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    443 │ 	polishKeywords: string[];
    444 │ 	meshTerms: string[];
  > 445 │ 	authors: any[];
        │ 	         ^^^
    446 │ 	studyPopulation: any;
    447 │ 	interventions: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:446:19 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    444 │ 	meshTerms: string[];
    445 │ 	authors: any[];
  > 446 │ 	studyPopulation: any;
        │ 	                 ^^^
    447 │ 	interventions: any[];
    448 │ 	outcomeMeasures: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:447:17 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    445 │ 	authors: any[];
    446 │ 	studyPopulation: any;
  > 447 │ 	interventions: any[];
        │ 	               ^^^
    448 │ 	outcomeMeasures: any[];
    449 │ 	qualityAssessment: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:448:19 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    446 │ 	studyPopulation: any;
    447 │ 	interventions: any[];
  > 448 │ 	outcomeMeasures: any[];
        │ 	                 ^^^
    449 │ 	qualityAssessment: any;
    450 │ 	statisticalAnalysis: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:449:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    447 │ 	interventions: any[];
    448 │ 	outcomeMeasures: any[];
  > 449 │ 	qualityAssessment: any;
        │ 	                   ^^^
    450 │ 	statisticalAnalysis: any;
    451 │ 	fundingConflicts: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:450:23 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    448 │ 	outcomeMeasures: any[];
    449 │ 	qualityAssessment: any;
  > 450 │ 	statisticalAnalysis: any;
        │ 	                     ^^^
    451 │ 	fundingConflicts: any;
    452 │ 	primaryFindings: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:451:20 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    449 │ 	qualityAssessment: any;
    450 │ 	statisticalAnalysis: any;
  > 451 │ 	fundingConflicts: any;
        │ 	                  ^^^
    452 │ 	primaryFindings: string;
    453 │ 	polishPrimaryFindings: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:487:53 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    486 │ 	// Methods
  > 487 │ 	getSupplementInterventions(supplementId?: string): any[];
        │ 	                                                   ^^^
    488 │ 	getPrimaryOutcomes(): any[];
    489 │ 	getSecondaryOutcomes(): any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:488:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    486 │ 	// Methods
    487 │ 	getSupplementInterventions(supplementId?: string): any[];
  > 488 │ 	getPrimaryOutcomes(): any[];
        │ 	                      ^^^
    489 │ 	getSecondaryOutcomes(): any[];
    490 │ 	getQualityScore(): number;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ResearchEvidence.ts:489:26 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    487 │ 	getSupplementInterventions(supplementId?: string): any[];
    488 │ 	getPrimaryOutcomes(): any[];
  > 489 │ 	getSecondaryOutcomes(): any[];
        │ 	                        ^^^
    490 │ 	getQualityScore(): number;
    491 │ }
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\i18n\useTranslation.ts:21:30 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    19 │  * Get nested value from object using dot notation path
    20 │  */
  > 21 │ function getNestedValue(obj: any, path: string): string {
       │                              ^^^
    22 │ 	return path.split(".").reduce((current, key) => current?.[key], obj) ?? path;
    23 │ }
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:378:19 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    376 │ 	polishDescription: string;
    377 │ 	evidenceLevel: string;
  > 378 │ 	activeCompounds: any[];
        │ 	                 ^^^
    379 │ 	mechanisms: any[];
    380 │ 	clinicalApplications: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:379:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    377 │ 	evidenceLevel: string;
    378 │ 	activeCompounds: any[];
  > 379 │ 	mechanisms: any[];
        │ 	            ^^^
    380 │ 	clinicalApplications: any[];
    381 │ 	pharmacokinetics: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:380:24 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    378 │ 	activeCompounds: any[];
    379 │ 	mechanisms: any[];
  > 380 │ 	clinicalApplications: any[];
        │ 	                      ^^^
    381 │ 	pharmacokinetics: any;
    382 │ 	safetyProfile: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:381:20 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    379 │ 	mechanisms: any[];
    380 │ 	clinicalApplications: any[];
  > 381 │ 	pharmacokinetics: any;
        │ 	                  ^^^
    382 │ 	safetyProfile: any;
    383 │ 	sideEffects: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:382:17 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    380 │ 	clinicalApplications: any[];
    381 │ 	pharmacokinetics: any;
  > 382 │ 	safetyProfile: any;
        │ 	               ^^^
    383 │ 	sideEffects: any[];
    384 │ 	interactions: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:383:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    381 │ 	pharmacokinetics: any;
    382 │ 	safetyProfile: any;
  > 383 │ 	sideEffects: any[];
        │ 	             ^^^
    384 │ 	interactions: any[];
    385 │ 	dosageGuidelines: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:384:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    382 │ 	safetyProfile: any;
    383 │ 	sideEffects: any[];
  > 384 │ 	interactions: any[];
        │ 	              ^^^
    385 │ 	dosageGuidelines: any;
    386 │ 	clinicalEvidence: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:385:20 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    383 │ 	sideEffects: any[];
    384 │ 	interactions: any[];
  > 385 │ 	dosageGuidelines: any;
        │ 	                  ^^^
    386 │ 	clinicalEvidence: any;
    387 │ 	economicData: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:386:20 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    384 │ 	interactions: any[];
    385 │ 	dosageGuidelines: any;
  > 386 │ 	clinicalEvidence: any;
        │ 	                  ^^^
    387 │ 	economicData: any;
    388 │ 	qualityConsiderations: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:387:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    385 │ 	dosageGuidelines: any;
    386 │ 	clinicalEvidence: any;
  > 387 │ 	economicData: any;
        │ 	              ^^^
    388 │ 	qualityConsiderations: any;
    389 │ 	educationalContent: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:388:25 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    386 │ 	clinicalEvidence: any;
    387 │ 	economicData: any;
  > 388 │ 	qualityConsiderations: any;
        │ 	                       ^^^
    389 │ 	educationalContent: any;
    390 │ 	tags: string[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\ComprehensiveSupplement.ts:389:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    387 │ 	economicData: any;
    388 │ 	qualityConsiderations: any;
  > 389 │ 	educationalContent: any;
        │ 	                    ^^^
    390 │ 	tags: string[];
    391 │ 	polishTags: string[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\hooks\use-polish-localization.ts:232:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  × This hook specifies more dependencies than necessary: language
  
    230 │ 	const [isLoading, setIsLoading] = useState(true);
    231 │ 
  > 232 │ 	useEffect(() => {
        │ 	^^^^^^^^^
    233 │ 		const loadTranslations = async () => {
    234 │ 			try {
  
  i This dependency can be removed from the list.
  
    258 │ 		loadTranslations();
  > 259 │ 	}, [language, enableMedicalTerms]);
        │ 	    ^^^^^^^^
    260 │ 
    261 │ 	const t = useCallback(
  

.\src\lib\db\models\UserTracking.ts:395:10 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    393 │ 	supplementName: string;
    394 │ 	polishSupplementName: string;
  > 395 │ 	dosage: any;
        │ 	        ^^^
    396 │ 	timing: any;
    397 │ 	context: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:396:10 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    394 │ 	polishSupplementName: string;
    395 │ 	dosage: any;
  > 396 │ 	timing: any;
        │ 	        ^^^
    397 │ 	context: any;
    398 │ 	adherence: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:397:11 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    395 │ 	dosage: any;
    396 │ 	timing: any;
  > 397 │ 	context: any;
        │ 	         ^^^
    398 │ 	adherence: any;
    399 │ 	sideEffects: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:398:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    396 │ 	timing: any;
    397 │ 	context: any;
  > 398 │ 	adherence: any;
        │ 	           ^^^
    399 │ 	sideEffects: any;
    400 │ 	deviceInfo: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:399:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    397 │ 	context: any;
    398 │ 	adherence: any;
  > 399 │ 	sideEffects: any;
        │ 	             ^^^
    400 │ 	deviceInfo: any;
    401 │ }
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:400:14 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    398 │ 	adherence: any;
    399 │ 	sideEffects: any;
  > 400 │ 	deviceInfo: any;
        │ 	            ^^^
    401 │ }
    402 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:407:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    405 │ 	supplementId: string;
    406 │ 	targetEffectName: string;
  > 407 │ 	measurement: any;
        │ 	             ^^^
    408 │ 	context: any;
    409 │ 	notes?: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:408:11 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    406 │ 	targetEffectName: string;
    407 │ 	measurement: any;
  > 408 │ 	context: any;
        │ 	         ^^^
    409 │ 	notes?: string;
    410 │ 	polishNotes?: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:420:12 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    418 │ 	supplementName: string;
    419 │ 	polishSupplementName: string;
  > 420 │ 	schedule: any;
        │ 	          ^^^
    421 │ 	duration: any;
    422 │ 	reminders: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:421:12 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    419 │ 	polishSupplementName: string;
    420 │ 	schedule: any;
  > 421 │ 	duration: any;
        │ 	          ^^^
    422 │ 	reminders: any;
    423 │ 	adherence: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:422:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    420 │ 	schedule: any;
    421 │ 	duration: any;
  > 422 │ 	reminders: any;
        │ 	           ^^^
    423 │ 	adherence: any;
    424 │ 	goals: any[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:423:13 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    421 │ 	duration: any;
    422 │ 	reminders: any;
  > 423 │ 	adherence: any;
        │ 	           ^^^
    424 │ 	goals: any[];
    425 │ 	active: boolean;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:424:9 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    422 │ 	reminders: any;
    423 │ 	adherence: any;
  > 424 │ 	goals: any[];
        │ 	       ^^^
    425 │ 	active: boolean;
    426 │ 	pausedReason?: string;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:438:8 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    436 │ 	description: string;
    437 │ 	polishDescription: string;
  > 438 │ 	data: any;
        │ 	      ^^^
    439 │ 	recommendations: any[];
    440 │ 	userResponse: any;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:439:19 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    437 │ 	polishDescription: string;
    438 │ 	data: any;
  > 439 │ 	recommendations: any[];
        │ 	                 ^^^
    440 │ 	userResponse: any;
    441 │ 	generatedAt: Date;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\models\UserTracking.ts:440:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    438 │ 	data: any;
    439 │ 	recommendations: any[];
  > 440 │ 	userResponse: any;
        │ 	              ^^^
    441 │ 	generatedAt: Date;
    442 │ 	expiresAt?: Date;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\seed.ts:33:72 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    31 │  * Transform static supplement data to MongoDB ComprehensiveSupplement format
    32 │  */
  > 33 │ function transformSupplementData(supplement: SupplementWithRelations): any {
       │                                                                        ^^^
    34 │ 	return {
    35 │ 		id: supplement.id,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\db\seed.ts:962:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    960 │ 			console.log(`${colors.red}❌ Errors: ${errorCount}${colors.reset}`);
    961 │ 			console.log(`\n${colors.yellow}Error details:${colors.reset}`);
  > 962 │ 			errors.forEach(({ supplement, error }) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 963 │ 				console.log(`  - ${supplement}: ${error}`);
  > 964 │ 			});
        │ 			^^
    965 │ 		}
    966 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\db\seed.ts:1082:41 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    1080 │ }
    1081 │ 
  > 1082 │ function getImportanceScore(supplement: any): number {
         │                                         ^^^
    1083 │ 	let score = 0;
    1084 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:80:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    79 │ 			// Build where clause for nodes
  > 80 │ 			const nodeWhere: any = {};
       │ 			                 ^^^
    81 │ 
    82 │ 			if (nodeTypes && nodeTypes.length > 0) {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:143:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    141 │ 				if (centerNode) {
    142 │ 					// Get connected node IDs
  > 143 │ 					const cn: any = centerNode as any;
        │ 					          ^^^
    144 │ 					const connectedNodeIds = new Set([
    145 │ 						centerNodeId,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:143:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    141 │ 				if (centerNode) {
    142 │ 					// Get connected node IDs
  > 143 │ 					const cn: any = centerNode as any;
        │ 					                              ^^^
    144 │ 					const connectedNodeIds = new Set([
    145 │ 						centerNodeId,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:146:43 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    144 │ 					const connectedNodeIds = new Set([
    145 │ 						centerNodeId,
  > 146 │ 						...(cn.sourceRelationships?.map((r: any) => r.targetId) ?? []),
        │ 						                                    ^^^
    147 │ 						...(cn.targetRelationships?.map((r: any) => r.sourceId) ?? []),
    148 │ 					]);
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:147:43 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    145 │ 						centerNodeId,
    146 │ 						...(cn.sourceRelationships?.map((r: any) => r.targetId) ?? []),
  > 147 │ 						...(cn.targetRelationships?.map((r: any) => r.sourceId) ?? []),
        │ 						                                    ^^^
    148 │ 					]);
    149 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:156:34 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    155 │ 			// Get all relationships between the selected nodes
  > 156 │ 			const nodeIds = nodes.map((n: any) => n.id);
        │ 			                              ^^^
    157 │ 			const relationships = await ctx.db.knowledgeRelationship.find({
    158 │ 				where: {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:170:29 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    169 │ 			return {
  > 170 │ 				nodes: nodes.map((node: any) => ({
        │ 				                        ^^^
    171 │ 					...node,
    172 │ 					properties: node.properties as any,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:172:37 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    170 │ 				nodes: nodes.map((node: any) => ({
    171 │ 					...node,
  > 172 │ 					properties: node.properties as any,
        │ 					                               ^^^
    173 │ 					position: node.position as any,
    174 │ 				})) as KnowledgeNodeWithRelations[],
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:173:33 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    171 │ 					...node,
    172 │ 					properties: node.properties as any,
  > 173 │ 					position: node.position as any,
        │ 					                           ^^^
    174 │ 				})) as KnowledgeNodeWithRelations[],
    175 │ 				relationships: relationships.map((rel: any) => ({
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:175:44 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    173 │ 					position: node.position as any,
    174 │ 				})) as KnowledgeNodeWithRelations[],
  > 175 │ 				relationships: relationships.map((rel: any) => ({
        │ 				                                       ^^^
    176 │ 					...rel,
    177 │ 					dosageDependency: rel.dosageDependency as any,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:177:48 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    175 │ 				relationships: relationships.map((rel: any) => ({
    176 │ 					...rel,
  > 177 │ 					dosageDependency: rel.dosageDependency as any,
        │ 					                                          ^^^
    178 │ 				})) as KnowledgeRelationshipWithNodes[],
    179 │ 				totalNodes: nodes.length,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:236:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    234 │ 			return {
    235 │ 				...node,
  > 236 │ 				properties: node.properties as any,
        │ 				                               ^^^
    237 │ 				position: node.position as any,
    238 │ 			} as unknown as KnowledgeNodeWithRelations;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:237:32 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    235 │ 				...node,
    236 │ 				properties: node.properties as any,
  > 237 │ 				position: node.position as any,
        │ 				                           ^^^
    238 │ 			} as unknown as KnowledgeNodeWithRelations;
    239 │ 		}),
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:267:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    266 │ 				const nextNodeIds = new Set<string>();
  > 267 │ 				relationships.forEach((rel) => {
        │ 				^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 268 │ 					allRelationshipIds.add(rel.id);
         ...
  > 274 │ 					}
  > 275 │ 				});
        │ 				^^
    276 │ 
    277 │ 				// Add new nodes to the collection
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\server\api\routers\knowledge.ts:278:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    277 │ 				// Add new nodes to the collection
  > 278 │ 				nextNodeIds.forEach((id) => allNodeIds.add(id));
        │ 				^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    279 │ 				currentNodeIds = nextNodeIds;
    280 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\server\api\routers\knowledge.ts:305:29 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    304 │ 			return {
  > 305 │ 				nodes: nodes.map((node: any) => ({
        │ 				                        ^^^
    306 │ 					...node,
    307 │ 					properties: node.properties as any,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:307:37 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    305 │ 				nodes: nodes.map((node: any) => ({
    306 │ 					...node,
  > 307 │ 					properties: node.properties as any,
        │ 					                               ^^^
    308 │ 					position: node.position as any,
    309 │ 				})) as KnowledgeNodeWithRelations[],
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:308:33 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    306 │ 					...node,
    307 │ 					properties: node.properties as any,
  > 308 │ 					position: node.position as any,
        │ 					                           ^^^
    309 │ 				})) as KnowledgeNodeWithRelations[],
    310 │ 				depth,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:324:17 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    322 │ 			const { query, nodeTypes, categories, evidenceLevels, limit } = input;
    323 │ 
  > 324 │ 			const where: any = {
        │ 			             ^^^
    325 │ 				OR: [
    326 │ 					{ name: { contains: query, mode: "insensitive" } },
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:356:28 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    354 │ 			});
    355 │ 
  > 356 │ 			return nodes.map((node: any) => ({
        │ 			                        ^^^
    357 │ 				...node,
    358 │ 				properties: node.properties as any,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:358:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    356 │ 			return nodes.map((node: any) => ({
    357 │ 				...node,
  > 358 │ 				properties: node.properties as any,
        │ 				                               ^^^
    359 │ 				position: node.position as any,
    360 │ 			})) as KnowledgeNodeWithRelations[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:359:32 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    357 │ 				...node,
    358 │ 				properties: node.properties as any,
  > 359 │ 				position: node.position as any,
        │ 				                           ^^^
    360 │ 			})) as KnowledgeNodeWithRelations[];
    361 │ 		}),
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:393:15 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Forbidden non-null assertion.
  
    391 │ 					// Order nodes according to the path
    392 │ 					const orderedNodes = current.path.map(
  > 393 │ 						(id) => pathNodes.find((node) => node.id === id)!,
        │ 						        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    394 │ 					);
    395 │ 
  

.\src\server\api\routers\knowledge.ts:397:37 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    396 │ 					return {
  > 397 │ 						path: orderedNodes.map((node: any) => ({
        │ 						                              ^^^
    398 │ 							...node,
    399 │ 							properties: node.properties as any,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:399:39 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    397 │ 						path: orderedNodes.map((node: any) => ({
    398 │ 							...node,
  > 399 │ 							properties: node.properties as any,
        │ 							                               ^^^
    400 │ 							position: node.position as any,
    401 │ 						})) as KnowledgeNodeWithRelations[],
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:400:35 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    398 │ 							...node,
    399 │ 							properties: node.properties as any,
  > 400 │ 							position: node.position as any,
        │ 							                           ^^^
    401 │ 						})) as KnowledgeNodeWithRelations[],
    402 │ 						pathLength: current.path.length,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:418:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    416 │ 				});
    417 │ 
  > 418 │ 				relationships.forEach((rel) => {
        │ 				^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 419 │ 					const nextNodeId =
         ...
  > 427 │ 					}
  > 428 │ 				});
        │ 				^^
    429 │ 			}
    430 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\server\api\routers\knowledge.ts:468:40 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    466 │ 			totalNodes,
    467 │ 			totalRelationships,
  > 468 │ 			nodesByType: nodesByType.map((item: any) => ({
        │ 			                                    ^^^
    469 │ 				type: item.type,
    470 │ 				count: item._count.type,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:472:56 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    470 │ 				count: item._count.type,
    471 │ 			})),
  > 472 │ 			relationshipsByType: relationshipsByType.map((item: any) => ({
        │ 			                                                    ^^^
    473 │ 				type: item.type,
    474 │ 				count: item._count.type,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\server\api\routers\knowledge.ts:476:68 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    474 │ 				count: item._count.type,
    475 │ 			})),
  > 476 │ 			evidenceLevelDistribution: evidenceLevelDistribution.map((item: any) => ({
        │ 			                                                                ^^^
    477 │ 				level: item.evidenceLevel,
    478 │ 				count: item._count.evidenceLevel,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\graph-database-integration.ts:62:8 lint/complexity/noStaticOnlyClass ━━━━━━━━━━━━

  × Avoid classes that contain only static members.
  
     60 │  * Integration service for connecting graph visualization with database
     61 │  */
   > 62 │ export class GraphDatabaseIntegrationService {
        │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 63 │ 	/**
         ...
  > 360 │ 	}
  > 361 │ }
        │ ^
    362 │ 
    363 │ // Export a singleton instance for easy use
  
  i Prefer using simple functions instead of classes with only static members.
  

.\src\lib\services\graph-database-integration.ts:341:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    339 │ 			// Find the connected nodes
    340 │ 			const connectedNodeIds = new Set<string>();
  > 341 │ 			connectedRelationships.forEach((rel) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 342 │ 				connectedNodeIds.add(rel.sourceId);
  > 343 │ 				connectedNodeIds.add(rel.targetId);
  > 344 │ 			});
        │ 			^^
    345 │ 
    346 │ 			const connectedNodes = nodes.filter(
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\polish-search-service.ts:167:6 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    165 │ 			for (const [key, synonyms] of Object.entries(POLISH_SYNONYMS)) {
    166 │ 				if (lowerWord.includes(key) || key.includes(lowerWord)) {
  > 167 │ 					synonyms.forEach((syn) => expanded.add(syn));
        │ 					^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    168 │ 				}
    169 │ 			}
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\ai-recommendation-engine.ts:341:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    340 │ 		// Match against health goals
  > 341 │ 		userProfile.healthGoals.forEach((goal) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 342 │ 			maxPossibleScore +=
         ...
  > 364 │ 			}
  > 365 │ 		});
        │ 		^^
    366 │ 
    367 │ 		// Match against health conditions
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\ai-recommendation-engine.ts:368:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    367 │ 		// Match against health conditions
  > 368 │ 		userProfile.polishHealthConditions.forEach((condition) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 369 │ 			maxPossibleScore += 2;
         ...
  > 383 │ 			}
  > 384 │ 		});
        │ 		^^
    385 │ 
    386 │ 		// Age-specific considerations
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\ai-recommendation-engine.ts:412:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    411 │ 		// Check for medication interactions
  > 412 │ 		userProfile.currentMedications.forEach((medication) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 413 │ 			const interaction = supplement.interactions.find(
         ...
  > 439 │ 			}
  > 440 │ 		});
        │ 		^^
    441 │ 
    442 │ 		// Check for allergies
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\ai-recommendation-engine.ts:443:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    442 │ 		// Check for allergies
  > 443 │ 		userProfile.polishAllergies.forEach((allergy) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 444 │ 			supplement.activeCompounds.forEach((compound: ActiveCompound) => {
         ...
  > 450 │ 			});
  > 451 │ 		});
        │ 		^^
    452 │ 
    453 │ 		// Pregnancy/breastfeeding safety
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\ai-recommendation-engine.ts:444:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    442 │ 		// Check for allergies
    443 │ 		userProfile.polishAllergies.forEach((allergy) => {
  > 444 │ 			supplement.activeCompounds.forEach((compound: ActiveCompound) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 445 │ 				if (
         ...
  > 449 │ 				}
  > 450 │ 			});
        │ 			^^
    451 │ 		});
    452 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\ai-recommendation-engine.ts:608:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    607 │ 		// Find matching health goals
  > 608 │ 		userProfile.healthGoals.forEach((goal) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 609 │ 			const matchingApps = supplement.clinicalApplications.filter(
         ...
  > 619 │ 			}
  > 620 │ 		});
        │ 		^^
    621 │ 
    622 │ 		// Age-specific factors
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\ai-recommendation-engine.ts:665:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    664 │ 		// Check medication interactions
  > 665 │ 		userProfile.currentMedications.forEach((medication) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 666 │ 			const interaction = supplement.interactions.find(
         ...
  > 688 │ 			}
  > 689 │ 		});
        │ 		^^
    690 │ 
    691 │ 		// Check for common side effects
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\ai-recommendation-engine.ts:692:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    691 │ 		// Check for common side effects
  > 692 │ 		supplement.sideEffects.forEach((sideEffect: SideEffect) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 693 │ 			if (
         ...
  > 708 │ 			}
  > 709 │ 		});
        │ 		^^
    710 │ 
    711 │ 		return warnings;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\ai-recommendation-engine.ts:766:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    765 │ 		// Match benefits to user goals
  > 766 │ 		userProfile.healthGoals.forEach((goal) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 767 │ 			const matchingApps = supplement.clinicalApplications.filter(
         ...
  > 800 │ 			});
  > 801 │ 		});
        │ 		^^
    802 │ 
    803 │ 		return benefits;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\ai-recommendation-engine.ts:774:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    772 │ 			);
    773 │ 
  > 774 │ 			matchingApps.forEach((app: ClinicalApplication) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 775 │ 				const probability = this.calculateBenefitProbability(
         ...
  > 799 │ 				});
  > 800 │ 			});
        │ 			^^
    801 │ 		});
    802 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\recommendation-engine.ts:226:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    224 │ 	 */
    225 │ 	async generateRecommendations(
  > 226 │ 		supplements: Array<any>,
        │ 		                   ^^^
    227 │ 		userProfile: UserProfile,
    228 │ 		limit = 10,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\recommendation-engine.ts:302:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    300 │ 	 */
    301 │ 	private generateReasoning(
  > 302 │ 		supplement: any,
        │ 		            ^^^
    303 │ 		matchedGoals: HealthGoal[],
    304 │ 		userProfile: UserProfile,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\recommendation-engine.ts:331:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    329 │ 	 */
    330 │ 	private generateSafetyNotes(
  > 331 │ 		supplement: any,
        │ 		            ^^^
    332 │ 		userProfile: UserProfile,
    333 │ 		language: "en" | "pl",
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\recommendation-engine.ts:362:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    360 │ 	 */
    361 │ 	private checkContraindications(
  > 362 │ 		supplement: any,
        │ 		            ^^^
    363 │ 		userProfile: UserProfile,
    364 │ 	): Array<{
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\comprehensive-supplements-service.ts:72:3 lint/complexity/noForEach ━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
     70 │ 	 */
     71 │ 	private buildSearchIndex(): void {
   > 72 │ 		this.supplements.forEach((supplement) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 73 │ 			const searchTerms = new Set<string>();
         ...
  > 110 │ 			this.searchIndex.set(supplement.id, searchTerms);
  > 111 │ 		});
        │ 		^^
    112 │ 	}
    113 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\comprehensive-supplements-service.ts:82:4 lint/complexity/noForEach ━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    81 │ 			// Add common names
  > 82 │ 			supplement.commonNames.forEach((name) =>
       │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 83 │ 				searchTerms.add(name.toLowerCase()),
  > 84 │ 			);
       │ 			^
    85 │ 			supplement.polishCommonNames.forEach((name) =>
    86 │ 				searchTerms.add(name.toLowerCase()),
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\comprehensive-supplements-service.ts:85:4 lint/complexity/noForEach ━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    83 │ 				searchTerms.add(name.toLowerCase()),
    84 │ 			);
  > 85 │ 			supplement.polishCommonNames.forEach((name) =>
       │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 86 │ 				searchTerms.add(name.toLowerCase()),
  > 87 │ 			);
       │ 			^
    88 │ 
    89 │ 			// Add active compounds
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\comprehensive-supplements-service.ts:90:4 lint/complexity/noForEach ━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    89 │ 			// Add active compounds
  > 90 │ 			supplement.activeCompounds.forEach((compound) => {
       │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 91 │ 				searchTerms.add(compound.name.toLowerCase());
  > 92 │ 				searchTerms.add(compound.polishName?.toLowerCase() || "");
  > 93 │ 			});
       │ 			^^
    94 │ 
    95 │ 			// Add clinical applications
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\comprehensive-supplements-service.ts:96:4 lint/complexity/noForEach ━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
     95 │ 			// Add clinical applications
   > 96 │ 			supplement.clinicalApplications.forEach((app) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 97 │ 				searchTerms.add(app.condition.toLowerCase());
   > 98 │ 				searchTerms.add(app.polishCondition.toLowerCase());
   > 99 │ 			});
        │ 			^^
    100 │ 
    101 │ 			// Add mechanisms
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\comprehensive-supplements-service.ts:102:4 lint/complexity/noForEach ━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    101 │ 			// Add mechanisms
  > 102 │ 			supplement.mechanisms.forEach((mechanism) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 103 │ 				searchTerms.add(mechanism.pathway.toLowerCase());
  > 104 │ 				searchTerms.add(mechanism.polishPathway?.toLowerCase() || "");
  > 105 │ 			});
        │ 			^^
    106 │ 
    107 │ 			// Add tags
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\comprehensive-supplements-service.ts:108:4 lint/complexity/noForEach ━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    107 │ 			// Add tags
  > 108 │ 			supplement.tags.forEach((tag) => searchTerms.add(tag.toLowerCase()));
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    109 │ 
    110 │ 			this.searchIndex.set(supplement.id, searchTerms);
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\comprehensive-supplements-service.ts:153:32 lint/style/noNonNullAssertion ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    151 │ 						0,
    152 │ 					) / supplement.clinicalApplications.length;
  > 153 │ 				return avgEffectiveness >= filters.minEffectiveness!;
        │ 				                           ^^^^^^^^^^^^^^^^^^^^^^^^^
    154 │ 			});
    155 │ 		}
  

.\src\lib\services\comprehensive-supplements-service.ts:162:6 lint/style/noNonNullAssertion ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    160 │ 				(supplement) =>
    161 │ 					supplement.economicData.averageCostPerMonth.average <=
  > 162 │ 					filters.maxCostPerMonth!,
        │ 					^^^^^^^^^^^^^^^^^^^^^^^^
    163 │ 			);
    164 │ 		}
  

.\src\lib\services\comprehensive-supplements-service.ts:440:3 lint/complexity/noForEach ━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    438 │ 		);
    439 │ 
  > 440 │ 		healthGoals.forEach((goal) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 441 │ 			const goalLower = goal.toLowerCase();
         ...
  > 501 │ 			});
  > 502 │ 		});
        │ 		^^
    503 │ 
    504 │ 		// Sort by relevance score
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\comprehensive-supplements-service.ts:443:4 lint/complexity/noForEach ━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    441 │ 			const goalLower = goal.toLowerCase();
    442 │ 
  > 443 │ 			availableSupplements.forEach((supplement) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 444 │ 				let relevanceScore = 0;
         ...
  > 500 │ 				}
  > 501 │ 			});
        │ 			^^
    502 │ 		});
    503 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\comprehensive-supplements-service.ts:451:5 lint/complexity/noForEach ━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    450 │ 				// Check clinical applications
  > 451 │ 				supplement.clinicalApplications.forEach((app) => {
        │ 				^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 452 │ 					if (
         ...
  > 463 │ 					}
  > 464 │ 				});
        │ 				^^
    465 │ 
    466 │ 				// Check safety for user profile
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\comprehensive-supplements-service.ts:515:3 lint/complexity/noForEach ━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    513 │ 	getCategories(): SupplementCategory[] {
    514 │ 		const categories = new Set<SupplementCategory>();
  > 515 │ 		this.supplements.forEach((supplement) =>
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 516 │ 			categories.add(supplement.category),
  > 517 │ 		);
        │ 		^
    518 │ 		return Array.from(categories);
    519 │ 	}
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\evidence-based-research-service.ts:219:29 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    217 │ 	private apiKey: string;
    218 │ 	private baseUrl = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/";
  > 219 │ 	private cache: Map<string, any> = new Map();
        │ 	                           ^^^
    220 │ 	private cacheExpiry = 24 * 60 * 60 * 1000; // 24 hours
    221 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\evidence-based-research-service.ts:303:41 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    301 │ 						pmid: id,
    302 │ 						title: article.title || "",
  > 303 │ 						authors: article.authors?.map((a: any) => a.name) || [],
        │ 						                                  ^^^
    304 │ 						journal: article.fulljournalname || article.source || "",
    305 │ 						year: Number.parseInt(article.pubdate?.split(" ")[0]) || 0,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\evidence-based-research-service.ts:373:55 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    372 │ 		// Analyze evidence levels
  > 373 │ 		const studyTypes: Record<StudyType, number> = {} as any;
        │ 		                                                    ^^^
    374 │ 		const evidenceLevels: Record<EvidenceLevel, number> = {} as any;
    375 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\evidence-based-research-service.ts:374:63 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    372 │ 		// Analyze evidence levels
    373 │ 		const studyTypes: Record<StudyType, number> = {} as any;
  > 374 │ 		const evidenceLevels: Record<EvidenceLevel, number> = {} as any;
        │ 		                                                            ^^^
    375 │ 
    376 │ 		studies.forEach((study) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\evidence-based-research-service.ts:376:3 lint/complexity/noForEach ━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    374 │ 		const evidenceLevels: Record<EvidenceLevel, number> = {} as any;
    375 │ 
  > 376 │ 		studies.forEach((study) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 377 │ 			if (study.studyType) {
         ...
  > 382 │ 			evidenceLevels[evidenceLevel] = (evidenceLevels[evidenceLevel] || 0) + 1;
  > 383 │ 		});
        │ 		^^
    384 │ 
    385 │ 		// Determine overall evidence level
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\evidence-based-research-service.ts:518:40 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    517 │ 	// Private helper methods
  > 518 │ 	private getCachedResult(key: string): any {
        │ 	                                      ^^^
    519 │ 		const cached = this.cache.get(key);
    520 │ 		if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\evidence-based-research-service.ts:526:45 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    524 │ 	}
    525 │ 
  > 526 │ 	private setCachedResult(key: string, data: any): void {
        │ 	                                           ^^^
    527 │ 		this.cache.set(key, {
    528 │ 			data,
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\evidence-based-research-service.ts:550:43 lint/suspicious/noExplicitAny ━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    548 │ 	}
    549 │ 
  > 550 │ 	private calculateRelevanceScore(article: any, query: string): number {
        │ 	                                         ^^^
    551 │ 		let score = 0;
    552 │ 		const queryTerms = query.toLowerCase().split(" ");
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\evidence-based-research-service.ts:555:3 lint/complexity/noForEach ━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    553 │ 		const title = (article.title || "").toLowerCase();
    554 │ 
  > 555 │ 		queryTerms.forEach((term) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 556 │ 			if (title.includes(term)) score += 2;
  > 557 │ 		});
        │ 		^^
    558 │ 
    559 │ 		// Boost for recent studies
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-export-service.ts:31:27 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    29 │ 	configuration: {
    30 │ 		layout: string;
  > 31 │ 		filters: Record<string, any>;
       │ 		                        ^^^
    32 │ 		viewSettings: Record<string, any>;
    33 │ 	};
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\graph-export-service.ts:32:32 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    30 │ 		layout: string;
    31 │ 		filters: Record<string, any>;
  > 32 │ 		viewSettings: Record<string, any>;
       │ 		                             ^^^
    33 │ 	};
    34 │ 	polishMetadata: {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\graph-export-service.ts:83:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    81 │ 		const polishTextIssues: string[] = [];
    82 │ 		if (exportOptions.preservePolishChars) {
  > 83 │ 			nodes.forEach((node) => {
       │ 			^^^^^^^^^^^^^^^^^^^^^^^^^
  > 84 │ 				if (node.polishName && !validatePolishTextEncoding(node.polishName)) {
        ...
  > 92 │ 				}
  > 93 │ 			});
       │ 			^^
    94 │ 
    95 │ 			relationships.forEach((rel) => {
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-export-service.ts:95:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
     93 │ 			});
     94 │ 
   > 95 │ 			relationships.forEach((rel) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 96 │ 				if (
         ...
  > 103 │ 				}
  > 104 │ 			});
        │ 			^^
    105 │ 		}
    106 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-export-service.ts:561:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    559 │ 		// Ensure all text elements preserve Polish characters
    560 │ 		const textElements = svgElement.querySelectorAll("text, tspan");
  > 561 │ 		textElements.forEach((element) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 562 │ 			if (element.textContent) {
         ...
  > 566 │ 			}
  > 567 │ 		});
        │ 		^^
    568 │ 	}
    569 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-export-service.ts:597:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    595 │ 		const issues: string[] = [];
    596 │ 
  > 597 │ 		data.nodes.forEach((node) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 598 │ 			if (node.polishName && !validatePolishTextEncoding(node.polishName)) {
  > 599 │ 				issues.push(`Błąd kodowania w polskiej nazwie węzła: ${node.id}`);
  > 600 │ 			}
  > 601 │ 		});
        │ 		^^
    602 │ 
    603 │ 		data.relationships.forEach((rel) => {
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-export-service.ts:603:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    601 │ 		});
    602 │ 
  > 603 │ 		data.relationships.forEach((rel) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 604 │ 			if (
         ...
  > 609 │ 			}
  > 610 │ 		});
        │ 		^^
    611 │ 
    612 │ 		return issues;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-export-service.ts:655:28 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    653 │ 						break;
    654 │ 					case "type":
  > 655 │ 						node.type = value as any;
        │ 						                     ^^^
    656 │ 						break;
    657 │ 					case "description":
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\graph-export-service.ts:667:37 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    665 │ 						break;
    666 │ 					case "evidenceLevel":
  > 667 │ 						node.evidenceLevel = value as any;
        │ 						                              ^^^
    668 │ 						break;
    669 │ 					case "size":
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\graph-export-service.ts:748:27 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    746 │ 						break;
    747 │ 					case "type":
  > 748 │ 						rel.type = value as any;
        │ 						                    ^^^
    749 │ 						break;
    750 │ 					case "strength":
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\graph-export-service.ts:763:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    761 │ 						break;
    762 │ 					case "evidenceLevel":
  > 763 │ 						rel.evidenceLevel = value as any;
        │ 						                             ^^^
    764 │ 						break;
    765 │ 				}
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\supplement-interaction-service.ts:237:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    235 │ 		const interactions: MedicationInteraction[] = [];
    236 │ 
  > 237 │ 		supplementIds.forEach((supplementId) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 238 │ 			medications.forEach((medication) => {
         ...
  > 246 │ 			});
  > 247 │ 		});
        │ 		^^
    248 │ 
    249 │ 		return interactions;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\supplement-interaction-service.ts:238:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    237 │ 		supplementIds.forEach((supplementId) => {
  > 238 │ 			medications.forEach((medication) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 239 │ 				const interaction = this.findMedicationInteraction(
         ...
  > 245 │ 				}
  > 246 │ 			});
        │ 			^^
    247 │ 		});
    248 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\supplement-interaction-service.ts:264:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    263 │ 		// Create nodes for each supplement
  > 264 │ 		supplementIds.forEach((id) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 265 │ 			const supplement = comprehensiveSupplementsService.getSupplementById(id);
         ...
  > 290 │ 			}
  > 291 │ 		});
        │ 		^^
    292 │ 
    293 │ 		// Create edges for interactions
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\supplement-interaction-service.ts:347:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    345 │ 		const polishWarnings: string[] = [];
    346 │ 
  > 347 │ 		matrix.interactions.forEach((interaction) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 348 │ 			if (interaction.severity === "CONTRAINDICATED") {
         ...
  > 362 │ 			}
  > 363 │ 		});
        │ 		^^
    364 │ 
    365 │ 		return {
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\supplement-interaction-service.ts:475:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    473 │ 		const interactions: InteractionPair[] = [];
    474 │ 
  > 475 │ 		allSupplements.forEach((otherId) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 476 │ 			if (otherId !== supplementId) {
         ...
  > 481 │ 			}
  > 482 │ 		});
        │ 		^^
    483 │ 
    484 │ 		return interactions;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:146:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    145 │ 	private generateSupplementNodes() {
  > 146 │ 		this.supplements.forEach((supplement) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 147 │ 			const node: KnowledgeNode = {
         ...
  > 173 │ 			this.nodes.push(node);
  > 174 │ 		});
        │ 		^^
    175 │ 	}
    176 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:217:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    215 │ 		];
    216 │ 
  > 217 │ 		neurotransmitters.forEach((nt) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 218 │ 			const node: KnowledgeNode = {
         ...
  > 249 │ 			this.nodes.push(node);
  > 250 │ 		});
        │ 		^^
    251 │ 	}
    252 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:287:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    285 │ 		];
    286 │ 
  > 287 │ 		brainRegions.forEach((region) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 288 │ 			const node: KnowledgeNode = {
         ...
  > 316 │ 			this.nodes.push(node);
  > 317 │ 		});
        │ 		^^
    318 │ 	}
    319 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:354:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    352 │ 		];
    353 │ 
  > 354 │ 		cognitiveFunctions.forEach((func) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 355 │ 			const node: KnowledgeNode = {
         ...
  > 383 │ 			this.nodes.push(node);
  > 384 │ 		});
        │ 		^^
    385 │ 	}
    386 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:415:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    413 │ 		];
    414 │ 
  > 415 │ 		pathways.forEach((pathway) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 416 │ 			const node: KnowledgeNode = {
         ...
  > 441 │ 			this.nodes.push(node);
  > 442 │ 		});
        │ 		^^
    443 │ 	}
    444 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:446:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    445 │ 	private generateMechanismNodes() {
  > 446 │ 		neuroplasticityMechanisms.forEach((mechanism) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 447 │ 			const node: KnowledgeNode = {
         ...
  > 471 │ 			this.nodes.push(node);
  > 472 │ 		});
        │ 		^^
    473 │ 	}
    474 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:476:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    475 │ 	private generateSupplementRelationships() {
  > 476 │ 		this.supplements.forEach((supplement) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 477 │ 			// Create relationships based on clinical applications
         ...
  > 525 │ 			});
  > 526 │ 		});
        │ 		^^
    527 │ 	}
    528 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:478:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    476 │ 		this.supplements.forEach((supplement) => {
    477 │ 			// Create relationships based on clinical applications
  > 478 │ 			supplement.clinicalApplications.forEach((application) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 479 │ 				const targetNodeId = this.findCognitiveFunctionNodeId(
         ...
  > 498 │ 				}
  > 499 │ 			});
        │ 			^^
    500 │ 
    501 │ 			// Create relationships with neurotransmitters
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:502:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    501 │ 			// Create relationships with neurotransmitters
  > 502 │ 			supplement.activeCompounds.forEach((compound) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 503 │ 				if (compound.name) {
         ...
  > 524 │ 				}
  > 525 │ 			});
        │ 			^^
    526 │ 		});
    527 │ 	}
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:507:6 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    505 │ 						compound.name,
    506 │ 					);
  > 507 │ 					neurotransmitterIds.forEach((ntId) => {
        │ 					^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 508 │ 						const relationship: KnowledgeRelationship = {
         ...
  > 522 │ 						this.relationships.push(relationship);
  > 523 │ 					});
        │ 					^^
    524 │ 				}
    525 │ 			});
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:530:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    529 │ 	private generateSynergyRelationships() {
  > 530 │ 		synergyData.forEach((synergy) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 531 │ 			// Create relationships between all supplement pairs in the synergy
         ...
  > 555 │ 			}
  > 556 │ 		});
        │ 		^^
    557 │ 	}
    558 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:560:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    559 │ 	private generateNeuroplasticityRelationships() {
  > 560 │ 		neuroplasticityMechanisms.forEach((mechanism) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 561 │ 			// Connect mechanisms to brain regions
         ...
  > 612 │ 			});
  > 613 │ 		});
        │ 		^^
    614 │ 	}
    615 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:562:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    560 │ 		neuroplasticityMechanisms.forEach((mechanism) => {
    561 │ 			// Connect mechanisms to brain regions
  > 562 │ 			mechanism.affectedBrainRegions.forEach((region: string) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 563 │ 				const brainRegionId = this.findBrainRegionNodeId(region);
         ...
  > 580 │ 				}
  > 581 │ 			});
        │ 			^^
    582 │ 
    583 │ 			// Connect supplements to mechanisms
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\graph-data-service.ts:584:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    583 │ 			// Connect supplements to mechanisms
  > 584 │ 			this.supplements.forEach((supplement) => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 585 │ 				if (
         ...
  > 611 │ 				}
  > 612 │ 			});
        │ 			^^
    613 │ 		});
    614 │ 	}
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\synergistic-analysis-engine.ts:35:19 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    33 │ 	safetyProfile: "safe" | "cautious" | "contraindicated";
    34 │ 	clinicalApplications: ClinicalApplication[];
  > 35 │ 	researchStudies: any[];
       │ 	                 ^^^
    36 │ 	recommendations: string[];
    37 │ 	polishRecommendations: string[];
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\synergistic-analysis-engine.ts:241:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    240 │ 		// Check against known synergistic effects
  > 241 │ 		synergisticEffects.forEach((effect) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 242 │ 			if (effect.supplements.includes(supplement.id)) {
         ...
  > 261 │ 			}
  > 262 │ 		});
        │ 		^^
    263 │ 
    264 │ 		return synergies;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\synergistic-analysis-engine.ts:272:9 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    270 │ 		supplement1: ComprehensiveSupplementProfile,
    271 │ 		supplement2: ComprehensiveSupplementProfile,
  > 272 │ 		pair: any,
        │ 		      ^^^
    273 │ 	): SynergyAnalysis {
    274 │ 		const isSynergistic = pair.safety !== "contraindicated" && pair.strength > 0.5;
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\synergistic-analysis-engine.ts:407:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    405 │ 		let totalComparisons = 0;
    406 │ 
  > 407 │ 		mechanisms1.forEach(m1 => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 408 │ 			mechanisms2.forEach(m2 => {
         ...
  > 412 │ 			});
  > 413 │ 		});
        │ 		^^
    414 │ 
    415 │ 		return totalComparisons > 0 ? compatibilityScore / totalComparisons : 0;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\synergistic-analysis-engine.ts:408:4 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    407 │ 		mechanisms1.forEach(m1 => {
  > 408 │ 			mechanisms2.forEach(m2 => {
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 409 │ 				totalComparisons++;
  > 410 │ 				const compatibility = this.assessMechanismCompatibility(m1, m2);
  > 411 │ 				compatibilityScore += compatibility;
  > 412 │ 			});
        │ 			^^
    413 │ 		});
    414 │ 
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\synergistic-analysis-engine.ts:468:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    466 │ 		const mechanismGroups = new Map<string, MechanismOfAction[]>();
    467 │ 
  > 468 │ 		allMechanisms.forEach(mechanism => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 469 │ 			const targetSystems = mechanism.targetSystems || [];
         ...
  > 474 │ 			mechanismGroups.get(key)!.push(mechanism);
  > 475 │ 		});
        │ 		^^
    476 │ 
    477 │ 		mechanismGroups.forEach((mechanisms, _key) => {
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\services\synergistic-analysis-engine.ts:470:16 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━

  × Template literals are preferred over string concatenation.
  
    468 │ 		allMechanisms.forEach(mechanism => {
    469 │ 			const targetSystems = mechanism.targetSystems || [];
  > 470 │ 			const key = targetSystems.join(",") + "|" + mechanism.pathway;
        │ 			            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    471 │ 			if (!mechanismGroups.has(key)) {
    472 │ 				mechanismGroups.set(key, []);
  
  i Unsafe fix: Use a template literal.
  
    468 468 │   		allMechanisms.forEach(mechanism => {␍
    469 469 │   			const targetSystems = mechanism.targetSystems || [];␍
    470     │ - → → → const·key·=·targetSystems.join(",")·+·"|"·+·mechanism.pathway;␍
        470 │ + → → → const·key·=·`${targetSystems.join(",")}|${mechanism.pathway}`;␍
    471 471 │   			if (!mechanismGroups.has(key)) {␍
    472 472 │   				mechanismGroups.set(key, []);␍
  

.\src\lib\services\synergistic-analysis-engine.ts:474:4 lint/style/noNonNullAssertion  FIXABLE  ━━━━━━━━━━

  × Forbidden non-null assertion.
  
    472 │ 				mechanismGroups.set(key, []);
    473 │ 			}
  > 474 │ 			mechanismGroups.get(key)!.push(mechanism);
        │ 			^^^^^^^^^^^^^^^^^^^^^^^^^
    475 │ 		});
    476 │ 
  
  i Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
    472 472 │   				mechanismGroups.set(key, []);␍
    473 473 │   			}␍
    474     │ - → → → mechanismGroups.get(key)!.push(mechanism);␍
        474 │ + → → → mechanismGroups.get(key)?.push(mechanism);␍
    475 475 │   		});␍
    476 476 │   ␍
  

.\src\server\api\routers\advanced-search.ts:57:22 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    56 │ 			// Build MongoDB query
  > 57 │ 			const mongoQuery: any = { isActive: true };
       │ 			                  ^^^
    58 │ 
    59 │ 			// Category filter
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\mongodb-supplements-service.ts:45:16 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    43 │ 		await connectToDatabase();
    44 │ 
  > 45 │ 		const query: any = { isActive: true };
       │ 		             ^^^
    46 │ 
    47 │ 		// Apply filters
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\mongodb-supplements-service.ts:110:15 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    108 │ 		const sortField = pagination?.sortBy || "polishName";
    109 │ 		const sortOrder = pagination?.sortOrder === "desc" ? -1 : 1;
  > 110 │ 		const sort: any = { [sortField]: sortOrder };
        │ 		            ^^^
    111 │ 
    112 │ 		const [supplements, total] = await Promise.all([
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\mongodb-supplements-service.ts:321:41 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    319 │ 	 * Create new supplement (admin only)
    320 │ 	 */
  > 321 │ 	async createSupplement(supplementData: any) {
        │ 	                                       ^^^
    322 │ 		await connectToDatabase();
    323 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\mongodb-supplements-service.ts:331:49 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    329 │ 	 * Update supplement (admin only)
    330 │ 	 */
  > 331 │ 	async updateSupplement(id: string, updateData: any) {
        │ 	                                               ^^^
    332 │ 		await connectToDatabase();
    333 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\src\lib\services\ai-recommendation-engine.ts format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    682 682 │   					message: `Potential interaction with ${medication.name}`,
    683 683 │   					polishMessage: `Potencjalna interakcja z ${medication.polishName}`,
    684     │ - → → → → → recommendation:·interaction.recommendation·||·"Consult·healthcare·provider",
    685     │ - → → → → → polishRecommendation:·interaction.polishRecommendation·||·"Skonsultuj·się·z·lekarzem",
        684 │ + → → → → → recommendation:
        685 │ + → → → → → → interaction.recommendation·||·"Consult·healthcare·provider",
        686 │ + → → → → → polishRecommendation:
        687 │ + → → → → → → interaction.polishRecommendation·||·"Skonsultuj·się·z·lekarzem",
    686 688 │   					sources: [],
    687 689 │   				});
    ······· │ 
    747 749 │   			polishTitrationSchedule: "Zwiększać stopniowo przez 2 tygodnie",
    748 750 │   			timing: supplement.dosageGuidelines.timing,
    749     │ - → → → polishTiming:·supplement.dosageGuidelines.timing.map(t·=>·t),·//·Use·same·timing·for·Polish
        751 │ + → → → polishTiming:·supplement.dosageGuidelines.timing.map((t)·=>·t),·//·Use·same·timing·for·Polish
    750 752 │   			withFood: supplement.dosageGuidelines.withFood,
    751 753 │   			specialInstructions: [],
  

.\src\lib\utils\accessibility.ts:316:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    314 │ 		const graphElements = document.querySelectorAll("[data-graph-element]");
    315 │ 
  > 316 │ 		graphElements.forEach((element) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 317 │ 			const htmlElement = element as HTMLElement;
         ...
  > 332 │ 			}
  > 333 │ 		});
        │ 		^^
    334 │ 
    335 │ 		// Update CSS custom properties for high contrast
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\utils\polish-text-optimizer.ts:182:2 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    180 │ 	let offset = 0;
    181 │ 
  > 182 │ 	matches.forEach((match) => {
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 183 │ 		const matchIndex = normalizedText.indexOf(match, offset);
         ...
  > 197 │ 		}
  > 198 │ 	});
        │ 	^^
    199 │ 
    200 │ 	return highlightedText;
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\utils\polish-text-optimizer.ts:318:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    316 │ 		const regularWords: string[] = [];
    317 │ 
  > 318 │ 		words.forEach((word) => {
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^
  > 319 │ 			const normalizedWord = normalizePolishText(word);
         ...
  > 324 │ 			}
  > 325 │ 		});
        │ 		^^
    326 │ 
    327 │ 		// Build optimized text starting with important words
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

.\src\lib\utils\polish-text-optimizer.ts:106:42 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━

  × A character class cannot match a character and a combining character.
  
    105 │ 	// Remove diacritics using optimized character replacement
  > 106 │ 	normalized = normalized.replace(/[\u0300-\u036f]/g, "");
        │ 	                                        ^^^^^^^
    107 │ 
    108 │ 	// Convert to lowercase
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

.\src\lib\services\synergistic-analysis-engine.ts format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
      1     │ - /**␍
      2     │ - ·*·Synergistic·Effect·Analysis·Engine␍
      3     │ - ·*·Advanced·engine·for·analyzing·and·quantifying·synergistic·effects·between·supplements␍
      4     │ - ·*/␍
      5     │ - ␍
      6     │ - import·type·{·ComprehensiveSupplementProfile·}·from·"@/data/comprehensive-supplements";␍
      7     │ - import·{·synergisticEffects,·synergisticPairs·}·from·"@/data/synergistic-effects";␍
      8     │ - import·type·{␍
      9     │ - → ActiveCompound,␍
     10     │ - → ClinicalApplication,␍
     11     │ - → EvidenceLevel,␍
     12     │ - → MechanismOfAction,␍
     13     │ - → SideEffect,␍
     14     │ - → SupplementInteraction,␍
     15     │ - }·from·"../../types/supplement";␍
     16     │ - ␍
     17     │ - export·interface·SynergyScore·{␍
     18     │ - → pairwiseScore:·number;·//·0-1·score·for·pairwise·synergy␍
     19     │ - → mechanismScore:·number;·//·0-1·score·for·mechanism·compatibility␍
     20     │ - → evidenceScore:·number;·//·0-1·score·based·on·evidence·level␍
     21     │ - → safetyScore:·number;·//·0-1·score·for·safety·compatibility␍
     22     │ - → overallScore:·number;·//·0-1·combined·score␍
     23     │ - }␍
     24     │ - ␍
     25     │ - export·interface·SynergyAnalysis·{␍
     26     │ - → supplement1:·ComprehensiveSupplementProfile;␍
     27     │ - → supplement2:·ComprehensiveSupplementProfile;␍
     28     │ - → synergyType:·"synergistic"·|·"antagonistic"·|·"additive"·|·"neutral";␍
     29     │ - → mechanism:·string;␍
     30     │ - → polishMechanism:·string;␍
     31     │ - → evidenceLevel:·EvidenceLevel;␍
     32     │ - → strength:·number;·//·0-1␍
     33     │ - → safetyProfile:·"safe"·|·"cautious"·|·"contraindicated";␍
     34     │ - → clinicalApplications:·ClinicalApplication[];␍
     35     │ - → researchStudies:·any[];␍
     36     │ - → recommendations:·string[];␍
     37     │ - → polishRecommendations:·string[];␍
     38     │ - }␍
     39     │ - ␍
     40     │ - export·interface·MultiSupplementSynergy·{␍
     41     │ - → supplements:·ComprehensiveSupplementProfile[];␍
     42     │ - → overallSynergyScore:·number;␍
     43     │ - → mechanismClusters:·MechanismCluster[];␍
     44     │ - → safetyConcerns:·SafetyConcern[];␍
     45     │ - → optimalRatios:·OptimalRatio[];␍
     46     │ - → evidenceStrength:·EvidenceLevel;␍
     47     │ - }␍
     48     │ - ␍
     49     │ - export·interface·MechanismCluster·{␍
     50     │ - → mechanisms:·string[];␍
     51     │ - → combinedEffect:·string;␍
     52     │ - → polishCombinedEffect:·string;␍
     53     │ - → strength:·number;␍
     54     │ - → pathways:·string[];␍
     55     │ - }␍
     56     │ - ␍
     57     │ - export·interface·SafetyConcern·{␍
     58     │ - → type:·"interaction"·|·"contraindication"·|·"side_effect"·|·"dosage";␍
     59     │ - → severity:·"low"·|·"moderate"·|·"high"·|·"critical";␍
     60     │ - → description:·string;␍
     61     │ - → polishDescription:·string;␍
     62     │ - → recommendation:·string;␍
     63     │ - → polishRecommendation:·string;␍
     64     │ - }␍
     65     │ - ␍
     66     │ - export·interface·OptimalRatio·{␍
     67     │ - → supplementId:·string;␍
     68     │ - → supplementName:·string;␍
     69     │ - → ratio:·number;␍
     70     │ - → unit:·string;␍
     71     │ - → reason:·string;␍
     72     │ - → polishReason:·string;␍
     73     │ - }␍
     74     │ - ␍
     75     │ - export·class·SynergisticAnalysisEngine·{␍
     76     │ - → private·readonly·EVIDENCE_WEIGHTS·=·{␍
     77     │ - → → STRONG:·1.0,␍
     78     │ - → → MODERATE:·0.7,␍
     79     │ - → → WEAK:·0.4,␍
     80     │ - → → INSUFFICIENT:·0.1,␍
     81     │ - → → CONFLICTING:·0.2,␍
     82     │ - → };␍
     83     │ - ␍
     84     │ - → private·readonly·MECHANISM_COMPATIBILITY·=·{␍
     85     │ - → → "complementary":·1.0,␍
     86     │ - → → "additive":·0.8,␍
     87     │ - → → "overlapping":·0.6,␍
     88     │ - → → "competitive":·0.3,␍
     89     │ - → → "antagonistic":·-0.5,␍
     90     │ - → };␍
     91     │ - ␍
     92     │ - → /**␍
     93     │ - → ·*·Analyze·synergy·between·two·supplements␍
     94     │ - → ·*/␍
     95     │ - → analyzePairwiseSynergy(␍
     96     │ - → → supplement1:·ComprehensiveSupplementProfile,␍
     97     │ - → → supplement2:·ComprehensiveSupplementProfile,␍
     98     │ - → ):·SynergyAnalysis·|·null·{␍
     99     │ - → → //·Check·existing·synergistic·pairs·data␍
    100     │ - → → const·existingPair·=·synergisticPairs.find(␍
    101     │ - → → → (pair)·=>␍
    102     │ - → → → → (pair.supplement1·===·supplement1.id·&&␍
    103     │ - → → → → → pair.supplement2·===·supplement2.id)·||␍
    104     │ - → → → → (pair.supplement1·===·supplement2.id·&&␍
    105     │ - → → → → → pair.supplement2·===·supplement1.id),␍
    106     │ - → → );␍
    107     │ - ␍
    108     │ - → → if·(existingPair)·{␍
    109     │ - → → → return·this.buildSynergyAnalysisFromPair(supplement1,·supplement2,·existingPair);␍
    110     │ - → → }␍
    111     │ - ␍
    112     │ - → → //·Analyze·interactions·from·supplement·data␍
    113     │ - → → const·interactions1·=·supplement1.interactions.filter(␍
    114     │ - → → → (int:·SupplementInteraction)·=>␍
    115     │ - → → → → int.substance·===·supplement2.name·||␍
    116     │ - → → → → int.polishSubstance·===·supplement2.polishName,␍
    117     │ - → → );␍
    118     │ - ␍
    119     │ - → → const·interactions2·=·supplement2.interactions.filter(␍
    120     │ - → → → (int:·SupplementInteraction)·=>␍
    121     │ - → → → → int.substance·===·supplement1.name·||␍
    122     │ - → → → → int.polishSubstance·===·supplement1.polishName,␍
    123     │ - → → );␍
    124     │ - ␍
    125     │ - → → const·allInteractions·=·[...interactions1,·...interactions2];␍
    126     │ - ␍
    127     │ - → → if·(allInteractions.length·===·0)·{␍
    128     │ - → → → return·null;·//·No·known·interactions␍
    129     │ - → → }␍
    130     │ - ␍
    131     │ - → → return·this.buildSynergyAnalysisFromInteractions(␍
    132     │ - → → → supplement1,␍
    133     │ - → → → supplement2,␍
    134     │ - → → → allInteractions,␍
    135     │ - → → );␍
    136     │ - → }␍
    137     │ - ␍
    138     │ - → /**␍
    139     │ - → ·*·Analyze·synergy·in·a·multi-supplement·combination␍
    140     │ - → ·*/␍
    141     │ - → analyzeMultiSupplementSynergy(␍
    142     │ - → → supplements:·ComprehensiveSupplementProfile[],␍
    143     │ - → ):·MultiSupplementSynergy·{␍
    144     │ - → → if·(supplements.length·<·2)·{␍
    145     │ - → → → throw·new·Error("Multi-supplement·analysis·requires·at·least·2·supplements");␍
    146     │ - → → }␍
    147     │ - ␍
    148     │ - → → //·Analyze·all·pairwise·synergies␍
    149     │ - → → const·pairwiseAnalyses:·SynergyAnalysis[]·=·[];␍
    150     │ - → → for·(let·i·=·0;·i·<·supplements.length;·i++)·{␍
  1054 more lines truncated
  

Checked 332 files in 314ms. No fixes applied.
Found 830 errors.
Found 1 warning.
check ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while running checks.
  

